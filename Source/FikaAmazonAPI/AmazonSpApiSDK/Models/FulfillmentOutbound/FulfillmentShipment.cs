/* 
 * Selling Partner API for Fulfillment Outbound
 *
 * The Selling Partner API for Fulfillment Outbound lets you create applications that help a seller fulfill Multi-Channel Fulfillment orders using their inventory in Amazon's fulfillment network. You can get information on both potential and existing fulfillment orders.
 *
 * OpenAPI spec version: v0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System;
using System.Collections.Generic;
using System.ComponentModel.DataAnnotations;
using System.IO;
using System.Runtime.Serialization;
using System.Text;

namespace FikaAmazonAPI.AmazonSpApiSDK.Models.FulfillmentOutbound
{
    /// <summary>
    /// Delivery and item information for a shipment in a fulfillment order.
    /// </summary>
    [DataContract]
    public partial class FulfillmentShipment : IEquatable<FulfillmentShipment>, IValidatableObject
    {
        /// <summary>
        /// The current status of the shipment.
        /// </summary>
        /// <value>The current status of the shipment.</value>
        [JsonConverter(typeof(StringEnumConverter))]
        public enum FulfillmentShipmentStatusEnum
        {

            /// <summary>
            /// Enum PENDING for value: PENDING
            /// </summary>
            [EnumMember(Value = "PENDING")]
            PENDING = 1,

            /// <summary>
            /// Enum SHIPPED for value: SHIPPED
            /// </summary>
            [EnumMember(Value = "SHIPPED")]
            SHIPPED = 2,

            /// <summary>
            /// Enum CANCELLEDBYFULFILLER for value: CANCELLED_BY_FULFILLER
            /// </summary>
            [EnumMember(Value = "CANCELLED_BY_FULFILLER")]
            CANCELLEDBYFULFILLER = 3,

            /// <summary>
            /// Enum CANCELLEDBYSELLER for value: CANCELLED_BY_SELLER
            /// </summary>
            [EnumMember(Value = "CANCELLED_BY_SELLER")]
            CANCELLEDBYSELLER = 4
        }

        /// <summary>
        /// The current status of the shipment.
        /// </summary>
        /// <value>The current status of the shipment.</value>
        [DataMember(Name = "FulfillmentShipmentStatus", EmitDefaultValue = false)]
        public FulfillmentShipmentStatusEnum FulfillmentShipmentStatus { get; set; }
        /// <summary>
        /// Initializes a new instance of the <see cref="FulfillmentShipment" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        public FulfillmentShipment() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="FulfillmentShipment" /> class.
        /// </summary>
        /// <param name="AmazonShipmentId">A shipment identifier assigned by Amazon. (required).</param>
        /// <param name="FulfillmentCenterId">An identifier for the fulfillment center that the shipment will be sent from. (required).</param>
        /// <param name="FulfillmentShipmentStatus">The current status of the shipment. (required).</param>
        /// <param name="ShippingDateTime">The meaning of the ShippingDateTime value depends on the current status of the shipment. If the current value of FulfillmentShipmentStatus is:  * Pending - ShippingDateTime represents the estimated time that the shipment will leave the Amazon fulfillment center.  * Shipped - ShippingDateTime represents the date that the shipment left the Amazon fulfillment center. If a shipment includes more than one package, ShippingDateTime applies to all of the packages in the shipment. If the value of FulfillmentShipmentStatus is CancelledByFulfiller or CancelledBySeller, ShippingDateTime is not returned. The value must be in ISO 8601 date time format..</param>
        /// <param name="EstimatedArrivalDateTime">The estimated arrival date and time of the shipment, in ISO 8601 date time format. Note that this value can change over time. If a shipment includes more than one package, EstimatedArrivalDateTime applies to all of the packages in the shipment. If the shipment has been cancelled, EstimatedArrivalDateTime is not returned..</param>
        /// <param name="FulfillmentShipmentItem">FulfillmentShipmentItem (required).</param>
        /// <param name="FulfillmentShipmentPackage">FulfillmentShipmentPackage.</param>
        public FulfillmentShipment(string AmazonShipmentId = default(string), string FulfillmentCenterId = default(string), FulfillmentShipmentStatusEnum FulfillmentShipmentStatus = default(FulfillmentShipmentStatusEnum), DateTime? ShippingDate = null, DateTime? EstimatedArrivalDate = null, FulfillmentShipmentItemList FulfillmentShipmentItem = default(FulfillmentShipmentItemList), FulfillmentShipmentPackageList FulfillmentShipmentPackage = default(FulfillmentShipmentPackageList))
        {
            // to ensure "AmazonShipmentId" is required (not null)
            if (AmazonShipmentId == null)
            {
                throw new InvalidDataException("AmazonShipmentId is a required property for FulfillmentShipment and cannot be null");
            }
            else
            {
                this.AmazonShipmentId = AmazonShipmentId;
            }
            // to ensure "FulfillmentCenterId" is required (not null)
            if (FulfillmentCenterId == null)
            {
                throw new InvalidDataException("FulfillmentCenterId is a required property for FulfillmentShipment and cannot be null");
            }
            else
            {
                this.FulfillmentCenterId = FulfillmentCenterId;
            }
            // to ensure "FulfillmentShipmentStatus" is required (not null)
            if (FulfillmentShipmentStatus == null)
            {
                throw new InvalidDataException("FulfillmentShipmentStatus is a required property for FulfillmentShipment and cannot be null");
            }
            else
            {
                this.FulfillmentShipmentStatus = FulfillmentShipmentStatus;
            }
            // to ensure "FulfillmentShipmentItem" is required (not null)
            if (FulfillmentShipmentItem == null)
            {
                throw new InvalidDataException("FulfillmentShipmentItem is a required property for FulfillmentShipment and cannot be null");
            }
            else
            {
                this.FulfillmentShipmentItem = FulfillmentShipmentItem;
            }
            this.ShippingDate = ShippingDate;
            this.EstimatedArrivalDate = EstimatedArrivalDate;
            this.FulfillmentShipmentPackage = FulfillmentShipmentPackage;
        }

        /// <summary>
        /// A shipment identifier assigned by Amazon.
        /// </summary>
        /// <value>A shipment identifier assigned by Amazon.</value>
        [DataMember(Name = "AmazonShipmentId", EmitDefaultValue = false)]
        public string AmazonShipmentId { get; set; }

        /// <summary>
        /// An identifier for the fulfillment center that the shipment will be sent from.
        /// </summary>
        /// <value>An identifier for the fulfillment center that the shipment will be sent from.</value>
        [DataMember(Name = "FulfillmentCenterId", EmitDefaultValue = false)]
        public string FulfillmentCenterId { get; set; }


        /// <summary>
        /// The meaning of the ShippingDateTime value depends on the current status of the shipment. If the current value of FulfillmentShipmentStatus is:  * Pending - ShippingDateTime represents the estimated time that the shipment will leave the Amazon fulfillment center.  * Shipped - ShippingDateTime represents the date that the shipment left the Amazon fulfillment center. If a shipment includes more than one package, ShippingDateTime applies to all of the packages in the shipment. If the value of FulfillmentShipmentStatus is CancelledByFulfiller or CancelledBySeller, ShippingDateTime is not returned. The value must be in ISO 8601 date time format.
        /// </summary>
        /// <value>The meaning of the ShippingDate value depends on the current status of the shipment. If the current value of FulfillmentShipmentStatus is:  * Pending - ShippingDateTime represents the estimated time that the shipment will leave the Amazon fulfillment center.  * Shipped - ShippingDateTime represents the date that the shipment left the Amazon fulfillment center. If a shipment includes more than one package, ShippingDateTime applies to all of the packages in the shipment. If the value of FulfillmentShipmentStatus is CancelledByFulfiller or CancelledBySeller, ShippingDateTime is not returned. The value must be in ISO 8601 date time format.</value>
        [DataMember(Name = "ShippingDate", EmitDefaultValue = false)]
        public DateTime? ShippingDate { get; set; }

        /// <summary>
        /// The estimated arrival date and time of the shipment, in ISO 8601 date time format. Note that this value can change over time. If a shipment includes more than one package, EstimatedArrivalDateTime applies to all of the packages in the shipment. If the shipment has been cancelled, EstimatedArrivalDateTime is not returned.
        /// </summary>
        /// <value>The estimated arrival date and time of the shipment, in ISO 8601 date time format. Note that this value can change over time. If a shipment includes more than one package, EstimatedArrivalDateTime applies to all of the packages in the shipment. If the shipment has been cancelled, EstimatedArrivalDateTime is not returned.</value>
        [DataMember(Name = "EstimatedArrivalDate", EmitDefaultValue = false)]
        public DateTime? EstimatedArrivalDate { get; set; }

        /// <summary>
        /// Gets or Sets FulfillmentShipmentItem
        /// </summary>
        [DataMember(Name = "FulfillmentShipmentItem", EmitDefaultValue = false)]
        public FulfillmentShipmentItemList FulfillmentShipmentItem { get; set; }

        /// <summary>
        /// Gets or Sets FulfillmentShipmentPackage
        /// </summary>
        [DataMember(Name = "FulfillmentShipmentPackage", EmitDefaultValue = false)]
        public FulfillmentShipmentPackageList FulfillmentShipmentPackage { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class FulfillmentShipment {\n");
            sb.Append("  AmazonShipmentId: ").Append(AmazonShipmentId).Append("\n");
            sb.Append("  FulfillmentCenterId: ").Append(FulfillmentCenterId).Append("\n");
            sb.Append("  FulfillmentShipmentStatus: ").Append(FulfillmentShipmentStatus).Append("\n");
            sb.Append("  ShippingDate: ").Append(ShippingDate).Append("\n");
            sb.Append("  EstimatedArrivalDate: ").Append(EstimatedArrivalDate).Append("\n");
            sb.Append("  FulfillmentShipmentItem: ").Append(FulfillmentShipmentItem).Append("\n");
            sb.Append("  FulfillmentShipmentPackage: ").Append(FulfillmentShipmentPackage).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as FulfillmentShipment);
        }

        /// <summary>
        /// Returns true if FulfillmentShipment instances are equal
        /// </summary>
        /// <param name="input">Instance of FulfillmentShipment to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(FulfillmentShipment input)
        {
            if (input == null)
                return false;

            return
                (
                    this.AmazonShipmentId == input.AmazonShipmentId ||
                    (this.AmazonShipmentId != null &&
                    this.AmazonShipmentId.Equals(input.AmazonShipmentId))
                ) &&
                (
                    this.FulfillmentCenterId == input.FulfillmentCenterId ||
                    (this.FulfillmentCenterId != null &&
                    this.FulfillmentCenterId.Equals(input.FulfillmentCenterId))
                ) &&
                (
                    this.FulfillmentShipmentStatus == input.FulfillmentShipmentStatus ||
                    (this.FulfillmentShipmentStatus != null &&
                    this.FulfillmentShipmentStatus.Equals(input.FulfillmentShipmentStatus))
                ) &&
                (
                    this.ShippingDate == input.ShippingDate ||
                    (this.ShippingDate != null &&
                    this.ShippingDate.Equals(input.ShippingDate))
                ) &&
                (
                    this.EstimatedArrivalDate == input.EstimatedArrivalDate ||
                    (this.EstimatedArrivalDate != null &&
                    this.EstimatedArrivalDate.Equals(input.EstimatedArrivalDate))
                ) &&
                (
                    this.FulfillmentShipmentItem == input.FulfillmentShipmentItem ||
                    (this.FulfillmentShipmentItem != null &&
                    this.FulfillmentShipmentItem.Equals(input.FulfillmentShipmentItem))
                ) &&
                (
                    this.FulfillmentShipmentPackage == input.FulfillmentShipmentPackage ||
                    (this.FulfillmentShipmentPackage != null &&
                    this.FulfillmentShipmentPackage.Equals(input.FulfillmentShipmentPackage))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.AmazonShipmentId != null)
                    hashCode = hashCode * 59 + this.AmazonShipmentId.GetHashCode();
                if (this.FulfillmentCenterId != null)
                    hashCode = hashCode * 59 + this.FulfillmentCenterId.GetHashCode();
                if (this.FulfillmentShipmentStatus != null)
                    hashCode = hashCode * 59 + this.FulfillmentShipmentStatus.GetHashCode();
                if (this.ShippingDate != null)
                    hashCode = hashCode * 59 + this.ShippingDate.GetHashCode();
                if (this.EstimatedArrivalDate != null)
                    hashCode = hashCode * 59 + this.EstimatedArrivalDate.GetHashCode();
                if (this.FulfillmentShipmentItem != null)
                    hashCode = hashCode * 59 + this.FulfillmentShipmentItem.GetHashCode();
                if (this.FulfillmentShipmentPackage != null)
                    hashCode = hashCode * 59 + this.FulfillmentShipmentPackage.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
