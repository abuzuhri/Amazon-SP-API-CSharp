/* 
 * Selling Partner API for Fulfillment Outbound
 *
 * The Selling Partner API for Fulfillment Outbound lets you create applications that help a seller fulfill Multi-Channel Fulfillment orders using their inventory in Amazon's fulfillment network. You can get information on both potential and existing fulfillment orders.
 *
 * OpenAPI spec version: v0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using Newtonsoft.Json;
using System;
using System.Collections.Generic;
using System.ComponentModel.DataAnnotations;
using System.IO;
using System.Runtime.Serialization;
using System.Text;

namespace FikaAmazonAPI.AmazonSpApiSDK.Models.FulfillmentOutbound
{
    /// <summary>
    /// General information about a fulfillment order, including its status.
    /// </summary>
    [DataContract]
    public partial class FulfillmentOrder : IEquatable<FulfillmentOrder>, IValidatableObject
    {
        /// <summary>
        /// Gets or Sets ShippingSpeedCategory
        /// </summary>
        [DataMember(Name = "ShippingSpeedCategory", EmitDefaultValue = false)]
        public ShippingSpeedCategory ShippingSpeedCategory { get; set; }
        /// <summary>
        /// Gets or Sets FulfillmentAction
        /// </summary>
        [DataMember(Name = "FulfillmentAction", EmitDefaultValue = false)]
        public FulfillmentAction? FulfillmentAction { get; set; }
        /// <summary>
        /// Gets or Sets FulfillmentPolicy
        /// </summary>
        [DataMember(Name = "FulfillmentPolicy", EmitDefaultValue = false)]
        public FulfillmentPolicy? FulfillmentPolicy { get; set; }
        /// <summary>
        /// Gets or Sets FulfillmentOrderStatus
        /// </summary>
        [DataMember(Name = "FulfillmentOrderStatus", EmitDefaultValue = false)]
        public FulfillmentOrderStatus FulfillmentOrderStatus { get; set; }
        /// <summary>
        /// Initializes a new instance of the <see cref="FulfillmentOrder" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        public FulfillmentOrder() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="FulfillmentOrder" /> class.
        /// </summary>
        /// <param name="SellerFulfillmentOrderId">The fulfillment order identifier submitted with the createFulfillmentOrder operation. (required).</param>
        /// <param name="MarketplaceId">The identifier for the marketplace the fulfillment order is placed against. (required).</param>
        /// <param name="DisplayableOrderId">A fulfillment order identifier submitted with the createFulfillmentOrder operation. Displays as the order identifier in recipient-facing materials such as the packing slip. (required).</param>
        /// <param name="DisplayableOrderDateTime">A date and time submitted with the createFulfillmentOrder operation. Displays as the order date in recipient-facing materials such as the packing slip. (required).</param>
        /// <param name="DisplayableOrderComment">A text block submitted with the createFulfillmentOrder operation. Displays in recipient-facing materials such as the packing slip. (required).</param>
        /// <param name="ShippingSpeedCategory">ShippingSpeedCategory (required).</param>
        /// <param name="DeliveryWindow">DeliveryWindow.</param>
        /// <param name="DestinationAddress">The destination address submitted with the createFulfillmentOrder operation. (required).</param>
        /// <param name="FulfillmentAction">FulfillmentAction.</param>
        /// <param name="FulfillmentPolicy">FulfillmentPolicy.</param>
        /// <param name="FulfillmentMethod">Indicates the intended recipient channel for the order..</param>
        /// <param name="CODSettings">CODSettings.</param>
        /// <param name="ReceivedDateTime">The date and time that the fulfillment order was received by an Amazon fulfillment center. (required).</param>
        /// <param name="FulfillmentOrderStatus">FulfillmentOrderStatus (required).</param>
        /// <param name="StatusUpdatedDateTime">The date and time that the status of the fulfillment order last changed, in ISO 8601 date time format. (required).</param>
        /// <param name="NotificationEmailList">NotificationEmailList.</param>
        public FulfillmentOrder(string SellerFulfillmentOrderId = default(string), string MarketplaceId = default(string), string DisplayableOrderId = default(string), DateTime DisplayableOrderDate = default(DateTime), string DisplayableOrderComment = default(string), ShippingSpeedCategory ShippingSpeedCategory = default(ShippingSpeedCategory), DeliveryWindow DeliveryWindow = default(DeliveryWindow), Address DestinationAddress = default(Address), FulfillmentAction? FulfillmentAction = default(FulfillmentAction?), FulfillmentPolicy? FulfillmentPolicy = default(FulfillmentPolicy?), string FulfillmentMethod = default(string), CODSettings CODSettings = default(CODSettings), DateTime ReceivedDate = default(DateTime), FulfillmentOrderStatus FulfillmentOrderStatus = default(FulfillmentOrderStatus), DateTime? StatusUpdatedDate = null, NotificationEmailList NotificationEmails = default(NotificationEmailList))
        {
            // to ensure "SellerFulfillmentOrderId" is required (not null)
            if (SellerFulfillmentOrderId == null)
            {
                throw new InvalidDataException("SellerFulfillmentOrderId is a required property for FulfillmentOrder and cannot be null");
            }
            else
            {
                this.SellerFulfillmentOrderId = SellerFulfillmentOrderId;
            }
            // to ensure "MarketplaceId" is required (not null)
            if (MarketplaceId == null)
            {
                throw new InvalidDataException("MarketplaceId is a required property for FulfillmentOrder and cannot be null");
            }
            else
            {
                this.MarketplaceId = MarketplaceId;
            }
            // to ensure "DisplayableOrderId" is required (not null)
            if (DisplayableOrderId == null)
            {
                throw new InvalidDataException("DisplayableOrderId is a required property for FulfillmentOrder and cannot be null");
            }
            else
            {
                this.DisplayableOrderId = DisplayableOrderId;
            }
            // to ensure "DisplayableOrderDateTime" is required (not null)
            if (DisplayableOrderDate == null)
            {
                throw new InvalidDataException("DisplayableOrderDate is a required property for FulfillmentOrder and cannot be null");
            }
            else
            {
                this.DisplayableOrderDate = DisplayableOrderDate;
            }
            // to ensure "DisplayableOrderComment" is required (not null)
            if (DisplayableOrderComment == null)
            {
                throw new InvalidDataException("DisplayableOrderComment is a required property for FulfillmentOrder and cannot be null");
            }
            else
            {
                this.DisplayableOrderComment = DisplayableOrderComment;
            }
            // to ensure "ShippingSpeedCategory" is required (not null)
            if (ShippingSpeedCategory == null)
            {
                throw new InvalidDataException("ShippingSpeedCategory is a required property for FulfillmentOrder and cannot be null");
            }
            else
            {
                this.ShippingSpeedCategory = ShippingSpeedCategory;
            }
            // to ensure "DestinationAddress" is required (not null)
            if (DestinationAddress == null)
            {
                throw new InvalidDataException("DestinationAddress is a required property for FulfillmentOrder and cannot be null");
            }
            else
            {
                this.DestinationAddress = DestinationAddress;
            }
            // to ensure "ReceivedDateTime" is required (not null)
            if (ReceivedDate == null)
            {
                throw new InvalidDataException("ReceivedDate is a required property for FulfillmentOrder and cannot be null");
            }
            else
            {
                this.ReceivedDate = ReceivedDate;
            }
            // to ensure "FulfillmentOrderStatus" is required (not null)
            if (FulfillmentOrderStatus == null)
            {
                throw new InvalidDataException("FulfillmentOrderStatus is a required property for FulfillmentOrder and cannot be null");
            }
            else
            {
                this.FulfillmentOrderStatus = FulfillmentOrderStatus;
            }
            // to ensure "StatusUpdatedDateTime" is required (not null)
            if (StatusUpdatedDate == null)
            {
                throw new InvalidDataException("StatusUpdatedDate is a required property for FulfillmentOrder and cannot be null");
            }
            else
            {
                this.StatusUpdatedDate = StatusUpdatedDate;
            }
            this.DeliveryWindow = DeliveryWindow;
            this.FulfillmentAction = FulfillmentAction;
            this.FulfillmentPolicy = FulfillmentPolicy;
            this.FulfillmentMethod = FulfillmentMethod;
            this.CODSettings = CODSettings;
            this.NotificationEmails = NotificationEmails;
        }

        /// <summary>
        /// The fulfillment order identifier submitted with the createFulfillmentOrder operation.
        /// </summary>
        /// <value>The fulfillment order identifier submitted with the createFulfillmentOrder operation.</value>
        [DataMember(Name = "SellerFulfillmentOrderId", EmitDefaultValue = false)]
        public string SellerFulfillmentOrderId { get; set; }

        /// <summary>
        /// The identifier for the marketplace the fulfillment order is placed against.
        /// </summary>
        /// <value>The identifier for the marketplace the fulfillment order is placed against.</value>
        [DataMember(Name = "MarketplaceId", EmitDefaultValue = false)]
        public string MarketplaceId { get; set; }

        /// <summary>
        /// A fulfillment order identifier submitted with the createFulfillmentOrder operation. Displays as the order identifier in recipient-facing materials such as the packing slip.
        /// </summary>
        /// <value>A fulfillment order identifier submitted with the createFulfillmentOrder operation. Displays as the order identifier in recipient-facing materials such as the packing slip.</value>
        [DataMember(Name = "DisplayableOrderId", EmitDefaultValue = false)]
        public string DisplayableOrderId { get; set; }

        /// <summary>
        /// A date and time submitted with the createFulfillmentOrder operation. Displays as the order date in recipient-facing materials such as the packing slip.
        /// </summary>
        /// <value>A date and time submitted with the createFulfillmentOrder operation. Displays as the order date in recipient-facing materials such as the packing slip.</value>
        [DataMember(Name = "DisplayableOrderDate", EmitDefaultValue = false)]
        public DateTime DisplayableOrderDate { get; set; }

        /// <summary>
        /// A text block submitted with the createFulfillmentOrder operation. Displays in recipient-facing materials such as the packing slip.
        /// </summary>
        /// <value>A text block submitted with the createFulfillmentOrder operation. Displays in recipient-facing materials such as the packing slip.</value>
        [DataMember(Name = "DisplayableOrderComment", EmitDefaultValue = false)]
        public string DisplayableOrderComment { get; set; }


        /// <summary>
        /// Gets or Sets DeliveryWindow
        /// </summary>
        [DataMember(Name = "DeliveryWindow", EmitDefaultValue = false)]
        public DeliveryWindow DeliveryWindow { get; set; }

        /// <summary>
        /// The destination address submitted with the createFulfillmentOrder operation.
        /// </summary>
        /// <value>The destination address submitted with the createFulfillmentOrder operation.</value>
        [DataMember(Name = "DestinationAddress", EmitDefaultValue = false)]
        public Address DestinationAddress { get; set; }



        /// <summary>
        /// Indicates the intended recipient channel for the order.
        /// </summary>
        /// <value>Indicates the intended recipient channel for the order.</value>
        [DataMember(Name = "FulfillmentMethod", EmitDefaultValue = false)]
        public string FulfillmentMethod { get; set; }

        /// <summary>
        /// Gets or Sets CODSettings
        /// </summary>
        [DataMember(Name = "CODSettings", EmitDefaultValue = false)]
        public CODSettings CODSettings { get; set; }

        /// <summary>
        /// The date and time that the fulfillment order was received by an Amazon fulfillment center.
        /// </summary>
        /// <value>The date and time that the fulfillment order was received by an Amazon fulfillment center.</value>
        [DataMember(Name = "ReceivedDate", EmitDefaultValue = false)]
        public DateTime ReceivedDate { get; set; }


        /// <summary>
        /// The date and time that the status of the fulfillment order last changed, in ISO 8601 date time format.
        /// </summary>
        /// <value>The date and time that the status of the fulfillment order last changed, in ISO 8601 date time format.</value>
        [DataMember(Name = "StatusUpdatedDate", EmitDefaultValue = false)]
        public DateTime? StatusUpdatedDate { get; set; }

        /// <summary>
        /// Gets or Sets NotificationEmails
        /// </summary>
        [DataMember(Name = "NotificationEmails", EmitDefaultValue = false)]
        public NotificationEmailList NotificationEmails { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class FulfillmentOrder {\n");
            sb.Append("  SellerFulfillmentOrderId: ").Append(SellerFulfillmentOrderId).Append("\n");
            sb.Append("  MarketplaceId: ").Append(MarketplaceId).Append("\n");
            sb.Append("  DisplayableOrderId: ").Append(DisplayableOrderId).Append("\n");
            sb.Append("  DisplayableOrderDate: ").Append(DisplayableOrderDate).Append("\n");
            sb.Append("  DisplayableOrderComment: ").Append(DisplayableOrderComment).Append("\n");
            sb.Append("  ShippingSpeedCategory: ").Append(ShippingSpeedCategory).Append("\n");
            sb.Append("  DeliveryWindow: ").Append(DeliveryWindow).Append("\n");
            sb.Append("  DestinationAddress: ").Append(DestinationAddress).Append("\n");
            sb.Append("  FulfillmentAction: ").Append(FulfillmentAction).Append("\n");
            sb.Append("  FulfillmentPolicy: ").Append(FulfillmentPolicy).Append("\n");
            sb.Append("  FulfillmentMethod: ").Append(FulfillmentMethod).Append("\n");
            sb.Append("  CODSettings: ").Append(CODSettings).Append("\n");
            sb.Append("  ReceivedDate: ").Append(ReceivedDate).Append("\n");
            sb.Append("  FulfillmentOrderStatus: ").Append(FulfillmentOrderStatus).Append("\n");
            sb.Append("  StatusUpdatedDate: ").Append(StatusUpdatedDate).Append("\n");
            sb.Append("  NotificationEmails: ").Append(NotificationEmails).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as FulfillmentOrder);
        }

        /// <summary>
        /// Returns true if FulfillmentOrder instances are equal
        /// </summary>
        /// <param name="input">Instance of FulfillmentOrder to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(FulfillmentOrder input)
        {
            if (input == null)
                return false;

            return
                (
                    this.SellerFulfillmentOrderId == input.SellerFulfillmentOrderId ||
                    (this.SellerFulfillmentOrderId != null &&
                    this.SellerFulfillmentOrderId.Equals(input.SellerFulfillmentOrderId))
                ) &&
                (
                    this.MarketplaceId == input.MarketplaceId ||
                    (this.MarketplaceId != null &&
                    this.MarketplaceId.Equals(input.MarketplaceId))
                ) &&
                (
                    this.DisplayableOrderId == input.DisplayableOrderId ||
                    (this.DisplayableOrderId != null &&
                    this.DisplayableOrderId.Equals(input.DisplayableOrderId))
                ) &&
                (
                    this.DisplayableOrderDate == input.DisplayableOrderDate ||
                    (this.DisplayableOrderDate != null &&
                    this.DisplayableOrderDate.Equals(input.DisplayableOrderDate))
                ) &&
                (
                    this.DisplayableOrderComment == input.DisplayableOrderComment ||
                    (this.DisplayableOrderComment != null &&
                    this.DisplayableOrderComment.Equals(input.DisplayableOrderComment))
                ) &&
                (
                    this.ShippingSpeedCategory == input.ShippingSpeedCategory ||
                    (this.ShippingSpeedCategory != null &&
                    this.ShippingSpeedCategory.Equals(input.ShippingSpeedCategory))
                ) &&
                (
                    this.DeliveryWindow == input.DeliveryWindow ||
                    (this.DeliveryWindow != null &&
                    this.DeliveryWindow.Equals(input.DeliveryWindow))
                ) &&
                (
                    this.DestinationAddress == input.DestinationAddress ||
                    (this.DestinationAddress != null &&
                    this.DestinationAddress.Equals(input.DestinationAddress))
                ) &&
                (
                    this.FulfillmentAction == input.FulfillmentAction ||
                    (this.FulfillmentAction != null &&
                    this.FulfillmentAction.Equals(input.FulfillmentAction))
                ) &&
                (
                    this.FulfillmentPolicy == input.FulfillmentPolicy ||
                    (this.FulfillmentPolicy != null &&
                    this.FulfillmentPolicy.Equals(input.FulfillmentPolicy))
                ) &&
                (
                    this.FulfillmentMethod == input.FulfillmentMethod ||
                    (this.FulfillmentMethod != null &&
                    this.FulfillmentMethod.Equals(input.FulfillmentMethod))
                ) &&
                (
                    this.CODSettings == input.CODSettings ||
                    (this.CODSettings != null &&
                    this.CODSettings.Equals(input.CODSettings))
                ) &&
                (
                    this.ReceivedDate == input.ReceivedDate ||
                    (this.ReceivedDate != null &&
                    this.ReceivedDate.Equals(input.ReceivedDate))
                ) &&
                (
                    this.FulfillmentOrderStatus == input.FulfillmentOrderStatus ||
                    (this.FulfillmentOrderStatus != null &&
                    this.FulfillmentOrderStatus.Equals(input.FulfillmentOrderStatus))
                ) &&
                (
                    this.StatusUpdatedDate == input.StatusUpdatedDate ||
                    (this.StatusUpdatedDate != null &&
                    this.StatusUpdatedDate.Equals(input.StatusUpdatedDate))
                ) &&
                (
                    this.NotificationEmails == input.NotificationEmails ||
                    (this.NotificationEmails != null &&
                    this.NotificationEmails.Equals(input.NotificationEmails))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.SellerFulfillmentOrderId != null)
                    hashCode = hashCode * 59 + this.SellerFulfillmentOrderId.GetHashCode();
                if (this.MarketplaceId != null)
                    hashCode = hashCode * 59 + this.MarketplaceId.GetHashCode();
                if (this.DisplayableOrderId != null)
                    hashCode = hashCode * 59 + this.DisplayableOrderId.GetHashCode();
                if (this.DisplayableOrderDate != null)
                    hashCode = hashCode * 59 + this.DisplayableOrderDate.GetHashCode();
                if (this.DisplayableOrderComment != null)
                    hashCode = hashCode * 59 + this.DisplayableOrderComment.GetHashCode();
                if (this.ShippingSpeedCategory != null)
                    hashCode = hashCode * 59 + this.ShippingSpeedCategory.GetHashCode();
                if (this.DeliveryWindow != null)
                    hashCode = hashCode * 59 + this.DeliveryWindow.GetHashCode();
                if (this.DestinationAddress != null)
                    hashCode = hashCode * 59 + this.DestinationAddress.GetHashCode();
                if (this.FulfillmentAction != null)
                    hashCode = hashCode * 59 + this.FulfillmentAction.GetHashCode();
                if (this.FulfillmentPolicy != null)
                    hashCode = hashCode * 59 + this.FulfillmentPolicy.GetHashCode();
                if (this.FulfillmentMethod != null)
                    hashCode = hashCode * 59 + this.FulfillmentMethod.GetHashCode();
                if (this.CODSettings != null)
                    hashCode = hashCode * 59 + this.CODSettings.GetHashCode();
                if (this.ReceivedDate != null)
                    hashCode = hashCode * 59 + this.ReceivedDate.GetHashCode();
                if (this.FulfillmentOrderStatus != null)
                    hashCode = hashCode * 59 + this.FulfillmentOrderStatus.GetHashCode();
                if (this.StatusUpdatedDate != null)
                    hashCode = hashCode * 59 + this.StatusUpdatedDate.GetHashCode();
                if (this.NotificationEmails != null)
                    hashCode = hashCode * 59 + this.NotificationEmails.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
