/* 
 * Selling Partner API for Fulfillment Outbound
 *
 * The Selling Partner API for Fulfillment Outbound lets you create applications that help a seller fulfill Multi-Channel Fulfillment orders using their inventory in Amazon's fulfillment network. You can get information on both potential and existing fulfillment orders.
 *
 * OpenAPI spec version: v0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using Newtonsoft.Json;
using System;
using System.Collections.Generic;
using System.ComponentModel.DataAnnotations;
using System.IO;
using System.Runtime.Serialization;
using System.Text;

namespace FikaAmazonAPI.AmazonSpApiSDK.Models.FulfillmentOutbound
{
    /// <summary>
    /// An item that Amazon accepted for return.
    /// </summary>
    [DataContract]
    public partial class ReturnItem : IEquatable<ReturnItem>, IValidatableObject
    {
        /// <summary>
        /// Indicates if the return item has been processed by an Amazon fulfillment center.
        /// </summary>
        /// <value>Indicates if the return item has been processed by an Amazon fulfillment center.</value>
        [DataMember(Name = "Status", EmitDefaultValue = false)]
        public FulfillmentReturnItemStatus Status { get; set; }
        /// <summary>
        /// Gets or Sets ReturnReceivedCondition
        /// </summary>
        [DataMember(Name = "ReturnReceivedCondition", EmitDefaultValue = false)]
        public ReturnItemDisposition? ReturnReceivedCondition { get; set; }
        /// <summary>
        /// Initializes a new instance of the <see cref="ReturnItem" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        public ReturnItem() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="ReturnItem" /> class.
        /// </summary>
        /// <param name="SellerReturnItemId">An identifier assigned by the seller to the return item. (required).</param>
        /// <param name="SellerFulfillmentOrderItemId">The identifier assigned to the item by the seller when the fulfillment order was created. (required).</param>
        /// <param name="AmazonShipmentId">The identifier for the shipment that is associated with the return item. (required).</param>
        /// <param name="SellerReturnReasonCode">The return reason code assigned to the return item by the seller. (required).</param>
        /// <param name="ReturnComment">An optional comment about the return item..</param>
        /// <param name="AmazonReturnReasonCode">The return reason code that the Amazon fulfillment center assigned to the return item..</param>
        /// <param name="Status">Indicates if the return item has been processed by an Amazon fulfillment center. (required).</param>
        /// <param name="StatusChangedDate">Indicates when the status last changed. (required).</param>
        /// <param name="ReturnAuthorizationId">Identifies the return authorization used to return this item. See ReturnAuthorization..</param>
        /// <param name="ReturnReceivedCondition">ReturnReceivedCondition.</param>
        /// <param name="FulfillmentCenterId">The identifier for the Amazon fulfillment center that processed the return item..</param>
        public ReturnItem(string SellerReturnItemId = default(string), string SellerFulfillmentOrderItemId = default(string), string AmazonShipmentId = default(string), string SellerReturnReasonCode = default(string), string ReturnComment = default(string), string AmazonReturnReasonCode = default(string), FulfillmentReturnItemStatus Status = default(FulfillmentReturnItemStatus), DateTime StatusChangedDate = default(DateTime), string ReturnAuthorizationId = default(string), ReturnItemDisposition? ReturnReceivedCondition = default(ReturnItemDisposition?), string FulfillmentCenterId = default(string))
        {
            // to ensure "SellerReturnItemId" is required (not null)
            if (SellerReturnItemId == null)
            {
                throw new InvalidDataException("SellerReturnItemId is a required property for ReturnItem and cannot be null");
            }
            else
            {
                this.SellerReturnItemId = SellerReturnItemId;
            }
            // to ensure "SellerFulfillmentOrderItemId" is required (not null)
            if (SellerFulfillmentOrderItemId == null)
            {
                throw new InvalidDataException("SellerFulfillmentOrderItemId is a required property for ReturnItem and cannot be null");
            }
            else
            {
                this.SellerFulfillmentOrderItemId = SellerFulfillmentOrderItemId;
            }
            // to ensure "AmazonShipmentId" is required (not null)
            if (AmazonShipmentId == null)
            {
                throw new InvalidDataException("AmazonShipmentId is a required property for ReturnItem and cannot be null");
            }
            else
            {
                this.AmazonShipmentId = AmazonShipmentId;
            }
            // to ensure "SellerReturnReasonCode" is required (not null)
            if (SellerReturnReasonCode == null)
            {
                throw new InvalidDataException("SellerReturnReasonCode is a required property for ReturnItem and cannot be null");
            }
            else
            {
                this.SellerReturnReasonCode = SellerReturnReasonCode;
            }
            // to ensure "Status" is required (not null)
            if (Status == null)
            {
                throw new InvalidDataException("Status is a required property for ReturnItem and cannot be null");
            }
            else
            {
                this.Status = Status;
            }
            // to ensure "StatusChangedDate" is required (not null)
            if (StatusChangedDate == null)
            {
                throw new InvalidDataException("StatusChangedDate is a required property for ReturnItem and cannot be null");
            }
            else
            {
                this.StatusChangedDate = StatusChangedDate;
            }
            this.ReturnComment = ReturnComment;
            this.AmazonReturnReasonCode = AmazonReturnReasonCode;
            this.ReturnAuthorizationId = ReturnAuthorizationId;
            this.ReturnReceivedCondition = ReturnReceivedCondition;
            this.FulfillmentCenterId = FulfillmentCenterId;
        }

        /// <summary>
        /// An identifier assigned by the seller to the return item.
        /// </summary>
        /// <value>An identifier assigned by the seller to the return item.</value>
        [DataMember(Name = "SellerReturnItemId", EmitDefaultValue = false)]
        public string SellerReturnItemId { get; set; }

        /// <summary>
        /// The identifier assigned to the item by the seller when the fulfillment order was created.
        /// </summary>
        /// <value>The identifier assigned to the item by the seller when the fulfillment order was created.</value>
        [DataMember(Name = "SellerFulfillmentOrderItemId", EmitDefaultValue = false)]
        public string SellerFulfillmentOrderItemId { get; set; }

        /// <summary>
        /// The identifier for the shipment that is associated with the return item.
        /// </summary>
        /// <value>The identifier for the shipment that is associated with the return item.</value>
        [DataMember(Name = "AmazonShipmentId", EmitDefaultValue = false)]
        public string AmazonShipmentId { get; set; }

        /// <summary>
        /// The return reason code assigned to the return item by the seller.
        /// </summary>
        /// <value>The return reason code assigned to the return item by the seller.</value>
        [DataMember(Name = "SellerReturnReasonCode", EmitDefaultValue = false)]
        public string SellerReturnReasonCode { get; set; }

        /// <summary>
        /// An optional comment about the return item.
        /// </summary>
        /// <value>An optional comment about the return item.</value>
        [DataMember(Name = "ReturnComment", EmitDefaultValue = false)]
        public string ReturnComment { get; set; }

        /// <summary>
        /// The return reason code that the Amazon fulfillment center assigned to the return item.
        /// </summary>
        /// <value>The return reason code that the Amazon fulfillment center assigned to the return item.</value>
        [DataMember(Name = "AmazonReturnReasonCode", EmitDefaultValue = false)]
        public string AmazonReturnReasonCode { get; set; }


        /// <summary>
        /// Indicates when the status last changed.
        /// </summary>
        /// <value>Indicates when the status last changed.</value>
        [DataMember(Name = "StatusChangedDate", EmitDefaultValue = false)]
        public DateTime StatusChangedDate { get; set; }

        /// <summary>
        /// Identifies the return authorization used to return this item. See ReturnAuthorization.
        /// </summary>
        /// <value>Identifies the return authorization used to return this item. See ReturnAuthorization.</value>
        [DataMember(Name = "ReturnAuthorizationId", EmitDefaultValue = false)]
        public string ReturnAuthorizationId { get; set; }


        /// <summary>
        /// The identifier for the Amazon fulfillment center that processed the return item.
        /// </summary>
        /// <value>The identifier for the Amazon fulfillment center that processed the return item.</value>
        [DataMember(Name = "FulfillmentCenterId", EmitDefaultValue = false)]
        public string FulfillmentCenterId { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class ReturnItem {\n");
            sb.Append("  SellerReturnItemId: ").Append(SellerReturnItemId).Append("\n");
            sb.Append("  SellerFulfillmentOrderItemId: ").Append(SellerFulfillmentOrderItemId).Append("\n");
            sb.Append("  AmazonShipmentId: ").Append(AmazonShipmentId).Append("\n");
            sb.Append("  SellerReturnReasonCode: ").Append(SellerReturnReasonCode).Append("\n");
            sb.Append("  ReturnComment: ").Append(ReturnComment).Append("\n");
            sb.Append("  AmazonReturnReasonCode: ").Append(AmazonReturnReasonCode).Append("\n");
            sb.Append("  Status: ").Append(Status).Append("\n");
            sb.Append("  StatusChangedDate: ").Append(StatusChangedDate).Append("\n");
            sb.Append("  ReturnAuthorizationId: ").Append(ReturnAuthorizationId).Append("\n");
            sb.Append("  ReturnReceivedCondition: ").Append(ReturnReceivedCondition).Append("\n");
            sb.Append("  FulfillmentCenterId: ").Append(FulfillmentCenterId).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as ReturnItem);
        }

        /// <summary>
        /// Returns true if ReturnItem instances are equal
        /// </summary>
        /// <param name="input">Instance of ReturnItem to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(ReturnItem input)
        {
            if (input == null)
                return false;

            return
                (
                    this.SellerReturnItemId == input.SellerReturnItemId ||
                    (this.SellerReturnItemId != null &&
                    this.SellerReturnItemId.Equals(input.SellerReturnItemId))
                ) &&
                (
                    this.SellerFulfillmentOrderItemId == input.SellerFulfillmentOrderItemId ||
                    (this.SellerFulfillmentOrderItemId != null &&
                    this.SellerFulfillmentOrderItemId.Equals(input.SellerFulfillmentOrderItemId))
                ) &&
                (
                    this.AmazonShipmentId == input.AmazonShipmentId ||
                    (this.AmazonShipmentId != null &&
                    this.AmazonShipmentId.Equals(input.AmazonShipmentId))
                ) &&
                (
                    this.SellerReturnReasonCode == input.SellerReturnReasonCode ||
                    (this.SellerReturnReasonCode != null &&
                    this.SellerReturnReasonCode.Equals(input.SellerReturnReasonCode))
                ) &&
                (
                    this.ReturnComment == input.ReturnComment ||
                    (this.ReturnComment != null &&
                    this.ReturnComment.Equals(input.ReturnComment))
                ) &&
                (
                    this.AmazonReturnReasonCode == input.AmazonReturnReasonCode ||
                    (this.AmazonReturnReasonCode != null &&
                    this.AmazonReturnReasonCode.Equals(input.AmazonReturnReasonCode))
                ) &&
                (
                    this.Status == input.Status ||
                    (this.Status != null &&
                    this.Status.Equals(input.Status))
                ) &&
                (
                    this.StatusChangedDate == input.StatusChangedDate ||
                    (this.StatusChangedDate != null &&
                    this.StatusChangedDate.Equals(input.StatusChangedDate))
                ) &&
                (
                    this.ReturnAuthorizationId == input.ReturnAuthorizationId ||
                    (this.ReturnAuthorizationId != null &&
                    this.ReturnAuthorizationId.Equals(input.ReturnAuthorizationId))
                ) &&
                (
                    this.ReturnReceivedCondition == input.ReturnReceivedCondition ||
                    (this.ReturnReceivedCondition != null &&
                    this.ReturnReceivedCondition.Equals(input.ReturnReceivedCondition))
                ) &&
                (
                    this.FulfillmentCenterId == input.FulfillmentCenterId ||
                    (this.FulfillmentCenterId != null &&
                    this.FulfillmentCenterId.Equals(input.FulfillmentCenterId))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.SellerReturnItemId != null)
                    hashCode = hashCode * 59 + this.SellerReturnItemId.GetHashCode();
                if (this.SellerFulfillmentOrderItemId != null)
                    hashCode = hashCode * 59 + this.SellerFulfillmentOrderItemId.GetHashCode();
                if (this.AmazonShipmentId != null)
                    hashCode = hashCode * 59 + this.AmazonShipmentId.GetHashCode();
                if (this.SellerReturnReasonCode != null)
                    hashCode = hashCode * 59 + this.SellerReturnReasonCode.GetHashCode();
                if (this.ReturnComment != null)
                    hashCode = hashCode * 59 + this.ReturnComment.GetHashCode();
                if (this.AmazonReturnReasonCode != null)
                    hashCode = hashCode * 59 + this.AmazonReturnReasonCode.GetHashCode();
                if (this.Status != null)
                    hashCode = hashCode * 59 + this.Status.GetHashCode();
                if (this.StatusChangedDate != null)
                    hashCode = hashCode * 59 + this.StatusChangedDate.GetHashCode();
                if (this.ReturnAuthorizationId != null)
                    hashCode = hashCode * 59 + this.ReturnAuthorizationId.GetHashCode();
                if (this.ReturnReceivedCondition != null)
                    hashCode = hashCode * 59 + this.ReturnReceivedCondition.GetHashCode();
                if (this.FulfillmentCenterId != null)
                    hashCode = hashCode * 59 + this.FulfillmentCenterId.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
