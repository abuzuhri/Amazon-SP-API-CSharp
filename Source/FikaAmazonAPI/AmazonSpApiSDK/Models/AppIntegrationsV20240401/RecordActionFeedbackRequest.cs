/* 
 * The Selling Partner API for third party application integrations.
 *
 * With the AppIntegrations API v2024-04-01, you can send notifications to Amazon Selling Partners and display the notifications in Seller Central.
 *
 * OpenAPI spec version: 2024-04-01
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.IO;
using System.Text;
using System.Collections.Generic;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using System.ComponentModel.DataAnnotations;

namespace FikaAmazonAPI.AmazonSpApiSDK.Models.AppIntegrationsV20240401
{
    /// <summary>
    /// The request for the &#x60;recordActionFeedback&#x60; operation.
    /// </summary>
    [DataContract]
    public partial class RecordActionFeedbackRequest :  IEquatable<RecordActionFeedbackRequest>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="RecordActionFeedbackRequest" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        public RecordActionFeedbackRequest() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="RecordActionFeedbackRequest" /> class.
        /// </summary>
        /// <param name="feedbackActionCode">The unique identifier for each notification status. (required).</param>
        public RecordActionFeedbackRequest(FeedbackActionCode feedbackActionCode = default(FeedbackActionCode))
        {
            // to ensure "feedbackActionCode" is required (not null)
            if (feedbackActionCode == null)
            {
                throw new InvalidDataException("feedbackActionCode is a required property for RecordActionFeedbackRequest and cannot be null");
            }
            else
            {
                this.FeedbackActionCode = feedbackActionCode;
            }
        }

        /// <summary>
        /// The unique identifier for each notification status.
        /// </summary>
        /// <value>The unique identifier for each notification status.</value>
        [DataMember(Name = "feedbackActionCode", EmitDefaultValue = false)]
        public FeedbackActionCode FeedbackActionCode { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class RecordActionFeedbackRequest {\n");
            sb.Append("  FeedbackActionCode: ").Append(FeedbackActionCode).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as RecordActionFeedbackRequest);
        }

        /// <summary>
        /// Returns true if RecordActionFeedbackRequest instances are equal
        /// </summary>
        /// <param name="input">Instance of RecordActionFeedbackRequest to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(RecordActionFeedbackRequest input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.FeedbackActionCode == input.FeedbackActionCode ||
                    (this.FeedbackActionCode != null &&
                    this.FeedbackActionCode.Equals(input.FeedbackActionCode))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.FeedbackActionCode != null)
                    hashCode = hashCode * 59 + this.FeedbackActionCode.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
