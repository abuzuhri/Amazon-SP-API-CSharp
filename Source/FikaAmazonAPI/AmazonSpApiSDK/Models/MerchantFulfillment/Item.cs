/* 
 * Selling Partner API for Merchant Fulfillment
 *
 * The Selling Partner API for Merchant Fulfillment helps you build applications that let sellers purchase shipping for non-Prime and Prime orders using Amazonâ€™s Buy Shipping Services.
 *
 * OpenAPI spec version: v0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;


namespace FikaAmazonAPI.AmazonSpApiSDK.Models.MerchantFulfillment
{
    /// <summary>
    /// An Amazon order item identifier and a quantity.
    /// </summary>
    [DataContract]
    public partial class Item :  IEquatable<Item>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="Item" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        public Item() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="Item" /> class.
        /// </summary>
        /// <param name="orderItemId">orderItemId (required).</param>
        /// <param name="quantity">quantity (required).</param>
        /// <param name="itemWeight">itemWeight.</param>
        /// <param name="itemDescription">itemDescription.</param>
        /// <param name="transparencyCodeList">transparencyCodeList.</param>
        /// <param name="itemLevelSellerInputsList">A list of additional seller inputs required to ship this item using the chosen shipping service..</param>
        public Item(string orderItemId = default(string), int? quantity = default(int?), Weight itemWeight = default(Weight), string itemDescription = default(string), TransparencyCodeList transparencyCodeList = default(TransparencyCodeList), AdditionalSellerInputsList itemLevelSellerInputsList = default(AdditionalSellerInputsList))
        {
            // to ensure "orderItemId" is required (not null)
            if (orderItemId == null)
            {
                throw new InvalidDataException("orderItemId is a required property for Item and cannot be null");
            }
            else
            {
                this.OrderItemId = orderItemId;
            }
            // to ensure "quantity" is required (not null)
            if (quantity == null)
            {
                throw new InvalidDataException("quantity is a required property for Item and cannot be null");
            }
            else
            {
                this.Quantity = quantity;
            }
            this.ItemWeight = itemWeight;
            this.ItemDescription = itemDescription;
            this.TransparencyCodeList = transparencyCodeList;
            this.ItemLevelSellerInputsList = itemLevelSellerInputsList;
        }
        
        /// <summary>
        /// Gets or Sets OrderItemId
        /// </summary>
        [DataMember(Name="OrderItemId", EmitDefaultValue=false)]
        public string OrderItemId { get; set; }

        /// <summary>
        /// Gets or Sets Quantity
        /// </summary>
        [DataMember(Name="Quantity", EmitDefaultValue=false)]
        public int? Quantity { get; set; }

        /// <summary>
        /// Gets or Sets ItemWeight
        /// </summary>
        [DataMember(Name="ItemWeight", EmitDefaultValue=false)]
        public Weight ItemWeight { get; set; }

        /// <summary>
        /// Gets or Sets ItemDescription
        /// </summary>
        [DataMember(Name="ItemDescription", EmitDefaultValue=false)]
        public string ItemDescription { get; set; }

        /// <summary>
        /// Gets or Sets TransparencyCodeList
        /// </summary>
        [DataMember(Name="TransparencyCodeList", EmitDefaultValue=false)]
        public TransparencyCodeList TransparencyCodeList { get; set; }

        /// <summary>
        /// A list of additional seller inputs required to ship this item using the chosen shipping service.
        /// </summary>
        /// <value>A list of additional seller inputs required to ship this item using the chosen shipping service.</value>
        [DataMember(Name="ItemLevelSellerInputsList", EmitDefaultValue=false)]
        public AdditionalSellerInputsList ItemLevelSellerInputsList { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class Item {\n");
            sb.Append("  OrderItemId: ").Append(OrderItemId).Append("\n");
            sb.Append("  Quantity: ").Append(Quantity).Append("\n");
            sb.Append("  ItemWeight: ").Append(ItemWeight).Append("\n");
            sb.Append("  ItemDescription: ").Append(ItemDescription).Append("\n");
            sb.Append("  TransparencyCodeList: ").Append(TransparencyCodeList).Append("\n");
            sb.Append("  ItemLevelSellerInputsList: ").Append(ItemLevelSellerInputsList).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as Item);
        }

        /// <summary>
        /// Returns true if Item instances are equal
        /// </summary>
        /// <param name="input">Instance of Item to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(Item input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.OrderItemId == input.OrderItemId ||
                    (this.OrderItemId != null &&
                    this.OrderItemId.Equals(input.OrderItemId))
                ) && 
                (
                    this.Quantity == input.Quantity ||
                    (this.Quantity != null &&
                    this.Quantity.Equals(input.Quantity))
                ) && 
                (
                    this.ItemWeight == input.ItemWeight ||
                    (this.ItemWeight != null &&
                    this.ItemWeight.Equals(input.ItemWeight))
                ) && 
                (
                    this.ItemDescription == input.ItemDescription ||
                    (this.ItemDescription != null &&
                    this.ItemDescription.Equals(input.ItemDescription))
                ) && 
                (
                    this.TransparencyCodeList == input.TransparencyCodeList ||
                    (this.TransparencyCodeList != null &&
                    this.TransparencyCodeList.Equals(input.TransparencyCodeList))
                ) && 
                (
                    this.ItemLevelSellerInputsList == input.ItemLevelSellerInputsList ||
                    (this.ItemLevelSellerInputsList != null &&
                    this.ItemLevelSellerInputsList.Equals(input.ItemLevelSellerInputsList))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.OrderItemId != null)
                    hashCode = hashCode * 59 + this.OrderItemId.GetHashCode();
                if (this.Quantity != null)
                    hashCode = hashCode * 59 + this.Quantity.GetHashCode();
                if (this.ItemWeight != null)
                    hashCode = hashCode * 59 + this.ItemWeight.GetHashCode();
                if (this.ItemDescription != null)
                    hashCode = hashCode * 59 + this.ItemDescription.GetHashCode();
                if (this.TransparencyCodeList != null)
                    hashCode = hashCode * 59 + this.TransparencyCodeList.GetHashCode();
                if (this.ItemLevelSellerInputsList != null)
                    hashCode = hashCode * 59 + this.ItemLevelSellerInputsList.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
