/* 
 * Selling Partner API for Merchant Fulfillment
 *
 * The Selling Partner API for Merchant Fulfillment helps you build applications that let sellers purchase shipping for non-Prime and Prime orders using Amazonâ€™s Buy Shipping Services.
 *
 * OpenAPI spec version: v0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;


namespace FikaAmazonAPI.AmazonSpApiSDK.Models.MerchantFulfillment
{
    /// <summary>
    /// Indicates whether the carrier will pick up the package, and what fee is charged, if any.
    /// </summary>
    [DataContract]
    public partial class AvailableCarrierWillPickUpOption :  IEquatable<AvailableCarrierWillPickUpOption>, IValidatableObject
    {
        /// <summary>
        /// Gets or Sets CarrierWillPickUpOption
        /// </summary>
        [DataMember(Name="CarrierWillPickUpOption", EmitDefaultValue=false)]
        public CarrierWillPickUpOption CarrierWillPickUpOption { get; set; }
        /// <summary>
        /// Initializes a new instance of the <see cref="AvailableCarrierWillPickUpOption" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        public AvailableCarrierWillPickUpOption() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="AvailableCarrierWillPickUpOption" /> class.
        /// </summary>
        /// <param name="carrierWillPickUpOption">carrierWillPickUpOption (required).</param>
        /// <param name="charge">The fee charged. (required).</param>
        public AvailableCarrierWillPickUpOption(CarrierWillPickUpOption carrierWillPickUpOption = default(CarrierWillPickUpOption), CurrencyAmount charge = default(CurrencyAmount))
        {
            // to ensure "carrierWillPickUpOption" is required (not null)
            if (carrierWillPickUpOption == null)
            {
                throw new InvalidDataException("carrierWillPickUpOption is a required property for AvailableCarrierWillPickUpOption and cannot be null");
            }
            else
            {
                this.CarrierWillPickUpOption = carrierWillPickUpOption;
            }
            // to ensure "charge" is required (not null)
            if (charge == null)
            {
                throw new InvalidDataException("charge is a required property for AvailableCarrierWillPickUpOption and cannot be null");
            }
            else
            {
                this.Charge = charge;
            }
        }
        

        /// <summary>
        /// The fee charged.
        /// </summary>
        /// <value>The fee charged.</value>
        [DataMember(Name="Charge", EmitDefaultValue=false)]
        public CurrencyAmount Charge { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class AvailableCarrierWillPickUpOption {\n");
            sb.Append("  CarrierWillPickUpOption: ").Append(CarrierWillPickUpOption).Append("\n");
            sb.Append("  Charge: ").Append(Charge).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as AvailableCarrierWillPickUpOption);
        }

        /// <summary>
        /// Returns true if AvailableCarrierWillPickUpOption instances are equal
        /// </summary>
        /// <param name="input">Instance of AvailableCarrierWillPickUpOption to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(AvailableCarrierWillPickUpOption input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.CarrierWillPickUpOption == input.CarrierWillPickUpOption ||
                    (this.CarrierWillPickUpOption != null &&
                    this.CarrierWillPickUpOption.Equals(input.CarrierWillPickUpOption))
                ) && 
                (
                    this.Charge == input.Charge ||
                    (this.Charge != null &&
                    this.Charge.Equals(input.Charge))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.CarrierWillPickUpOption != null)
                    hashCode = hashCode * 59 + this.CarrierWillPickUpOption.GetHashCode();
                if (this.Charge != null)
                    hashCode = hashCode * 59 + this.Charge.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
