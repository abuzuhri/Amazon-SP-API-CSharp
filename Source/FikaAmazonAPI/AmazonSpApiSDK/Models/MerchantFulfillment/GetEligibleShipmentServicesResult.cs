/* 
 * Selling Partner API for Merchant Fulfillment
 *
 * The Selling Partner API for Merchant Fulfillment helps you build applications that let sellers purchase shipping for non-Prime and Prime orders using Amazonâ€™s Buy Shipping Services.
 *
 * OpenAPI spec version: v0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;


namespace FikaAmazonAPI.AmazonSpApiSDK.Models.MerchantFulfillment
{
    /// <summary>
    /// The payload for the getEligibleShipmentServices operation.
    /// </summary>
    [DataContract]
    public partial class GetEligibleShipmentServicesResult :  IEquatable<GetEligibleShipmentServicesResult>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="GetEligibleShipmentServicesResult" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        public GetEligibleShipmentServicesResult() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="GetEligibleShipmentServicesResult" /> class.
        /// </summary>
        /// <param name="shippingServiceList">A list of shipping services offers. (required).</param>
        /// <param name="rejectedShippingServiceList">rejectedShippingServiceList.</param>
        /// <param name="temporarilyUnavailableCarrierList">temporarilyUnavailableCarrierList.</param>
        /// <param name="termsAndConditionsNotAcceptedCarrierList">termsAndConditionsNotAcceptedCarrierList.</param>
        public GetEligibleShipmentServicesResult(ShippingServiceList shippingServiceList = default(ShippingServiceList), RejectedShippingServiceList rejectedShippingServiceList = default(RejectedShippingServiceList), TemporarilyUnavailableCarrierList temporarilyUnavailableCarrierList = default(TemporarilyUnavailableCarrierList), TermsAndConditionsNotAcceptedCarrierList termsAndConditionsNotAcceptedCarrierList = default(TermsAndConditionsNotAcceptedCarrierList))
        {
            // to ensure "shippingServiceList" is required (not null)
            if (shippingServiceList == null)
            {
                throw new InvalidDataException("shippingServiceList is a required property for GetEligibleShipmentServicesResult and cannot be null");
            }
            else
            {
                this.ShippingServiceList = shippingServiceList;
            }
            this.RejectedShippingServiceList = rejectedShippingServiceList;
            this.TemporarilyUnavailableCarrierList = temporarilyUnavailableCarrierList;
            this.TermsAndConditionsNotAcceptedCarrierList = termsAndConditionsNotAcceptedCarrierList;
        }
        
        /// <summary>
        /// A list of shipping services offers.
        /// </summary>
        /// <value>A list of shipping services offers.</value>
        [DataMember(Name="ShippingServiceList", EmitDefaultValue=false)]
        public ShippingServiceList ShippingServiceList { get; set; }

        /// <summary>
        /// Gets or Sets RejectedShippingServiceList
        /// </summary>
        [DataMember(Name="RejectedShippingServiceList", EmitDefaultValue=false)]
        public RejectedShippingServiceList RejectedShippingServiceList { get; set; }

        /// <summary>
        /// Gets or Sets TemporarilyUnavailableCarrierList
        /// </summary>
        [DataMember(Name="TemporarilyUnavailableCarrierList", EmitDefaultValue=false)]
        public TemporarilyUnavailableCarrierList TemporarilyUnavailableCarrierList { get; set; }

        /// <summary>
        /// Gets or Sets TermsAndConditionsNotAcceptedCarrierList
        /// </summary>
        [DataMember(Name="TermsAndConditionsNotAcceptedCarrierList", EmitDefaultValue=false)]
        public TermsAndConditionsNotAcceptedCarrierList TermsAndConditionsNotAcceptedCarrierList { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class GetEligibleShipmentServicesResult {\n");
            sb.Append("  ShippingServiceList: ").Append(ShippingServiceList).Append("\n");
            sb.Append("  RejectedShippingServiceList: ").Append(RejectedShippingServiceList).Append("\n");
            sb.Append("  TemporarilyUnavailableCarrierList: ").Append(TemporarilyUnavailableCarrierList).Append("\n");
            sb.Append("  TermsAndConditionsNotAcceptedCarrierList: ").Append(TermsAndConditionsNotAcceptedCarrierList).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as GetEligibleShipmentServicesResult);
        }

        /// <summary>
        /// Returns true if GetEligibleShipmentServicesResult instances are equal
        /// </summary>
        /// <param name="input">Instance of GetEligibleShipmentServicesResult to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(GetEligibleShipmentServicesResult input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.ShippingServiceList == input.ShippingServiceList ||
                    (this.ShippingServiceList != null &&
                    this.ShippingServiceList.Equals(input.ShippingServiceList))
                ) && 
                (
                    this.RejectedShippingServiceList == input.RejectedShippingServiceList ||
                    (this.RejectedShippingServiceList != null &&
                    this.RejectedShippingServiceList.Equals(input.RejectedShippingServiceList))
                ) && 
                (
                    this.TemporarilyUnavailableCarrierList == input.TemporarilyUnavailableCarrierList ||
                    (this.TemporarilyUnavailableCarrierList != null &&
                    this.TemporarilyUnavailableCarrierList.Equals(input.TemporarilyUnavailableCarrierList))
                ) && 
                (
                    this.TermsAndConditionsNotAcceptedCarrierList == input.TermsAndConditionsNotAcceptedCarrierList ||
                    (this.TermsAndConditionsNotAcceptedCarrierList != null &&
                    this.TermsAndConditionsNotAcceptedCarrierList.Equals(input.TermsAndConditionsNotAcceptedCarrierList))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.ShippingServiceList != null)
                    hashCode = hashCode * 59 + this.ShippingServiceList.GetHashCode();
                if (this.RejectedShippingServiceList != null)
                    hashCode = hashCode * 59 + this.RejectedShippingServiceList.GetHashCode();
                if (this.TemporarilyUnavailableCarrierList != null)
                    hashCode = hashCode * 59 + this.TemporarilyUnavailableCarrierList.GetHashCode();
                if (this.TermsAndConditionsNotAcceptedCarrierList != null)
                    hashCode = hashCode * 59 + this.TermsAndConditionsNotAcceptedCarrierList.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
