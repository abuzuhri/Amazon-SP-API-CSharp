/* 
 * Selling Partner API for Merchant Fulfillment
 *
 * The Selling Partner API for Merchant Fulfillment helps you build applications that let sellers purchase shipping for non-Prime and Prime orders using Amazonâ€™s Buy Shipping Services.
 *
 * OpenAPI spec version: v0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;


namespace FikaAmazonAPI.AmazonSpApiSDK.Models.MerchantFulfillment
{
    /// <summary>
    /// Dimensions for printing a shipping label.
    /// </summary>
    [DataContract]
    public partial class LabelDimensions :  IEquatable<LabelDimensions>, IValidatableObject
    {
        /// <summary>
        /// The unit of measurement.
        /// </summary>
        /// <value>The unit of measurement.</value>
        [DataMember(Name="Unit", EmitDefaultValue=false)]
        public UnitOfLength Unit { get; set; }
        /// <summary>
        /// Initializes a new instance of the <see cref="LabelDimensions" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        public LabelDimensions() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="LabelDimensions" /> class.
        /// </summary>
        /// <param name="length">The length dimension. (required).</param>
        /// <param name="width">The width dimension. (required).</param>
        /// <param name="unit">The unit of measurement. (required).</param>
        public LabelDimensions(decimal? length = default(decimal?), decimal? width = default(decimal?), UnitOfLength unit = default(UnitOfLength))
        {
            // to ensure "length" is required (not null)
            if (length == null)
            {
                throw new InvalidDataException("length is a required property for LabelDimensions and cannot be null");
            }
            else
            {
                this.Length = length;
            }
            // to ensure "width" is required (not null)
            if (width == null)
            {
                throw new InvalidDataException("width is a required property for LabelDimensions and cannot be null");
            }
            else
            {
                this.Width = width;
            }
            // to ensure "unit" is required (not null)
            if (unit == null)
            {
                throw new InvalidDataException("unit is a required property for LabelDimensions and cannot be null");
            }
            else
            {
                this.Unit = unit;
            }
        }
        
        /// <summary>
        /// The length dimension.
        /// </summary>
        /// <value>The length dimension.</value>
        [DataMember(Name="Length", EmitDefaultValue=false)]
        public decimal? Length { get; set; }

        /// <summary>
        /// The width dimension.
        /// </summary>
        /// <value>The width dimension.</value>
        [DataMember(Name="Width", EmitDefaultValue=false)]
        public decimal? Width { get; set; }


        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class LabelDimensions {\n");
            sb.Append("  Length: ").Append(Length).Append("\n");
            sb.Append("  Width: ").Append(Width).Append("\n");
            sb.Append("  Unit: ").Append(Unit).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as LabelDimensions);
        }

        /// <summary>
        /// Returns true if LabelDimensions instances are equal
        /// </summary>
        /// <param name="input">Instance of LabelDimensions to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(LabelDimensions input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.Length == input.Length ||
                    (this.Length != null &&
                    this.Length.Equals(input.Length))
                ) && 
                (
                    this.Width == input.Width ||
                    (this.Width != null &&
                    this.Width.Equals(input.Width))
                ) && 
                (
                    this.Unit == input.Unit ||
                    (this.Unit != null &&
                    this.Unit.Equals(input.Unit))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.Length != null)
                    hashCode = hashCode * 59 + this.Length.GetHashCode();
                if (this.Width != null)
                    hashCode = hashCode * 59 + this.Width.GetHashCode();
                if (this.Unit != null)
                    hashCode = hashCode * 59 + this.Unit.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
