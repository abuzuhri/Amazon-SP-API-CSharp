/* 
 * Selling Partner API for Direct Fulfillment Inventory Updates
 *
 * The Selling Partner API for Direct Fulfillment Inventory Updates provides programmatic access to a direct fulfillment vendor's inventory updates.
 *
 * OpenAPI spec version: v1
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Collections.Generic;
using System.ComponentModel.DataAnnotations;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using Newtonsoft.Json;

namespace FikaAmazonAPI.AmazonSpApiSDK.Models.VendorDirectFulfillmentInventory
{
    /// <summary>
    /// Updated inventory details for an item.
    /// </summary>
    [DataContract]
    public partial class ItemDetails :  IEquatable<ItemDetails>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="ItemDetails" /> class.
        /// </summary>
        [JsonConstructor]
        public ItemDetails() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="ItemDetails" /> class.
        /// </summary>
        /// <param name="buyerProductIdentifier">The buyer selected product identification of the item. Either buyerProductIdentifier or vendorProductIdentifier should be submitted..</param>
        /// <param name="vendorProductIdentifier">The vendor selected product identification of the item. Either buyerProductIdentifier or vendorProductIdentifier should be submitted..</param>
        /// <param name="availableQuantity">Total item quantity available in the warehouse. (required).</param>
        /// <param name="isObsolete">When true, the item is permanently unavailable..</param>
        public ItemDetails(string buyerProductIdentifier = default(string), string vendorProductIdentifier = default(string), ItemQuantity availableQuantity = default(ItemQuantity), bool? isObsolete = default(bool?))
        {
            // to ensure "availableQuantity" is required (not null)
            if (availableQuantity == null)
            {
                throw new InvalidDataException("availableQuantity is a required property for ItemDetails and cannot be null");
            }
            else
            {
                this.AvailableQuantity = availableQuantity;
            }
            this.BuyerProductIdentifier = buyerProductIdentifier;
            this.VendorProductIdentifier = vendorProductIdentifier;
            this.IsObsolete = isObsolete;
        }
        
        /// <summary>
        /// The buyer selected product identification of the item. Either buyerProductIdentifier or vendorProductIdentifier should be submitted.
        /// </summary>
        /// <value>The buyer selected product identification of the item. Either buyerProductIdentifier or vendorProductIdentifier should be submitted.</value>
        [DataMember(Name="buyerProductIdentifier", EmitDefaultValue=false)]
        public string BuyerProductIdentifier { get; set; }

        /// <summary>
        /// The vendor selected product identification of the item. Either buyerProductIdentifier or vendorProductIdentifier should be submitted.
        /// </summary>
        /// <value>The vendor selected product identification of the item. Either buyerProductIdentifier or vendorProductIdentifier should be submitted.</value>
        [DataMember(Name="vendorProductIdentifier", EmitDefaultValue=false)]
        public string VendorProductIdentifier { get; set; }

        /// <summary>
        /// Total item quantity available in the warehouse.
        /// </summary>
        /// <value>Total item quantity available in the warehouse.</value>
        [DataMember(Name="availableQuantity", EmitDefaultValue=false)]
        public ItemQuantity AvailableQuantity { get; set; }

        /// <summary>
        /// When true, the item is permanently unavailable.
        /// </summary>
        /// <value>When true, the item is permanently unavailable.</value>
        [DataMember(Name="isObsolete", EmitDefaultValue=false)]
        public bool? IsObsolete { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class ItemDetails {\n");
            sb.Append("  BuyerProductIdentifier: ").Append(BuyerProductIdentifier).Append("\n");
            sb.Append("  VendorProductIdentifier: ").Append(VendorProductIdentifier).Append("\n");
            sb.Append("  AvailableQuantity: ").Append(AvailableQuantity).Append("\n");
            sb.Append("  IsObsolete: ").Append(IsObsolete).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as ItemDetails);
        }

        /// <summary>
        /// Returns true if ItemDetails instances are equal
        /// </summary>
        /// <param name="input">Instance of ItemDetails to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(ItemDetails input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.BuyerProductIdentifier == input.BuyerProductIdentifier ||
                    (this.BuyerProductIdentifier != null &&
                    this.BuyerProductIdentifier.Equals(input.BuyerProductIdentifier))
                ) && 
                (
                    this.VendorProductIdentifier == input.VendorProductIdentifier ||
                    (this.VendorProductIdentifier != null &&
                    this.VendorProductIdentifier.Equals(input.VendorProductIdentifier))
                ) && 
                (
                    this.AvailableQuantity == input.AvailableQuantity ||
                    (this.AvailableQuantity != null &&
                    this.AvailableQuantity.Equals(input.AvailableQuantity))
                ) && 
                (
                    this.IsObsolete == input.IsObsolete ||
                    (this.IsObsolete != null &&
                    this.IsObsolete.Equals(input.IsObsolete))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.BuyerProductIdentifier != null)
                    hashCode = hashCode * 59 + this.BuyerProductIdentifier.GetHashCode();
                if (this.VendorProductIdentifier != null)
                    hashCode = hashCode * 59 + this.VendorProductIdentifier.GetHashCode();
                if (this.AvailableQuantity != null)
                    hashCode = hashCode * 59 + this.AvailableQuantity.GetHashCode();
                if (this.IsObsolete != null)
                    hashCode = hashCode * 59 + this.IsObsolete.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
