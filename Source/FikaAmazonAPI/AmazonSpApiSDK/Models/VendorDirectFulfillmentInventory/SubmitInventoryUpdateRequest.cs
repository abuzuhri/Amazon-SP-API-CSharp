/* 
 * Selling Partner API for Direct Fulfillment Inventory Updates
 *
 * The Selling Partner API for Direct Fulfillment Inventory Updates provides programmatic access to a direct fulfillment vendor's inventory updates.
 *
 * OpenAPI spec version: v1
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Collections.Generic;
using System.ComponentModel.DataAnnotations;
using System.Runtime.Serialization;
using System.Text;
using Newtonsoft.Json;

namespace FikaAmazonAPI.AmazonSpApiSDK.Models.VendorDirectFulfillmentInventory
{
    /// <summary>
    /// The request body for the submitInventoryUpdate operation.
    /// </summary>
    [DataContract]
    public partial class SubmitInventoryUpdateRequest :  IEquatable<SubmitInventoryUpdateRequest>, IValidatableObject
    {
        [JsonConstructor]
        public SubmitInventoryUpdateRequest() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="SubmitInventoryUpdateRequest" /> class.
        /// </summary>
        /// <param name="inventory">Inventory details required to update some or all items for the requested warehouse..</param>
        public SubmitInventoryUpdateRequest(InventoryUpdate inventory = default(InventoryUpdate))
        {
            this.Inventory = inventory;
        }
        
        /// <summary>
        /// Inventory details required to update some or all items for the requested warehouse.
        /// </summary>
        /// <value>Inventory details required to update some or all items for the requested warehouse.</value>
        [DataMember(Name="inventory", EmitDefaultValue=false)]
        public InventoryUpdate Inventory { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class SubmitInventoryUpdateRequest {\n");
            sb.Append("  Inventory: ").Append(Inventory).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as SubmitInventoryUpdateRequest);
        }

        /// <summary>
        /// Returns true if SubmitInventoryUpdateRequest instances are equal
        /// </summary>
        /// <param name="input">Instance of SubmitInventoryUpdateRequest to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(SubmitInventoryUpdateRequest input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.Inventory == input.Inventory ||
                    (this.Inventory != null &&
                    this.Inventory.Equals(input.Inventory))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.Inventory != null)
                    hashCode = hashCode * 59 + this.Inventory.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
