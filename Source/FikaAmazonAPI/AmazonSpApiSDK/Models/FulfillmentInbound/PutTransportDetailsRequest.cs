/* 
 * Selling Partner API for Fulfillment Inbound
 *
 * The Selling Partner API for Fulfillment Inbound lets you create applications that create and update inbound shipments of inventory to Amazon's fulfillment network.
 *
 * OpenAPI spec version: v0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using Newtonsoft.Json;
using System;
using System.Collections.Generic;
using System.ComponentModel.DataAnnotations;
using System.IO;
using System.Runtime.Serialization;
using System.Text;

namespace FikaAmazonAPI.AmazonSpApiSDK.Models.FulfillmentInbound
{
    /// <summary>
    /// The request schema for a putTransportDetails operation.
    /// </summary>
    [DataContract]
    public partial class PutTransportDetailsRequest : IEquatable<PutTransportDetailsRequest>, IValidatableObject
    {
        /// <summary>
        /// Gets or Sets ShipmentType
        /// </summary>
        [DataMember(Name = "ShipmentType", EmitDefaultValue = false)]
        public ShipmentType ShipmentType { get; set; }
        /// <summary>
        /// Initializes a new instance of the <see cref="PutTransportDetailsRequest" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        public PutTransportDetailsRequest() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="PutTransportDetailsRequest" /> class.
        /// </summary>
        /// <param name="isPartnered">Indicates whether a putTransportDetails request is for an Amazon-partnered carrier. (required).</param>
        /// <param name="shipmentType">shipmentType (required).</param>
        /// <param name="transportDetails">Information required to create an Amazon-partnered carrier shipping estimate, or to alert the Amazon fulfillment center to the arrival of an inbound shipment by a non-Amazon-partnered carrier. (required).</param>
        public PutTransportDetailsRequest(bool? isPartnered = default(bool?), ShipmentType shipmentType = default(ShipmentType), TransportDetailInput transportDetails = default(TransportDetailInput))
        {
            // to ensure "isPartnered" is required (not null)
            if (isPartnered == null)
            {
                throw new InvalidDataException("isPartnered is a required property for PutTransportDetailsRequest and cannot be null");
            }
            else
            {
                this.IsPartnered = isPartnered;
            }
            // to ensure "shipmentType" is required (not null)
            if (shipmentType == null)
            {
                throw new InvalidDataException("shipmentType is a required property for PutTransportDetailsRequest and cannot be null");
            }
            else
            {
                this.ShipmentType = shipmentType;
            }
            // to ensure "transportDetails" is required (not null)
            if (transportDetails == null)
            {
                throw new InvalidDataException("transportDetails is a required property for PutTransportDetailsRequest and cannot be null");
            }
            else
            {
                this.TransportDetails = transportDetails;
            }
        }

        /// <summary>
        /// Indicates whether a putTransportDetails request is for an Amazon-partnered carrier.
        /// </summary>
        /// <value>Indicates whether a putTransportDetails request is for an Amazon-partnered carrier.</value>
        [DataMember(Name = "IsPartnered", EmitDefaultValue = false)]
        public bool? IsPartnered { get; set; }


        /// <summary>
        /// Information required to create an Amazon-partnered carrier shipping estimate, or to alert the Amazon fulfillment center to the arrival of an inbound shipment by a non-Amazon-partnered carrier.
        /// </summary>
        /// <value>Information required to create an Amazon-partnered carrier shipping estimate, or to alert the Amazon fulfillment center to the arrival of an inbound shipment by a non-Amazon-partnered carrier.</value>
        [DataMember(Name = "TransportDetails", EmitDefaultValue = false)]
        public TransportDetailInput TransportDetails { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class PutTransportDetailsRequest {\n");
            sb.Append("  IsPartnered: ").Append(IsPartnered).Append("\n");
            sb.Append("  ShipmentType: ").Append(ShipmentType).Append("\n");
            sb.Append("  TransportDetails: ").Append(TransportDetails).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as PutTransportDetailsRequest);
        }

        /// <summary>
        /// Returns true if PutTransportDetailsRequest instances are equal
        /// </summary>
        /// <param name="input">Instance of PutTransportDetailsRequest to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(PutTransportDetailsRequest input)
        {
            if (input == null)
                return false;

            return
                (
                    this.IsPartnered == input.IsPartnered ||
                    (this.IsPartnered != null &&
                    this.IsPartnered.Equals(input.IsPartnered))
                ) &&
                (
                    this.ShipmentType == input.ShipmentType ||
                    (this.ShipmentType != null &&
                    this.ShipmentType.Equals(input.ShipmentType))
                ) &&
                (
                    this.TransportDetails == input.TransportDetails ||
                    (this.TransportDetails != null &&
                    this.TransportDetails.Equals(input.TransportDetails))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.IsPartnered != null)
                    hashCode = hashCode * 59 + this.IsPartnered.GetHashCode();
                if (this.ShipmentType != null)
                    hashCode = hashCode * 59 + this.ShipmentType.GetHashCode();
                if (this.TransportDetails != null)
                    hashCode = hashCode * 59 + this.TransportDetails.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}