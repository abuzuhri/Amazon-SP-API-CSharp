/* 
 * Selling Partner API for Fulfillment Inbound
 *
 * The Selling Partner API for Fulfillment Inbound lets you create applications that create and update inbound shipments of inventory to Amazon's fulfillment network.
 *
 * OpenAPI spec version: v0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using Newtonsoft.Json;
using System;
using System.Collections.Generic;
using System.ComponentModel.DataAnnotations;
using System.IO;
using System.Runtime.Serialization;
using System.Text;

namespace FikaAmazonAPI.AmazonSpApiSDK.Models.FulfillmentInbound
{
    /// <summary>
    /// Information about the seller&#39;s inbound shipments. Returned by the listInboundShipments operation.
    /// </summary>
    [DataContract]
    public partial class InboundShipmentInfo : IEquatable<InboundShipmentInfo>, IValidatableObject
    {
        /// <summary>
        /// Gets or Sets ShipmentStatus
        /// </summary>
        [DataMember(Name = "ShipmentStatus", EmitDefaultValue = false)]
        public ShipmentStatus? ShipmentStatus { get; set; }
        /// <summary>
        /// Gets or Sets LabelPrepType
        /// </summary>
        [DataMember(Name = "LabelPrepType", EmitDefaultValue = false)]
        public LabelPrepType? LabelPrepType { get; set; }
        /// <summary>
        /// Gets or Sets BoxContentsSource
        /// </summary>
        [DataMember(Name = "BoxContentsSource", EmitDefaultValue = false)]
        public BoxContentsSource? BoxContentsSource { get; set; }
        /// <summary>
        /// Initializes a new instance of the <see cref="InboundShipmentInfo" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        public InboundShipmentInfo() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="InboundShipmentInfo" /> class.
        /// </summary>
        /// <param name="ShipmentId">The shipment identifier submitted in the request..</param>
        /// <param name="ShipmentName">The name for the inbound shipment..</param>
        /// <param name="ShipFromAddress">The return address. (required).</param>
        /// <param name="DestinationFulfillmentCenterId">An Amazon fulfillment center identifier created by Amazon..</param>
        /// <param name="ShipmentStatus">ShipmentStatus.</param>
        /// <param name="LabelPrepType">LabelPrepType.</param>
        /// <param name="AreCasesRequired">Indicates whether or not an inbound shipment contains case-packed boxes. When AreCasesRequired &#x3D; true for an inbound shipment, all items in the inbound shipment must be case packed. (required).</param>
        /// <param name="ConfirmedNeedByDate">Date by which the shipment must arrive at the Amazon fulfillment center to avoid delivery promise breaks for pre-ordered items..</param>
        /// <param name="BoxContentsSource">BoxContentsSource.</param>
        /// <param name="EstimatedBoxContentsFee">An estimate of the manual processing fee charged by Amazon for boxes without box content information. This is only returned when BoxContentsSource is NONE..</param>
        public InboundShipmentInfo(string ShipmentId = default(string), string ShipmentName = default(string), Address ShipFromAddress = default(Address), string DestinationFulfillmentCenterId = default(string), ShipmentStatus? ShipmentStatus = default(ShipmentStatus?), LabelPrepType? LabelPrepType = default(LabelPrepType?), bool? AreCasesRequired = default(bool?), string ConfirmedNeedByDate = default(string), BoxContentsSource? BoxContentsSource = default(BoxContentsSource?), BoxContentsFeeDetails EstimatedBoxContentsFee = default(BoxContentsFeeDetails))
        {
            // to ensure "ShipFromAddress" is required (not null)
            if (ShipFromAddress == null)
            {
                throw new InvalidDataException("ShipFromAddress is a required property for InboundShipmentInfo and cannot be null");
            }
            else
            {
                this.ShipFromAddress = ShipFromAddress;
            }
            // to ensure "AreCasesRequired" is required (not null)
            if (AreCasesRequired == null)
            {
                throw new InvalidDataException("AreCasesRequired is a required property for InboundShipmentInfo and cannot be null");
            }
            else
            {
                this.AreCasesRequired = AreCasesRequired;
            }
            this.ShipmentId = ShipmentId;
            this.ShipmentName = ShipmentName;
            this.DestinationFulfillmentCenterId = DestinationFulfillmentCenterId;
            this.ShipmentStatus = ShipmentStatus;
            this.LabelPrepType = LabelPrepType;
            this.ConfirmedNeedByDate = ConfirmedNeedByDate;
            this.BoxContentsSource = BoxContentsSource;
            this.EstimatedBoxContentsFee = EstimatedBoxContentsFee;
        }

        /// <summary>
        /// The shipment identifier submitted in the request.
        /// </summary>
        /// <value>The shipment identifier submitted in the request.</value>
        [DataMember(Name = "ShipmentId", EmitDefaultValue = false)]
        public string ShipmentId { get; set; }

        /// <summary>
        /// The name for the inbound shipment.
        /// </summary>
        /// <value>The name for the inbound shipment.</value>
        [DataMember(Name = "ShipmentName", EmitDefaultValue = false)]
        public string ShipmentName { get; set; }

        /// <summary>
        /// The return address.
        /// </summary>
        /// <value>The return address.</value>
        [DataMember(Name = "ShipFromAddress", EmitDefaultValue = false)]
        public Address ShipFromAddress { get; set; }

        /// <summary>
        /// An Amazon fulfillment center identifier created by Amazon.
        /// </summary>
        /// <value>An Amazon fulfillment center identifier created by Amazon.</value>
        [DataMember(Name = "DestinationFulfillmentCenterId", EmitDefaultValue = false)]
        public string DestinationFulfillmentCenterId { get; set; }



        /// <summary>
        /// Indicates whether or not an inbound shipment contains case-packed boxes. When AreCasesRequired &#x3D; true for an inbound shipment, all items in the inbound shipment must be case packed.
        /// </summary>
        /// <value>Indicates whether or not an inbound shipment contains case-packed boxes. When AreCasesRequired &#x3D; true for an inbound shipment, all items in the inbound shipment must be case packed.</value>
        [DataMember(Name = "AreCasesRequired", EmitDefaultValue = false)]
        public bool? AreCasesRequired { get; set; }

        /// <summary>
        /// Date by which the shipment must arrive at the Amazon fulfillment center to avoid delivery promise breaks for pre-ordered items.
        /// </summary>
        /// <value>Date by which the shipment must arrive at the Amazon fulfillment center to avoid delivery promise breaks for pre-ordered items.</value>
        [DataMember(Name = "ConfirmedNeedByDate", EmitDefaultValue = false)]
        public string ConfirmedNeedByDate { get; set; }


        /// <summary>
        /// An estimate of the manual processing fee charged by Amazon for boxes without box content information. This is only returned when BoxContentsSource is NONE.
        /// </summary>
        /// <value>An estimate of the manual processing fee charged by Amazon for boxes without box content information. This is only returned when BoxContentsSource is NONE.</value>
        [DataMember(Name = "EstimatedBoxContentsFee", EmitDefaultValue = false)]
        public BoxContentsFeeDetails EstimatedBoxContentsFee { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class InboundShipmentInfo {\n");
            sb.Append("  ShipmentId: ").Append(ShipmentId).Append("\n");
            sb.Append("  ShipmentName: ").Append(ShipmentName).Append("\n");
            sb.Append("  ShipFromAddress: ").Append(ShipFromAddress).Append("\n");
            sb.Append("  DestinationFulfillmentCenterId: ").Append(DestinationFulfillmentCenterId).Append("\n");
            sb.Append("  ShipmentStatus: ").Append(ShipmentStatus).Append("\n");
            sb.Append("  LabelPrepType: ").Append(LabelPrepType).Append("\n");
            sb.Append("  AreCasesRequired: ").Append(AreCasesRequired).Append("\n");
            sb.Append("  ConfirmedNeedByDate: ").Append(ConfirmedNeedByDate).Append("\n");
            sb.Append("  BoxContentsSource: ").Append(BoxContentsSource).Append("\n");
            sb.Append("  EstimatedBoxContentsFee: ").Append(EstimatedBoxContentsFee).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as InboundShipmentInfo);
        }

        /// <summary>
        /// Returns true if InboundShipmentInfo instances are equal
        /// </summary>
        /// <param name="input">Instance of InboundShipmentInfo to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(InboundShipmentInfo input)
        {
            if (input == null)
                return false;

            return
                (
                    this.ShipmentId == input.ShipmentId ||
                    (this.ShipmentId != null &&
                    this.ShipmentId.Equals(input.ShipmentId))
                ) &&
                (
                    this.ShipmentName == input.ShipmentName ||
                    (this.ShipmentName != null &&
                    this.ShipmentName.Equals(input.ShipmentName))
                ) &&
                (
                    this.ShipFromAddress == input.ShipFromAddress ||
                    (this.ShipFromAddress != null &&
                    this.ShipFromAddress.Equals(input.ShipFromAddress))
                ) &&
                (
                    this.DestinationFulfillmentCenterId == input.DestinationFulfillmentCenterId ||
                    (this.DestinationFulfillmentCenterId != null &&
                    this.DestinationFulfillmentCenterId.Equals(input.DestinationFulfillmentCenterId))
                ) &&
                (
                    this.ShipmentStatus == input.ShipmentStatus ||
                    (this.ShipmentStatus != null &&
                    this.ShipmentStatus.Equals(input.ShipmentStatus))
                ) &&
                (
                    this.LabelPrepType == input.LabelPrepType ||
                    (this.LabelPrepType != null &&
                    this.LabelPrepType.Equals(input.LabelPrepType))
                ) &&
                (
                    this.AreCasesRequired == input.AreCasesRequired ||
                    (this.AreCasesRequired != null &&
                    this.AreCasesRequired.Equals(input.AreCasesRequired))
                ) &&
                (
                    this.ConfirmedNeedByDate == input.ConfirmedNeedByDate ||
                    (this.ConfirmedNeedByDate != null &&
                    this.ConfirmedNeedByDate.Equals(input.ConfirmedNeedByDate))
                ) &&
                (
                    this.BoxContentsSource == input.BoxContentsSource ||
                    (this.BoxContentsSource != null &&
                    this.BoxContentsSource.Equals(input.BoxContentsSource))
                ) &&
                (
                    this.EstimatedBoxContentsFee == input.EstimatedBoxContentsFee ||
                    (this.EstimatedBoxContentsFee != null &&
                    this.EstimatedBoxContentsFee.Equals(input.EstimatedBoxContentsFee))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.ShipmentId != null)
                    hashCode = hashCode * 59 + this.ShipmentId.GetHashCode();
                if (this.ShipmentName != null)
                    hashCode = hashCode * 59 + this.ShipmentName.GetHashCode();
                if (this.ShipFromAddress != null)
                    hashCode = hashCode * 59 + this.ShipFromAddress.GetHashCode();
                if (this.DestinationFulfillmentCenterId != null)
                    hashCode = hashCode * 59 + this.DestinationFulfillmentCenterId.GetHashCode();
                if (this.ShipmentStatus != null)
                    hashCode = hashCode * 59 + this.ShipmentStatus.GetHashCode();
                if (this.LabelPrepType != null)
                    hashCode = hashCode * 59 + this.LabelPrepType.GetHashCode();
                if (this.AreCasesRequired != null)
                    hashCode = hashCode * 59 + this.AreCasesRequired.GetHashCode();
                if (this.ConfirmedNeedByDate != null)
                    hashCode = hashCode * 59 + this.ConfirmedNeedByDate.GetHashCode();
                if (this.BoxContentsSource != null)
                    hashCode = hashCode * 59 + this.BoxContentsSource.GetHashCode();
                if (this.EstimatedBoxContentsFee != null)
                    hashCode = hashCode * 59 + this.EstimatedBoxContentsFee.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
