/* 
 * Selling Partner API for Fulfillment Inbound
 *
 * The Selling Partner API for Fulfillment Inbound lets you create applications that create and update inbound shipments of inventory to Amazon's fulfillment network.
 *
 * OpenAPI spec version: v0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using Newtonsoft.Json;
using System;
using System.Collections.Generic;
using System.ComponentModel.DataAnnotations;
using System.IO;
using System.Runtime.Serialization;
using System.Text;

namespace FikaAmazonAPI.AmazonSpApiSDK.Models.FulfillmentInbound
{
    /// <summary>
    /// Item information for creating an inbound shipment plan. Submitted with a call to the createInboundShipmentPlan operation.
    /// </summary>
    [DataContract]
    public partial class InboundShipmentPlanRequestItem : IEquatable<InboundShipmentPlanRequestItem>, IValidatableObject
    {
        /// <summary>
        /// Gets or Sets Condition
        /// </summary>
        [DataMember(Name = "Condition", EmitDefaultValue = false)]
        public Condition Condition { get; set; }
        /// <summary>
        /// Initializes a new instance of the <see cref="InboundShipmentPlanRequestItem" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        public InboundShipmentPlanRequestItem() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="InboundShipmentPlanRequestItem" /> class.
        /// </summary>
        /// <param name="sellerSKU">The seller SKU of the item. (required).</param>
        /// <param name="aSIN">The Amazon Standard Identification Number (ASIN) of the item. (required).</param>
        /// <param name="condition">condition (required).</param>
        /// <param name="quantity">quantity (required).</param>
        /// <param name="quantityInCase">The item quantity in each case, for case-packed items. Note that QuantityInCase multiplied by the number of cases in the inbound shipment equals Quantity. Also note that all of the boxes of an inbound shipment must either be case packed or individually packed. For that reason, when you submit the createInboundShipmentPlan operation, the value of QuantityInCase must be provided for every item in the shipment or for none of the items in the shipment..</param>
        /// <param name="prepDetailsList">prepDetailsList.</param>
        public InboundShipmentPlanRequestItem(string sellerSKU = default(string), string aSIN = default(string), Condition condition = default(Condition), int? quantity = default(int?), int? quantityInCase = default(int?), PrepDetailsList prepDetailsList = default(PrepDetailsList))
        {
            // to ensure "sellerSKU" is required (not null)
            if (sellerSKU == null)
            {
                throw new InvalidDataException("sellerSKU is a required property for InboundShipmentPlanRequestItem and cannot be null");
            }
            else
            {
                this.SellerSKU = sellerSKU;
            }
            // to ensure "aSIN" is required (not null)
            if (aSIN == null)
            {
                throw new InvalidDataException("aSIN is a required property for InboundShipmentPlanRequestItem and cannot be null");
            }
            else
            {
                this.ASIN = aSIN;
            }
            // to ensure "condition" is required (not null)
            if (condition == null)
            {
                throw new InvalidDataException("condition is a required property for InboundShipmentPlanRequestItem and cannot be null");
            }
            else
            {
                this.Condition = condition;
            }
            // to ensure "quantity" is required (not null)
            if (quantity == null)
            {
                throw new InvalidDataException("quantity is a required property for InboundShipmentPlanRequestItem and cannot be null");
            }
            else
            {
                this.Quantity = quantity;
            }
            this.QuantityInCase = quantityInCase;
            this.PrepDetailsList = prepDetailsList;
        }

        /// <summary>
        /// The seller SKU of the item.
        /// </summary>
        /// <value>The seller SKU of the item.</value>
        [DataMember(Name = "SellerSKU", EmitDefaultValue = false)]
        public string SellerSKU { get; set; }

        /// <summary>
        /// The Amazon Standard Identification Number (ASIN) of the item.
        /// </summary>
        /// <value>The Amazon Standard Identification Number (ASIN) of the item.</value>
        [DataMember(Name = "ASIN", EmitDefaultValue = false)]
        public string ASIN { get; set; }


        /// <summary>
        /// Gets or Sets Quantity
        /// </summary>
        [DataMember(Name = "Quantity", EmitDefaultValue = false)]
        public int? Quantity { get; set; }

        /// <summary>
        /// The item quantity in each case, for case-packed items. Note that QuantityInCase multiplied by the number of cases in the inbound shipment equals Quantity. Also note that all of the boxes of an inbound shipment must either be case packed or individually packed. For that reason, when you submit the createInboundShipmentPlan operation, the value of QuantityInCase must be provided for every item in the shipment or for none of the items in the shipment.
        /// </summary>
        /// <value>The item quantity in each case, for case-packed items. Note that QuantityInCase multiplied by the number of cases in the inbound shipment equals Quantity. Also note that all of the boxes of an inbound shipment must either be case packed or individually packed. For that reason, when you submit the createInboundShipmentPlan operation, the value of QuantityInCase must be provided for every item in the shipment or for none of the items in the shipment.</value>
        [DataMember(Name = "QuantityInCase", EmitDefaultValue = false)]
        public int? QuantityInCase { get; set; }

        /// <summary>
        /// Gets or Sets PrepDetailsList
        /// </summary>
        [DataMember(Name = "PrepDetailsList", EmitDefaultValue = false)]
        public PrepDetailsList PrepDetailsList { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class InboundShipmentPlanRequestItem {\n");
            sb.Append("  SellerSKU: ").Append(SellerSKU).Append("\n");
            sb.Append("  ASIN: ").Append(ASIN).Append("\n");
            sb.Append("  Condition: ").Append(Condition).Append("\n");
            sb.Append("  Quantity: ").Append(Quantity).Append("\n");
            sb.Append("  QuantityInCase: ").Append(QuantityInCase).Append("\n");
            sb.Append("  PrepDetailsList: ").Append(PrepDetailsList).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as InboundShipmentPlanRequestItem);
        }

        /// <summary>
        /// Returns true if InboundShipmentPlanRequestItem instances are equal
        /// </summary>
        /// <param name="input">Instance of InboundShipmentPlanRequestItem to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(InboundShipmentPlanRequestItem input)
        {
            if (input == null)
                return false;

            return
                (
                    this.SellerSKU == input.SellerSKU ||
                    (this.SellerSKU != null &&
                    this.SellerSKU.Equals(input.SellerSKU))
                ) &&
                (
                    this.ASIN == input.ASIN ||
                    (this.ASIN != null &&
                    this.ASIN.Equals(input.ASIN))
                ) &&
                (
                    this.Condition == input.Condition ||
                    (this.Condition != null &&
                    this.Condition.Equals(input.Condition))
                ) &&
                (
                    this.Quantity == input.Quantity ||
                    (this.Quantity != null &&
                    this.Quantity.Equals(input.Quantity))
                ) &&
                (
                    this.QuantityInCase == input.QuantityInCase ||
                    (this.QuantityInCase != null &&
                    this.QuantityInCase.Equals(input.QuantityInCase))
                ) &&
                (
                    this.PrepDetailsList == input.PrepDetailsList ||
                    (this.PrepDetailsList != null &&
                    this.PrepDetailsList.Equals(input.PrepDetailsList))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.SellerSKU != null)
                    hashCode = hashCode * 59 + this.SellerSKU.GetHashCode();
                if (this.ASIN != null)
                    hashCode = hashCode * 59 + this.ASIN.GetHashCode();
                if (this.Condition != null)
                    hashCode = hashCode * 59 + this.Condition.GetHashCode();
                if (this.Quantity != null)
                    hashCode = hashCode * 59 + this.Quantity.GetHashCode();
                if (this.QuantityInCase != null)
                    hashCode = hashCode * 59 + this.QuantityInCase.GetHashCode();
                if (this.PrepDetailsList != null)
                    hashCode = hashCode * 59 + this.PrepDetailsList.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}