/* 
 * Selling Partner API for Fulfillment Inbound
 *
 * The Selling Partner API for Fulfillment Inbound lets you create applications that create and update inbound shipments of inventory to Amazon's fulfillment network.
 *
 * OpenAPI spec version: v0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using Newtonsoft.Json;
using System;
using System.Collections.Generic;
using System.ComponentModel.DataAnnotations;
using System.IO;
using System.Runtime.Serialization;
using System.Text;

namespace FikaAmazonAPI.AmazonSpApiSDK.Models.FulfillmentInbound
{
    /// <summary>
    /// Preparation instructions and who is responsible for the preparation.
    /// </summary>
    [DataContract]
    public partial class PrepDetails : IEquatable<PrepDetails>, IValidatableObject
    {
        /// <summary>
        /// Gets or Sets PrepInstruction
        /// </summary>
        [DataMember(Name = "PrepInstruction", EmitDefaultValue = false)]
        public PrepInstruction PrepInstruction { get; set; }
        /// <summary>
        /// Gets or Sets PrepOwner
        /// </summary>
        [DataMember(Name = "PrepOwner", EmitDefaultValue = false)]
        public PrepOwner PrepOwner { get; set; }
        /// <summary>
        /// Initializes a new instance of the <see cref="PrepDetails" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        public PrepDetails() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="PrepDetails" /> class.
        /// </summary>
        /// <param name="prepInstruction">prepInstruction (required).</param>
        /// <param name="prepOwner">prepOwner (required).</param>
        public PrepDetails(PrepInstruction prepInstruction = default(PrepInstruction), PrepOwner prepOwner = default(PrepOwner))
        {
            // to ensure "prepInstruction" is required (not null)
            if (prepInstruction == null)
            {
                throw new InvalidDataException("prepInstruction is a required property for PrepDetails and cannot be null");
            }
            else
            {
                this.PrepInstruction = prepInstruction;
            }
            // to ensure "prepOwner" is required (not null)
            if (prepOwner == null)
            {
                throw new InvalidDataException("prepOwner is a required property for PrepDetails and cannot be null");
            }
            else
            {
                this.PrepOwner = prepOwner;
            }
        }



        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class PrepDetails {\n");
            sb.Append("  PrepInstruction: ").Append(PrepInstruction).Append("\n");
            sb.Append("  PrepOwner: ").Append(PrepOwner).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as PrepDetails);
        }

        /// <summary>
        /// Returns true if PrepDetails instances are equal
        /// </summary>
        /// <param name="input">Instance of PrepDetails to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(PrepDetails input)
        {
            if (input == null)
                return false;

            return
                (
                    this.PrepInstruction == input.PrepInstruction ||
                    (this.PrepInstruction != null &&
                    this.PrepInstruction.Equals(input.PrepInstruction))
                ) &&
                (
                    this.PrepOwner == input.PrepOwner ||
                    (this.PrepOwner != null &&
                    this.PrepOwner.Equals(input.PrepOwner))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.PrepInstruction != null)
                    hashCode = hashCode * 59 + this.PrepInstruction.GetHashCode();
                if (this.PrepOwner != null)
                    hashCode = hashCode * 59 + this.PrepOwner.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}