/* 
 * Selling Partner API for Fulfillment Inbound
 *
 * The Selling Partner API for Fulfillment Inbound lets you create applications that create and update inbound shipments of inventory to Amazon's fulfillment network.
 *
 * OpenAPI spec version: v0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using Newtonsoft.Json;
using System;
using System.Collections.Generic;
using System.ComponentModel.DataAnnotations;
using System.Runtime.Serialization;
using System.Text;

namespace FikaAmazonAPI.AmazonSpApiSDK.Models.FulfillmentInbound
{
    /// <summary>
    /// Information required to create an Amazon-partnered carrier shipping estimate, or to alert the Amazon fulfillment center to the arrival of an inbound shipment by a non-Amazon-partnered carrier.
    /// </summary>
    [DataContract]
    public partial class TransportDetailInput : IEquatable<TransportDetailInput>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="TransportDetailInput" /> class.
        /// </summary>
        /// <param name="partneredSmallParcelData">partneredSmallParcelData.</param>
        /// <param name="nonPartneredSmallParcelData">nonPartneredSmallParcelData.</param>
        /// <param name="partneredLtlData">partneredLtlData.</param>
        /// <param name="nonPartneredLtlData">nonPartneredLtlData.</param>
        public TransportDetailInput(PartneredSmallParcelDataInput partneredSmallParcelData = default(PartneredSmallParcelDataInput), NonPartneredSmallParcelDataInput nonPartneredSmallParcelData = default(NonPartneredSmallParcelDataInput), PartneredLtlDataInput partneredLtlData = default(PartneredLtlDataInput), NonPartneredLtlDataInput nonPartneredLtlData = default(NonPartneredLtlDataInput))
        {
            this.PartneredSmallParcelData = partneredSmallParcelData;
            this.NonPartneredSmallParcelData = nonPartneredSmallParcelData;
            this.PartneredLtlData = partneredLtlData;
            this.NonPartneredLtlData = nonPartneredLtlData;
        }

        /// <summary>
        /// Gets or Sets PartneredSmallParcelData
        /// </summary>
        [DataMember(Name = "PartneredSmallParcelData", EmitDefaultValue = false)]
        public PartneredSmallParcelDataInput PartneredSmallParcelData { get; set; }

        /// <summary>
        /// Gets or Sets NonPartneredSmallParcelData
        /// </summary>
        [DataMember(Name = "NonPartneredSmallParcelData", EmitDefaultValue = false)]
        public NonPartneredSmallParcelDataInput NonPartneredSmallParcelData { get; set; }

        /// <summary>
        /// Gets or Sets PartneredLtlData
        /// </summary>
        [DataMember(Name = "PartneredLtlData", EmitDefaultValue = false)]
        public PartneredLtlDataInput PartneredLtlData { get; set; }

        /// <summary>
        /// Gets or Sets NonPartneredLtlData
        /// </summary>
        [DataMember(Name = "NonPartneredLtlData", EmitDefaultValue = false)]
        public NonPartneredLtlDataInput NonPartneredLtlData { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class TransportDetailInput {\n");
            sb.Append("  PartneredSmallParcelData: ").Append(PartneredSmallParcelData).Append("\n");
            sb.Append("  NonPartneredSmallParcelData: ").Append(NonPartneredSmallParcelData).Append("\n");
            sb.Append("  PartneredLtlData: ").Append(PartneredLtlData).Append("\n");
            sb.Append("  NonPartneredLtlData: ").Append(NonPartneredLtlData).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as TransportDetailInput);
        }

        /// <summary>
        /// Returns true if TransportDetailInput instances are equal
        /// </summary>
        /// <param name="input">Instance of TransportDetailInput to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(TransportDetailInput input)
        {
            if (input == null)
                return false;

            return
                (
                    this.PartneredSmallParcelData == input.PartneredSmallParcelData ||
                    (this.PartneredSmallParcelData != null &&
                    this.PartneredSmallParcelData.Equals(input.PartneredSmallParcelData))
                ) &&
                (
                    this.NonPartneredSmallParcelData == input.NonPartneredSmallParcelData ||
                    (this.NonPartneredSmallParcelData != null &&
                    this.NonPartneredSmallParcelData.Equals(input.NonPartneredSmallParcelData))
                ) &&
                (
                    this.PartneredLtlData == input.PartneredLtlData ||
                    (this.PartneredLtlData != null &&
                    this.PartneredLtlData.Equals(input.PartneredLtlData))
                ) &&
                (
                    this.NonPartneredLtlData == input.NonPartneredLtlData ||
                    (this.NonPartneredLtlData != null &&
                    this.NonPartneredLtlData.Equals(input.NonPartneredLtlData))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.PartneredSmallParcelData != null)
                    hashCode = hashCode * 59 + this.PartneredSmallParcelData.GetHashCode();
                if (this.NonPartneredSmallParcelData != null)
                    hashCode = hashCode * 59 + this.NonPartneredSmallParcelData.GetHashCode();
                if (this.PartneredLtlData != null)
                    hashCode = hashCode * 59 + this.PartneredLtlData.GetHashCode();
                if (this.NonPartneredLtlData != null)
                    hashCode = hashCode * 59 + this.NonPartneredLtlData.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}