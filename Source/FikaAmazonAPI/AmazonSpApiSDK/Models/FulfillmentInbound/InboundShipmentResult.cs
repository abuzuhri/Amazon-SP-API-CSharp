/* 
 * Selling Partner API for Fulfillment Inbound
 *
 * The Selling Partner API for Fulfillment Inbound lets you create applications that create and update inbound shipments of inventory to Amazon's fulfillment network.
 *
 * OpenAPI spec version: v0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using Newtonsoft.Json;
using System;
using System.Collections.Generic;
using System.ComponentModel.DataAnnotations;
using System.IO;
using System.Runtime.Serialization;
using System.Text;

namespace FikaAmazonAPI.AmazonSpApiSDK.Models.FulfillmentInbound
{
    /// <summary>
    /// InboundShipmentResult
    /// </summary>
    [DataContract]
    public partial class InboundShipmentResult : IEquatable<InboundShipmentResult>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="InboundShipmentResult" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        public InboundShipmentResult() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="InboundShipmentResult" /> class.
        /// </summary>
        /// <param name="shipmentId">The shipment identifier submitted in the request. (required).</param>
        public InboundShipmentResult(string shipmentId = default(string))
        {
            // to ensure "shipmentId" is required (not null)
            if (shipmentId == null)
            {
                throw new InvalidDataException("shipmentId is a required property for InboundShipmentResult and cannot be null");
            }
            else
            {
                this.ShipmentId = shipmentId;
            }
        }

        /// <summary>
        /// The shipment identifier submitted in the request.
        /// </summary>
        /// <value>The shipment identifier submitted in the request.</value>
        [DataMember(Name = "ShipmentId", EmitDefaultValue = false)]
        public string ShipmentId { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class InboundShipmentResult {\n");
            sb.Append("  ShipmentId: ").Append(ShipmentId).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as InboundShipmentResult);
        }

        /// <summary>
        /// Returns true if InboundShipmentResult instances are equal
        /// </summary>
        /// <param name="input">Instance of InboundShipmentResult to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(InboundShipmentResult input)
        {
            if (input == null)
                return false;

            return
                (
                    this.ShipmentId == input.ShipmentId ||
                    (this.ShipmentId != null &&
                    this.ShipmentId.Equals(input.ShipmentId))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.ShipmentId != null)
                    hashCode = hashCode * 59 + this.ShipmentId.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}