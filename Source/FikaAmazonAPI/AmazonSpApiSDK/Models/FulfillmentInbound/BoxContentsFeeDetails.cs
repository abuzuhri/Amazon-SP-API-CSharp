/* 
 * Selling Partner API for Fulfillment Inbound
 *
 * The Selling Partner API for Fulfillment Inbound lets you create applications that create and update inbound shipments of inventory to Amazon's fulfillment network.
 *
 * OpenAPI spec version: v0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using Newtonsoft.Json;
using System;
using System.Collections.Generic;
using System.ComponentModel.DataAnnotations;
using System.Runtime.Serialization;
using System.Text;

namespace FikaAmazonAPI.AmazonSpApiSDK.Models.FulfillmentInbound
{
    /// <summary>
    /// The manual processing fee per unit and total fee for a shipment.
    /// </summary>
    [DataContract]
    public partial class BoxContentsFeeDetails : IEquatable<BoxContentsFeeDetails>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="BoxContentsFeeDetails" /> class.
        /// </summary>
        /// <param name="totalUnits">The number of units to ship..</param>
        /// <param name="feePerUnit">The manual processing fee per unit..</param>
        /// <param name="totalFee">The total manual processing fee for the shipment..</param>
        public BoxContentsFeeDetails(int? totalUnits = default(int?), Amount feePerUnit = default(Amount), Amount totalFee = default(Amount))
        {
            this.TotalUnits = totalUnits;
            this.FeePerUnit = feePerUnit;
            this.TotalFee = totalFee;
        }

        /// <summary>
        /// The number of units to ship.
        /// </summary>
        /// <value>The number of units to ship.</value>
        [DataMember(Name = "TotalUnits", EmitDefaultValue = false)]
        public int? TotalUnits { get; set; }

        /// <summary>
        /// The manual processing fee per unit.
        /// </summary>
        /// <value>The manual processing fee per unit.</value>
        [DataMember(Name = "FeePerUnit", EmitDefaultValue = false)]
        public Amount FeePerUnit { get; set; }

        /// <summary>
        /// The total manual processing fee for the shipment.
        /// </summary>
        /// <value>The total manual processing fee for the shipment.</value>
        [DataMember(Name = "TotalFee", EmitDefaultValue = false)]
        public Amount TotalFee { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class BoxContentsFeeDetails {\n");
            sb.Append("  TotalUnits: ").Append(TotalUnits).Append("\n");
            sb.Append("  FeePerUnit: ").Append(FeePerUnit).Append("\n");
            sb.Append("  TotalFee: ").Append(TotalFee).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as BoxContentsFeeDetails);
        }

        /// <summary>
        /// Returns true if BoxContentsFeeDetails instances are equal
        /// </summary>
        /// <param name="input">Instance of BoxContentsFeeDetails to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(BoxContentsFeeDetails input)
        {
            if (input == null)
                return false;

            return
                (
                    this.TotalUnits == input.TotalUnits ||
                    (this.TotalUnits != null &&
                    this.TotalUnits.Equals(input.TotalUnits))
                ) &&
                (
                    this.FeePerUnit == input.FeePerUnit ||
                    (this.FeePerUnit != null &&
                    this.FeePerUnit.Equals(input.FeePerUnit))
                ) &&
                (
                    this.TotalFee == input.TotalFee ||
                    (this.TotalFee != null &&
                    this.TotalFee.Equals(input.TotalFee))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.TotalUnits != null)
                    hashCode = hashCode * 59 + this.TotalUnits.GetHashCode();
                if (this.FeePerUnit != null)
                    hashCode = hashCode * 59 + this.FeePerUnit.GetHashCode();
                if (this.TotalFee != null)
                    hashCode = hashCode * 59 + this.TotalFee.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}