/* 
 * The Selling Partner API for FBA inbound operations.
 *
 * The Selling Partner API for Fulfillment By Amazon (FBA) Inbound. The FBA Inbound API enables building inbound workflows to create, manage, and send shipments into Amazon's fulfillment network. The API has interoperability with the Send-to-Amazon user interface.
 *
 * OpenAPI spec version: 2024-03-20
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using Newtonsoft.Json;
using System;
using System.Collections.Generic;
using System.ComponentModel.DataAnnotations;
using System.Runtime.Serialization;
using System.Text;

namespace FikaAmazonAPI.AmazonSpApiSDK.Models.FulfillmentInboundv20240320
{
    /// <summary>
    /// Freight information describes the skus being transported. Freight carrier options and quotes will only be returned if the freight information is provided.
    /// </summary>
    [DataContract]
    public partial class FreightInformation :  IEquatable<FreightInformation>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="FreightInformation" /> class.
        /// </summary>
        /// <param name="declaredValue">Currency definition.</param>
        /// <param name="freightClass">Freight class. Can be: NONE, FC_50, FC_55, FC_60, FC_65, FC_70, FC_77_5, FC_85, FC_92_5, FC_100, FC_110, FC_125, FC_150, FC_175, FC_200, FC_250, FC_300, FC_400, FC_500.</param>
        public FreightInformation(Currency declaredValue = default(Currency), FreightClass? freightClass = default(FreightClass?))
        {
            this.DeclaredValue = declaredValue;
            this.FreightClass = freightClass;
        }
        
        /// <summary>
        /// Gets or Sets DeclaredValue
        /// </summary>
        [DataMember(Name="declaredValue", EmitDefaultValue=false)]
        public Currency DeclaredValue { get; set; }

        /// <summary>
        /// Freight class. Can be: NONE, FC_50, FC_55, FC_60, FC_65, FC_70, FC_77_5, FC_85, FC_92_5, FC_100, FC_110, FC_125, FC_150, FC_175, FC_200, FC_250, FC_300, FC_400, FC_500.
        /// </summary>
        /// <value>Freight class. Can be: NONE, FC_50, FC_55, FC_60, FC_65, FC_70, FC_77_5, FC_85, FC_92_5, FC_100, FC_110, FC_125, FC_150, FC_175, FC_200, FC_250, FC_300, FC_400, FC_500.</value>
        [DataMember(Name= "freightClass", EmitDefaultValue=false)]
        public FreightClass? FreightClass { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class FreightInformation {\n");
            sb.Append("  DeclaredValue: ").Append(DeclaredValue).Append("\n");
            sb.Append("  FreightClass: ").Append(FreightClass).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as FreightInformation);
        }

        /// <summary>
        /// Returns true if TaxDetails instances are equal
        /// </summary>
        /// <param name="input">Instance of TaxDetails to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(FreightInformation input)
        {
            if (input == null)
                return false;

            return
                (
                    this.DeclaredValue == input.DeclaredValue ||
                    (this.DeclaredValue != null &&
                    this.DeclaredValue.Equals(input.DeclaredValue))
                ) &&
                (
                    this.FreightClass == input.FreightClass ||
                    (this.FreightClass != null &&
                    this.FreightClass.Equals(input.FreightClass))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.DeclaredValue != null)
                    hashCode = hashCode * 59 + this.DeclaredValue.GetHashCode();
                if (this.FreightClass != null)
                    hashCode = hashCode * 59 + this.FreightClass.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
