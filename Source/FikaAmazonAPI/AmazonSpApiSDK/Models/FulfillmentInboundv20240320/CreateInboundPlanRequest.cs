/* 
 * The Selling Partner API for FBA inbound operations.
 *
 * The Selling Partner API for Fulfillment By Amazon (FBA) Inbound. The FBA Inbound API enables building inbound workflows to create, manage, and send shipments into Amazon's fulfillment network. The API has interoperability with the Send-to-Amazon user interface.
 *
 * OpenAPI spec version: 2024-03-20
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using Newtonsoft.Json;
using System;
using System.Collections.Generic;
using System.ComponentModel.DataAnnotations;
using System.IO;
using System.Linq;
using System.Runtime.Serialization;
using System.Text;

namespace FikaAmazonAPI.AmazonSpApiSDK.Models.FulfillmentInboundv20240320
{
    /// <summary>
    /// The &#x60;createInboundPlan&#x60; request.
    /// </summary>
    [DataContract]
    public partial class CreateInboundPlanRequest :  IEquatable<CreateInboundPlanRequest>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="CreateInboundPlanRequest" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        public CreateInboundPlanRequest() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="CreateInboundPlanRequest" /> class.
        /// </summary>
        /// <param name="destinationMarketplaces">Marketplaces where the items need to be shipped to. Currently only one marketplace can be selected in this request. (required).</param>
        /// <param name="items">Items included in this plan. (required).</param>
        /// <param name="name">Name for the Inbound Plan. If one isn&#39;t provided, a default name will be provided.</param>
        /// <param name="sourceAddress">Specific details to identify a place. (required).</param>
        public CreateInboundPlanRequest(List<string> destinationMarketplaces = default(List<string>),
                                        List<ItemInput> items = default(List<ItemInput>),
                                        string name = default(string),
                                        AddressInput sourceAddress = default(AddressInput))
        {
            // to ensure "destinationMarketplaces" is required (not null)
            if (destinationMarketplaces == null)
            {
                throw new InvalidDataException("destinationMarketplaces is a required property for CreateInboundPlanRequest and cannot be null");
            }
            else
            {
                this.DestinationMarketplaces = destinationMarketplaces;
            }
            // to ensure "items" is required (not null)
            if (items == null)
            {
                throw new InvalidDataException("items is a required property for CreateInboundPlanRequest and cannot be null");
            }
            else
            {
                this.Items = items;
            }
            // to ensure "sourceAddress" is required (not null)
            if (sourceAddress == null)
            {
                throw new InvalidDataException("sourceAddress is a required property for CreateInboundPlanRequest and cannot be null");
            }
            else
            {
                this.SourceAddress = sourceAddress;
            }
            this.Name = name;
        }

        /// <summary>
        /// Marketplaces where the items need to be shipped to. Currently only one marketplace can be selected in this request.
        /// </summary>
        /// <value>Marketplaces where the items need to be shipped to. Currently only one marketplace can be selected in this request.</value>
        [DataMember(Name="destinationMarketplaces", EmitDefaultValue=false)]
        public List<string> DestinationMarketplaces { get; set; }

        /// <summary>
        /// Items included in this plan.
        /// </summary>
        /// <value>Items included in this plan.</value>
        [DataMember(Name="items", EmitDefaultValue=false)]
        public List<ItemInput> Items { get; set; }

        /// <summary>
        /// Name for the Inbound Plan. If one isn&#39;t provided, a default name will be provided.
        /// </summary>
        /// <value>Name for the Inbound Plan. If one isn&#39;t provided, a default name will be provided.</value>
        [DataMember(Name="name", EmitDefaultValue=false)]
        public string Name { get; set; }

        /// <summary>
        /// Gets or Sets SourceAddress
        /// </summary>
        [DataMember(Name="sourceAddress", EmitDefaultValue=false)]
        public AddressInput SourceAddress { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class CreateInboundPlanRequest {\n");
            sb.Append("  DestinationMarketplaces: ").Append(DestinationMarketplaces).Append("\n");
            sb.Append("  Items: ").Append(Items).Append("\n");
            sb.Append("  Name: ").Append(Name).Append("\n");
            sb.Append("  SourceAddress: ").Append(SourceAddress).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as CreateInboundPlanRequest);
        }

        /// <summary>
        /// Returns true if CreateInboundPlanRequest instances are equal
        /// </summary>
        /// <param name="input">Instance of CreateInboundPlanRequest to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(CreateInboundPlanRequest input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.DestinationMarketplaces == input.DestinationMarketplaces ||
                    this.DestinationMarketplaces != null &&
                    this.DestinationMarketplaces.SequenceEqual(input.DestinationMarketplaces)
                ) && 
                (
                    this.Items == input.Items ||
                    this.Items != null &&
                    this.Items.SequenceEqual(input.Items)
                ) && 
                (
                    this.Name == input.Name ||
                    (this.Name != null &&
                    this.Name.Equals(input.Name))
                ) && 
                (
                    this.SourceAddress == input.SourceAddress ||
                    (this.SourceAddress != null &&
                    this.SourceAddress.Equals(input.SourceAddress))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.DestinationMarketplaces != null)
                    hashCode = hashCode * 59 + this.DestinationMarketplaces.GetHashCode();
                if (this.Items != null)
                    hashCode = hashCode * 59 + this.Items.GetHashCode();
                if (this.Name != null)
                    hashCode = hashCode * 59 + this.Name.GetHashCode();
                if (this.SourceAddress != null)
                    hashCode = hashCode * 59 + this.SourceAddress.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            // Name (string) maxLength
            if(this.Name != null && this.Name.Length > 40)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for Name, length must be less than 40.", new [] { "Name" });
            }

            // Name (string) minLength
            if(this.Name != null && this.Name.Length < 1)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for Name, length must be greater than 1.", new [] { "Name" });
            }

            yield break;
        }
    }

}
