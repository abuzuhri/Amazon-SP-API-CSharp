/* 
 * The Selling Partner API for FBA inbound operations.
 *
 * The Selling Partner API for Fulfillment By Amazon (FBA) Inbound. The FBA Inbound API enables building inbound workflows to create, manage, and send shipments into Amazon's fulfillment network. The API has interoperability with the Send-to-Amazon user interface.
 *
 * OpenAPI spec version: 2024-03-20
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using Newtonsoft.Json;
using System;
using System.Collections.Generic;
using System.ComponentModel.DataAnnotations;
using System.Runtime.Serialization;
using System.Text;

namespace FikaAmazonAPI.AmazonSpApiSDK.Models.FulfillmentInboundv20240320
{
    /// <summary>
    /// &#x60;scheduleSelfShipAppointment&#x60; request.
    /// </summary>
    [DataContract]
    public partial class ScheduleSelfShipAppointmentRequest :  IEquatable<ScheduleSelfShipAppointmentRequest>, IValidatableObject
    {
        /// <summary>
        /// Gets or Sets ReasonComment
        /// </summary>
        [DataMember(Name="reasonComment", EmitDefaultValue=false)]
        public ReasonComment? ReasonComment { get; set; }
        /// <summary>
        /// Initializes a new instance of the <see cref="ScheduleSelfShipAppointmentRequest" /> class.
        /// </summary>
        /// <param name="reasonComment">reasonComment.</param>
        public ScheduleSelfShipAppointmentRequest(ReasonComment? reasonComment = default(ReasonComment?))
        {
            this.ReasonComment = reasonComment;
        }
        

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class ScheduleSelfShipAppointmentRequest {\n");
            sb.Append("  ReasonComment: ").Append(ReasonComment).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as ScheduleSelfShipAppointmentRequest);
        }

        /// <summary>
        /// Returns true if ScheduleSelfShipAppointmentRequest instances are equal
        /// </summary>
        /// <param name="input">Instance of ScheduleSelfShipAppointmentRequest to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(ScheduleSelfShipAppointmentRequest input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.ReasonComment == input.ReasonComment ||
                    (this.ReasonComment != null &&
                    this.ReasonComment.Equals(input.ReasonComment))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.ReasonComment != null)
                    hashCode = hashCode * 59 + this.ReasonComment.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
