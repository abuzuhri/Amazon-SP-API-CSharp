/* 
 * The Selling Partner API for FBA inbound operations.
 *
 * The Selling Partner API for Fulfillment By Amazon (FBA) Inbound. The FBA Inbound API enables building inbound workflows to create, manage, and send shipments into Amazon's fulfillment network. The API has interoperability with the Send-to-Amazon user interface.
 *
 * OpenAPI spec version: 2024-03-20
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using Newtonsoft.Json;
using System;
using System.Collections.Generic;
using System.ComponentModel.DataAnnotations;
using System.IO;
using System.Linq;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;

namespace FikaAmazonAPI.AmazonSpApiSDK.Models.FulfillmentInboundv20240320
{
    /// <summary>
    /// Contains information pertaining to the placement of the contents of an inbound plan and the related costs.
    /// </summary>
    [DataContract]
    public partial class PlacementOption :  IEquatable<PlacementOption>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="PlacementOption" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        public PlacementOption() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="PlacementOption" /> class.
        /// </summary>
        /// <param name="discounts">Discount for the offered option. (required).</param>
        /// <param name="expiration">The expiration date of the placement option. This is in ISO 8601 datetime format with pattern &#x60;yyyy-MM-ddTHH:mm:ss.sssZ&#x60;..</param>
        /// <param name="fees">Fee for the offered option. (required).</param>
        /// <param name="placementOptionId">Identifier to a placement option. A placement option represents the shipment splits and destinations of SKUs. (required).</param>
        /// <param name="shipmentIds">Shipment ids. (required).</param>
        /// <param name="status">The status of a placement option. Can be: OFFERED, ACCEPTED, or EXPIRED. (required).</param>
        public PlacementOption(List<Incentive> discounts = default(List<Incentive>),
                               DateTime? expiration = default(DateTime?),
                               List<Incentive> fees = default(List<Incentive>),
                               string placementOptionId = default(string),
                               List<string> shipmentIds = default(List<string>),
                               PlacementOptionStatus status = default(PlacementOptionStatus))
        {
            // to ensure "discounts" is required (not null)
            if (discounts == null)
            {
                throw new InvalidDataException("discounts is a required property for PlacementOption and cannot be null");
            }
            else
            {
                this.Discounts = discounts;
            }
            // to ensure "fees" is required (not null)
            if (fees == null)
            {
                throw new InvalidDataException("fees is a required property for PlacementOption and cannot be null");
            }
            else
            {
                this.Fees = fees;
            }
            // to ensure "placementOptionId" is required (not null)
            if (placementOptionId == null)
            {
                throw new InvalidDataException("placementOptionId is a required property for PlacementOption and cannot be null");
            }
            else
            {
                this.PlacementOptionId = placementOptionId;
            }
            // to ensure "shipmentIds" is required (not null)
            if (shipmentIds == null)
            {
                throw new InvalidDataException("shipmentIds is a required property for PlacementOption and cannot be null");
            }
            else
            {
                this.ShipmentIds = shipmentIds;
            }
            // to ensure "status" is required (not null)
            if (status == null)
            {
                throw new InvalidDataException("status is a required property for PlacementOption and cannot be null");
            }
            else
            {
                this.Status = status;
            }
            this.Expiration = expiration;
        }
        
        /// <summary>
        /// Discount for the offered option.
        /// </summary>
        /// <value>Discount for the offered option.</value>
        [DataMember(Name="discounts", EmitDefaultValue=false)]
        public List<Incentive> Discounts { get; set; }

        /// <summary>
        /// The expiration date of the placement option. This is in ISO 8601 datetime format with pattern &#x60;yyyy-MM-ddTHH:mm:ss.sssZ&#x60;.
        /// </summary>
        /// <value>The expiration date of the placement option. This is in ISO 8601 datetime format with pattern &#x60;yyyy-MM-ddTHH:mm:ss.sssZ&#x60;.</value>
        [DataMember(Name="expiration", EmitDefaultValue=false)]
        public DateTime? Expiration { get; set; }

        /// <summary>
        /// Fee for the offered option.
        /// </summary>
        /// <value>Fee for the offered option.</value>
        [DataMember(Name="fees", EmitDefaultValue=false)]
        public List<Incentive> Fees { get; set; }

        /// <summary>
        /// Identifier to a placement option. A placement option represents the shipment splits and destinations of SKUs.
        /// </summary>
        /// <value>Identifier to a placement option. A placement option represents the shipment splits and destinations of SKUs.</value>
        [DataMember(Name="placementOptionId", EmitDefaultValue=false)]
        public string PlacementOptionId { get; set; }

        /// <summary>
        /// Shipment ids.
        /// </summary>
        /// <value>Shipment ids.</value>
        [DataMember(Name="shipmentIds", EmitDefaultValue=false)]
        public List<string> ShipmentIds { get; set; }

        /// <summary>
        /// The status of a placement option. Can be &#x60;OFFERED&#x60;, &#x60;ACCEPTED&#x60;, or &#x60;EXPIRED&#x60;.
        /// </summary>
        /// <value>The status of a placement option. Can be &#x60;OFFERED&#x60;, &#x60;ACCEPTED&#x60;, or &#x60;EXPIRED&#x60;.</value>
        [DataMember(Name="status", EmitDefaultValue=false)]
        public PlacementOptionStatus Status { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class PlacementOption {\n");
            sb.Append("  Discounts: ").Append(Discounts).Append("\n");
            sb.Append("  Expiration: ").Append(Expiration).Append("\n");
            sb.Append("  Fees: ").Append(Fees).Append("\n");
            sb.Append("  PlacementOptionId: ").Append(PlacementOptionId).Append("\n");
            sb.Append("  ShipmentIds: ").Append(ShipmentIds).Append("\n");
            sb.Append("  Status: ").Append(Status).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as PlacementOption);
        }

        /// <summary>
        /// Returns true if PlacementOption instances are equal
        /// </summary>
        /// <param name="input">Instance of PlacementOption to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(PlacementOption input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.Discounts == input.Discounts ||
                    this.Discounts != null &&
                    this.Discounts.SequenceEqual(input.Discounts)
                ) && 
                (
                    this.Expiration == input.Expiration ||
                    (this.Expiration != null &&
                    this.Expiration.Equals(input.Expiration))
                ) && 
                (
                    this.Fees == input.Fees ||
                    this.Fees != null &&
                    this.Fees.SequenceEqual(input.Fees)
                ) && 
                (
                    this.PlacementOptionId == input.PlacementOptionId ||
                    (this.PlacementOptionId != null &&
                    this.PlacementOptionId.Equals(input.PlacementOptionId))
                ) && 
                (
                    this.ShipmentIds == input.ShipmentIds ||
                    this.ShipmentIds != null &&
                    this.ShipmentIds.SequenceEqual(input.ShipmentIds)
                ) && 
                (
                    this.Status == input.Status ||
                    (this.Status != null &&
                    this.Status.Equals(input.Status))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.Discounts != null)
                    hashCode = hashCode * 59 + this.Discounts.GetHashCode();
                if (this.Expiration != null)
                    hashCode = hashCode * 59 + this.Expiration.GetHashCode();
                if (this.Fees != null)
                    hashCode = hashCode * 59 + this.Fees.GetHashCode();
                if (this.PlacementOptionId != null)
                    hashCode = hashCode * 59 + this.PlacementOptionId.GetHashCode();
                if (this.ShipmentIds != null)
                    hashCode = hashCode * 59 + this.ShipmentIds.GetHashCode();
                if (this.Status != null)
                    hashCode = hashCode * 59 + this.Status.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            // PlacementOptionId (string) maxLength
            if(this.PlacementOptionId != null && this.PlacementOptionId.Length > 38)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for PlacementOptionId, length must be less than 38.", new [] { "PlacementOptionId" });
            }

            // PlacementOptionId (string) minLength
            if(this.PlacementOptionId != null && this.PlacementOptionId.Length < 38)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for PlacementOptionId, length must be greater than 38.", new [] { "PlacementOptionId" });
            }

            // PlacementOptionId (string) pattern
            Regex regexPlacementOptionId = new Regex(@"^[a-zA-Z0-9-]*$", RegexOptions.CultureInvariant);
            if (false == regexPlacementOptionId.Match(this.PlacementOptionId).Success)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for PlacementOptionId, must match a pattern of " + regexPlacementOptionId, new [] { "PlacementOptionId" });
            }

            yield break;
        }
    }

}
