/* 
 * The Selling Partner API for FBA inbound operations.
 *
 * The Selling Partner API for Fulfillment By Amazon (FBA) Inbound. The FBA Inbound API enables building inbound workflows to create, manage, and send shipments into Amazon's fulfillment network. The API has interoperability with the Send-to-Amazon user interface.
 *
 * OpenAPI spec version: 2024-03-20
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using Newtonsoft.Json;
using System;
using System.Collections.Generic;
using System.ComponentModel.DataAnnotations;
using System.IO;
using System.Linq;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;

namespace FikaAmazonAPI.AmazonSpApiSDK.Models.FulfillmentInboundv20240320
{
    /// <summary>
    /// Packing information for the inbound plan.
    /// </summary>
    [DataContract]
    public partial class PackageGroupingInput :  IEquatable<PackageGroupingInput>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="PackageGroupingInput" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        public PackageGroupingInput() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="PackageGroupingInput" /> class.
        /// </summary>
        /// <param name="boxes">Box level information being provided. (required).</param>
        /// <param name="packingGroupId">The ID of the &#x60;packingGroup&#x60; that packages are grouped according to. The &#x60;PackingGroupId&#x60; can only be provided before placement confirmation, and it must belong to the confirmed &#x60;PackingOption&#x60;. One of &#x60;ShipmentId&#x60; or &#x60;PackingGroupId&#x60; must be provided with every request..</param>
        /// <param name="shipmentId">The ID of the shipment that packages are grouped according to. The &#x60;ShipmentId&#x60; can only be provided after placement confirmation, and the shipment must belong to the confirmed placement option. One of &#x60;ShipmentId&#x60; or &#x60;PackingGroupId&#x60; must be provided with every request..</param>
        public PackageGroupingInput(List<BoxInput> boxes = default(List<BoxInput>),
                                    string packingGroupId = default(string),
                                    string shipmentId = default(string))
        {
            // to ensure "boxes" is required (not null)
            if (boxes == null)
            {
                throw new InvalidDataException("boxes is a required property for PackageGroupingInput and cannot be null");
            }
            else
            {
                this.Boxes = boxes;
            }
            this.PackingGroupId = packingGroupId;
            this.ShipmentId = shipmentId;
        }
        
        /// <summary>
        /// Box level information being provided.
        /// </summary>
        /// <value>Box level information being provided.</value>
        [DataMember(Name="boxes", EmitDefaultValue=false)]
        public List<BoxInput> Boxes { get; set; }

        /// <summary>
        /// The ID of the &#x60;packingGroup&#x60; that packages are grouped according to. The &#x60;PackingGroupId&#x60; can only be provided before placement confirmation, and it must belong to the confirmed &#x60;PackingOption&#x60;. One of &#x60;ShipmentId&#x60; or &#x60;PackingGroupId&#x60; must be provided with every request.
        /// </summary>
        /// <value>The ID of the &#x60;packingGroup&#x60; that packages are grouped according to. The &#x60;PackingGroupId&#x60; can only be provided before placement confirmation, and it must belong to the confirmed &#x60;PackingOption&#x60;. One of &#x60;ShipmentId&#x60; or &#x60;PackingGroupId&#x60; must be provided with every request.</value>
        [DataMember(Name="packingGroupId", EmitDefaultValue=false)]
        public string PackingGroupId { get; set; }

        /// <summary>
        /// The ID of the shipment that packages are grouped according to. The &#x60;ShipmentId&#x60; can only be provided after placement confirmation, and the shipment must belong to the confirmed placement option. One of &#x60;ShipmentId&#x60; or &#x60;PackingGroupId&#x60; must be provided with every request.
        /// </summary>
        /// <value>The ID of the shipment that packages are grouped according to. The &#x60;ShipmentId&#x60; can only be provided after placement confirmation, and the shipment must belong to the confirmed placement option. One of &#x60;ShipmentId&#x60; or &#x60;PackingGroupId&#x60; must be provided with every request.</value>
        [DataMember(Name="shipmentId", EmitDefaultValue=false)]
        public string ShipmentId { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class PackageGroupingInput {\n");
            sb.Append("  Boxes: ").Append(Boxes).Append("\n");
            sb.Append("  PackingGroupId: ").Append(PackingGroupId).Append("\n");
            sb.Append("  ShipmentId: ").Append(ShipmentId).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as PackageGroupingInput);
        }

        /// <summary>
        /// Returns true if PackageGroupingInput instances are equal
        /// </summary>
        /// <param name="input">Instance of PackageGroupingInput to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(PackageGroupingInput input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.Boxes == input.Boxes ||
                    this.Boxes != null &&
                    this.Boxes.SequenceEqual(input.Boxes)
                ) && 
                (
                    this.PackingGroupId == input.PackingGroupId ||
                    (this.PackingGroupId != null &&
                    this.PackingGroupId.Equals(input.PackingGroupId))
                ) && 
                (
                    this.ShipmentId == input.ShipmentId ||
                    (this.ShipmentId != null &&
                    this.ShipmentId.Equals(input.ShipmentId))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.Boxes != null)
                    hashCode = hashCode * 59 + this.Boxes.GetHashCode();
                if (this.PackingGroupId != null)
                    hashCode = hashCode * 59 + this.PackingGroupId.GetHashCode();
                if (this.ShipmentId != null)
                    hashCode = hashCode * 59 + this.ShipmentId.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            // PackingGroupId (string) maxLength
            if(this.PackingGroupId != null && this.PackingGroupId.Length > 38)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for PackingGroupId, length must be less than 38.", new [] { "PackingGroupId" });
            }

            // PackingGroupId (string) minLength
            if(this.PackingGroupId != null && this.PackingGroupId.Length < 38)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for PackingGroupId, length must be greater than 38.", new [] { "PackingGroupId" });
            }

            // PackingGroupId (string) pattern
            Regex regexPackingGroupId = new Regex(@"^[a-zA-Z0-9-]*$", RegexOptions.CultureInvariant);
            if (false == regexPackingGroupId.Match(this.PackingGroupId).Success)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for PackingGroupId, must match a pattern of " + regexPackingGroupId, new [] { "PackingGroupId" });
            }

            // ShipmentId (string) maxLength
            if(this.ShipmentId != null && this.ShipmentId.Length > 38)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for ShipmentId, length must be less than 38.", new [] { "ShipmentId" });
            }

            // ShipmentId (string) minLength
            if(this.ShipmentId != null && this.ShipmentId.Length < 38)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for ShipmentId, length must be greater than 38.", new [] { "ShipmentId" });
            }

            // ShipmentId (string) pattern
            Regex regexShipmentId = new Regex(@"^[a-zA-Z0-9-]*$", RegexOptions.CultureInvariant);
            if (false == regexShipmentId.Match(this.ShipmentId).Success)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for ShipmentId, must match a pattern of " + regexShipmentId, new [] { "ShipmentId" });
            }

            yield break;
        }
    }

}
