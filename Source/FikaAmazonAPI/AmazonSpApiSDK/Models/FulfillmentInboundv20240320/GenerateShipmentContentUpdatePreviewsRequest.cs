/* 
 * The Selling Partner API for FBA inbound operations.
 *
 * The Selling Partner API for Fulfillment By Amazon (FBA) Inbound. The FBA Inbound API enables building inbound workflows to create, manage, and send shipments into Amazon's fulfillment network. The API has interoperability with the Send-to-Amazon user interface.
 *
 * OpenAPI spec version: 2024-03-20
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using Newtonsoft.Json;
using System;
using System.Collections.Generic;
using System.ComponentModel.DataAnnotations;
using System.IO;
using System.Linq;
using System.Runtime.Serialization;
using System.Text;

namespace FikaAmazonAPI.AmazonSpApiSDK.Models.FulfillmentInboundv20240320
{
    /// <summary>
    /// The GenerateShipmentContentUpdatePreviews request.
    /// </summary>
    [DataContract]
    public partial class GenerateShipmentContentUpdatePreviewsRequest :  IEquatable<GenerateShipmentContentUpdatePreviewsRequest>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="GenerateShipmentContentUpdatePreviewsRequest" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        public GenerateShipmentContentUpdatePreviewsRequest() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="GenerateShipmentContentUpdatePreviewsRequest" /> class.
        /// </summary>
        /// <param name="boxes">A list of boxes that will be present in the shipment after the update. (required).</param>
        /// <param name="items">A list of all items that will be present in the shipment after the update. (required).</param>
        public GenerateShipmentContentUpdatePreviewsRequest(List<BoxUpdateInput> boxes = default(List<BoxUpdateInput>), List<ItemInput> items = default(List<ItemInput>))
        {
            // to ensure "boxes" is required (not null)
            if (boxes == null)
            {
                throw new InvalidDataException("boxes is a required property for GenerateShipmentContentUpdatePreviewsRequest and cannot be null");
            }
            else
            {
                this.Boxes = boxes;
            }
            // to ensure "items" is required (not null)
            if (items == null)
            {
                throw new InvalidDataException("items is a required property for GenerateShipmentContentUpdatePreviewsRequest and cannot be null");
            }
            else
            {
                this.Items = items;
            }
        }

        /// <summary>
        /// A list of boxes that will be present in the shipment after the update.
        /// </summary>
        /// <value>A list of boxes that will be present in the shipment after the update.</value>
        [DataMember(Name= "boxes", EmitDefaultValue=false)]
        public List<BoxUpdateInput> Boxes { get; set; }

        /// <summary>
        /// A list of all items that will be present in the shipment after the update.
        /// </summary>
        /// <value>A list of all items that will be present in the shipment after the update.</value>
        [DataMember(Name= "items", EmitDefaultValue=false)]
        public List<ItemInput> Items { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class GenerateShipmentContentUpdatePreviewsRequest {\n");
            sb.Append("  Boxes: ").Append(Boxes).Append("\n");
            sb.Append("  Items: ").Append(Items).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as GenerateShipmentContentUpdatePreviewsRequest);
        }

        /// <summary>
        /// Returns true if GenerateShipmentContentUpdatePreviewsRequest instances are equal
        /// </summary>
        /// <param name="input">Instance of GenerateShipmentContentUpdatePreviewsRequest to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(GenerateShipmentContentUpdatePreviewsRequest input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.Boxes == input.Boxes ||
                    (this.Boxes != null &&
                    this.Boxes.SequenceEqual(input.Boxes))
                ) && 
                (
                    this.Items == input.Items ||
                    (this.Items != null &&
                    this.Items.SequenceEqual(input.Items))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.Boxes != null)
                    hashCode = hashCode * 59 + this.Boxes.GetHashCode();
                if (this.Items != null)
                    hashCode = hashCode * 59 + this.Items.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {

            yield break;
        }
    }

}
