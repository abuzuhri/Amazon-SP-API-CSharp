/* 
 * The Selling Partner API for FBA inbound operations.
 *
 * The Selling Partner API for Fulfillment By Amazon (FBA) Inbound. The FBA Inbound API enables building inbound workflows to create, manage, and send shipments into Amazon's fulfillment network. The API has interoperability with the Send-to-Amazon user interface.
 *
 * OpenAPI spec version: 2024-03-20
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using Newtonsoft.Json;
using System;
using System.Collections.Generic;
using System.ComponentModel.DataAnnotations;
using System.IO;
using System.Linq;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;

namespace FikaAmazonAPI.AmazonSpApiSDK.Models.FulfillmentInboundv20240320
{
    /// <summary>
    /// Contains information pertaining to a shipment in an inbound plan.
    /// </summary>
    [DataContract]
    public partial class Shipment :  IEquatable<Shipment>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="Shipment" /> class.
        /// </summary>
        /// <param name="amazonReferenceId">A unique identifier created by Amazon that identifies this Amazon-partnered, Less Than Truckload/Full Truckload (LTL/FTL) shipment..</param>
        /// <param name="contactInformation">The seller's contact information.</param>
        /// <param name="dates">Specifies the date that the seller expects their shipment will be shipped.</param>
        /// <param name="destination">The Amazon fulfillment center address and warehouse ID. (required).</param>
        /// <param name="freightInformation">Freight information describes the skus being transported. Freight carrier options and quotes will only be returned if the freight information is provided. (required).</param>
        /// <param name="name">The name of the shipment..</param>
        /// <param name="placementOptionId">Identifier to a placement option. A placement option represents the shipment splits and destinations of SKUs. (required).</param>
        /// <param name="selectedDeliveryWindow">Identifier to a placement option. A placement option represents the shipment splits and destinations of SKUs. (required).</param>
        /// <param name="selectedTransportationOptionId">Identifier to a transportation option. A transportation option represent one option for how to send a shipment..</param>
        /// <param name="selfShipAppointmentDetails">List of self ship appointment details..</param>
        /// <param name="shipmentConfirmationId">The confirmed shipment ID which shows up on labels (for example, FBA1234ABCD)..</param>
        /// <param name="shipmentId">Identifier to a shipment. A shipment contains the boxes and units being inbounded. (required).</param>
        /// <param name="source">source (required).</param>
        /// <param name="status">The status of a shipment. The state of the shipment will typically start in UNCONFIRMED, then transition to WORKING after a placement option has been confirmed, and then to READY_TO_SHIP once labels are generated. Can be ABANDONED, CANCELLED, CHECKED_IN, CLOSED, DELETED, DELIVERED, IN_TRANSIT, MIXED, READY_TO_SHIP, RECEIVING, SHIPPED, UNCONFIRMED, or WORKING.</param>
        /// <param name="trackingDetails">Tracking information for Less-Than-Truckload (LTL) and Small Parcel Delivery (SPD) shipments.</param>
        public Shipment(string amazonReferenceId = default(string),
                        ContactInformation contactInformation = default(ContactInformation),
                        Dates dates = default(Dates),
                        ShipmentDestination destination = default(ShipmentDestination),
                        FreightInformation freightInformation = default(FreightInformation),
                        string name = default(string),
                        string placementOptionId = default(string),
                        SelectedDeliveryWindow selectedDeliveryWindow = default(SelectedDeliveryWindow),
                        string selectedTransportationOptionId = default(string),
                        List<SelfShipAppointmentDetails> selfShipAppointmentDetails = default(List<SelfShipAppointmentDetails>),
                        string shipmentConfirmationId = default(string),
                        string shipmentId = default(string),
                        ShipmentSource source = default(ShipmentSource),
                        ShipmentStatus? status = default(ShipmentStatus?),
                        TrackingDetails trackingDetails = default(TrackingDetails))
        {
            // to ensure "destination" is required (not null)
            if (destination == null)
            {
                throw new InvalidDataException("destination is a required property for Shipment and cannot be null");
            }
            else
            {
                this.Destination = destination;
            }
            // to ensure "placementOptionId" is required (not null)
            if (placementOptionId == null)
            {
                throw new InvalidDataException("placementOptionId is a required property for Shipment and cannot be null");
            }
            else
            {
                this.PlacementOptionId = placementOptionId;
            }
            // to ensure "shipmentId" is required (not null)
            if (shipmentId == null)
            {
                throw new InvalidDataException("shipmentId is a required property for Shipment and cannot be null");
            }
            else
            {
                this.ShipmentId = shipmentId;
            }
            // to ensure "source" is required (not null)
            if (source == null)
            {
                throw new InvalidDataException("source is a required property for Shipment and cannot be null");
            }
            else
            {
                this.Source = source;
            }
            this.AmazonReferenceId = amazonReferenceId;
            this.ContactInformation = contactInformation;
            this.Dates = dates;
            this.FreightInformation = freightInformation;
            this.Name = name;
            this.SelectedDeliveryWindow = selectedDeliveryWindow;
            this.SelectedTransportationOptionId = selectedTransportationOptionId;
            this.SelfShipAppointmentDetails = selfShipAppointmentDetails;
            this.ShipmentConfirmationId = shipmentConfirmationId;
            this.Status = status;
            this.TrackingDetails = trackingDetails;
        }
        public Shipment()
        {
            this.AmazonReferenceId = default(string);
            this.ContactInformation = default(ContactInformation);
            this.Dates = default(Dates);
            this.Destination = default(ShipmentDestination);
            this.FreightInformation = default(FreightInformation);
            this.Name = default(string);
            this.PlacementOptionId = default(string);
            this.SelectedDeliveryWindow = default(SelectedDeliveryWindow);
            this.SelectedTransportationOptionId = default(string);
            this.SelfShipAppointmentDetails = default(List<SelfShipAppointmentDetails>);
            this.ShipmentConfirmationId = default(string);
            this.ShipmentId = default(string);
            this.Source = default(ShipmentSource);
            this.Status = default(ShipmentStatus?);
            this.TrackingDetails = default(TrackingDetails);
        }

        /// <summary>
        /// A unique identifier created by Amazon that identifies this Amazon-partnered, Less Than Truckload/Full Truckload (LTL/FTL) shipment.
        /// </summary>
        /// <value>A unique identifier created by Amazon that identifies this Amazon-partnered, Less Than Truckload/Full Truckload (LTL/FTL) shipment.</value>
        [DataMember(Name="amazonReferenceId", EmitDefaultValue=false)]
        public string AmazonReferenceId { get; set; }

        /// <summary>
        /// Gets or Sets ContactInformation
        /// </summary>
        [DataMember(Name="contactInformation", EmitDefaultValue=false)]
        public ContactInformation ContactInformation { get; set; }

        /// <summary>
        /// Gets or Sets Dates
        /// </summary>
        [DataMember(Name="dates", EmitDefaultValue=false)]
        public Dates Dates { get; set; }

        /// <summary>
        /// Gets or Sets Destination
        /// </summary>
        [DataMember(Name="destination", EmitDefaultValue=false)]
        public ShipmentDestination Destination { get; set; }

        /// <summary>
        /// Freight information describes the skus being transported. Freight carrier options and quotes will only be returned if the freight information is provided.
        /// </summary>
        /// <value>Freight information describes the skus being transported. Freight carrier options and quotes will only be returned if the freight information is provided.</value>
        [DataMember(Name= "freightInformation", EmitDefaultValue=false)]
        public FreightInformation FreightInformation { get; set; }

        /// <summary>
        /// The name of the shipment.
        /// </summary>
        /// <value>The name of the shipment.</value>
        [DataMember(Name="name", EmitDefaultValue=false)]
        public string Name { get; set; }

        /// <summary>
        /// Identifier to a placement option. A placement option represents the shipment splits and destinations of SKUs.
        /// </summary>
        /// <value>Identifier to a placement option. A placement option represents the shipment splits and destinations of SKUs.</value>
        [DataMember(Name="placementOptionId", EmitDefaultValue=false)]
        public string PlacementOptionId { get; set; }

        /// <summary>
        /// Selected delivery window attributes.	
        /// </summary>
        /// <value>Selected delivery window attributes.	</value>
        [DataMember(Name = "selectedDeliveryWindow", EmitDefaultValue = false)]
        public SelectedDeliveryWindow SelectedDeliveryWindow { get; set; }

        /// <summary>
        /// Identifier to a transportation option. A transportation option represent one option for how to send a shipment.
        /// </summary>
        /// <value>Identifier to a transportation option. A transportation option represent one option for how to send a shipment.</value>
        [DataMember(Name="selectedTransportationOptionId", EmitDefaultValue=false)]
        public string SelectedTransportationOptionId { get; set; }

        /// <summary>
        /// List of self ship appointment details.
        /// </summary>
        /// <value>List of self ship appointment details.</value>
        [DataMember(Name="selfShipAppointmentDetails", EmitDefaultValue=false)]
        public List<SelfShipAppointmentDetails> SelfShipAppointmentDetails { get; set; }

        /// <summary>
        /// The confirmed shipment ID which shows up on labels (for example, FBA1234ABCD).
        /// </summary>
        /// <value>The confirmed shipment ID which shows up on labels (for example, FBA1234ABCD).</value>
        [DataMember(Name="shipmentConfirmationId", EmitDefaultValue=false)]
        public string ShipmentConfirmationId { get; set; }

        /// <summary>
        /// Identifier to a shipment. A shipment contains the boxes and units being inbounded.
        /// </summary>
        /// <value>Identifier to a shipment. A shipment contains the boxes and units being inbounded.</value>
        [DataMember(Name="shipmentId", EmitDefaultValue=false)]
        public string ShipmentId { get; set; }

        /// <summary>
        /// Gets or Sets Source
        /// </summary>
        [DataMember(Name="source", EmitDefaultValue=false)]
        public ShipmentSource Source { get; set; }

        /// <summary>
        /// The status of a shipment. The state of the shipment will typically start in UNCONFIRMED, then transition to WORKING after a placement option has been confirmed, and then to READY_TO_SHIP once labels are generated. Can be ABANDONED, CANCELLED, CHECKED_IN, CLOSED, DELETED, DELIVERED, IN_TRANSIT, MIXED, READY_TO_SHIP, RECEIVING, SHIPPED, UNCONFIRMED, or WORKING.
        /// </summary>
        /// <value>The status of a shipment. The state of the shipment will typically start in UNCONFIRMED, then transition to WORKING after a placement option has been confirmed, and then to READY_TO_SHIP once labels are generated. Can be ABANDONED, CANCELLED, CHECKED_IN, CLOSED, DELETED, DELIVERED, IN_TRANSIT, MIXED, READY_TO_SHIP, RECEIVING, SHIPPED, UNCONFIRMED, or WORKING.</value>
        [DataMember(Name="status", EmitDefaultValue=false)]
        public ShipmentStatus? Status { get; set; }

        /// <summary>
        /// Gets or Sets TrackingDetails
        /// </summary>
        [DataMember(Name="trackingDetails", EmitDefaultValue=false)]
        public TrackingDetails TrackingDetails { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class Shipment {\n");
            sb.Append("  AmazonReferenceId: ").Append(AmazonReferenceId).Append("\n");
            sb.Append("  ContactInformation: ").Append(ContactInformation).Append("\n");
            sb.Append("  Dates: ").Append(Dates).Append("\n");
            sb.Append("  Destination: ").Append(Destination).Append("\n");
            sb.Append("  FreightInformation: ").Append(FreightInformation).Append("\n");
            sb.Append("  Name: ").Append(Name).Append("\n");
            sb.Append("  PlacementOptionId: ").Append(PlacementOptionId).Append("\n");
            sb.Append("  SelectedDeliveryWindow: ").Append(SelectedDeliveryWindow).Append("\n");
            sb.Append("  SelectedTransportationOptionId: ").Append(SelectedTransportationOptionId).Append("\n");
            sb.Append("  SelfShipAppointmentDetails: ").Append(SelfShipAppointmentDetails).Append("\n");
            sb.Append("  ShipmentConfirmationId: ").Append(ShipmentConfirmationId).Append("\n");
            sb.Append("  ShipmentId: ").Append(ShipmentId).Append("\n");
            sb.Append("  Source: ").Append(Source).Append("\n");
            sb.Append("  Status: ").Append(Status).Append("\n");
            sb.Append("  TrackingDetails: ").Append(TrackingDetails).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as Shipment);
        }

        /// <summary>
        /// Returns true if Shipment instances are equal
        /// </summary>
        /// <param name="input">Instance of Shipment to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(Shipment input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.AmazonReferenceId == input.AmazonReferenceId ||
                    (this.AmazonReferenceId != null &&
                    this.AmazonReferenceId.Equals(input.AmazonReferenceId))
                ) && 
                (
                    this.ContactInformation == input.ContactInformation ||
                    (this.ContactInformation != null &&
                    this.ContactInformation.Equals(input.ContactInformation))
                ) && 
                (
                    this.Dates == input.Dates ||
                    (this.Dates != null &&
                    this.Dates.Equals(input.Dates))
                ) && 
                (
                    this.Destination == input.Destination ||
                    (this.Destination != null &&
                    this.Destination.Equals(input.Destination))
                ) && 
                (
                    this.FreightInformation == input.FreightInformation ||
                    (this.FreightInformation != null &&
                    this.FreightInformation.Equals(input.FreightInformation))
                ) && 
                (
                    this.Name == input.Name ||
                    (this.Name != null &&
                    this.Name.Equals(input.Name))
                ) && 
                (
                    this.PlacementOptionId == input.PlacementOptionId ||
                    (this.PlacementOptionId != null &&
                    this.PlacementOptionId.Equals(input.PlacementOptionId))
                ) &&
                (
                    this.SelectedDeliveryWindow == input.SelectedDeliveryWindow ||
                    (this.SelectedDeliveryWindow != null &&
                    this.SelectedDeliveryWindow.Equals(input.SelectedDeliveryWindow))
                ) &&
                (
                    this.SelectedTransportationOptionId == input.SelectedTransportationOptionId ||
                    (this.SelectedTransportationOptionId != null &&
                    this.SelectedTransportationOptionId.Equals(input.SelectedTransportationOptionId))
                ) && 
                (
                    this.SelfShipAppointmentDetails == input.SelfShipAppointmentDetails ||
                    this.SelfShipAppointmentDetails != null &&
                    this.SelfShipAppointmentDetails.SequenceEqual(input.SelfShipAppointmentDetails)
                ) && 
                (
                    this.ShipmentConfirmationId == input.ShipmentConfirmationId ||
                    (this.ShipmentConfirmationId != null &&
                    this.ShipmentConfirmationId.Equals(input.ShipmentConfirmationId))
                ) && 
                (
                    this.ShipmentId == input.ShipmentId ||
                    (this.ShipmentId != null &&
                    this.ShipmentId.Equals(input.ShipmentId))
                ) && 
                (
                    this.Source == input.Source ||
                    (this.Source != null &&
                    this.Source.Equals(input.Source))
                ) && 
                (
                    this.Status == input.Status ||
                    (this.Status != null &&
                    this.Status.Equals(input.Status))
                ) && 
                (
                    this.TrackingDetails == input.TrackingDetails ||
                    (this.TrackingDetails != null &&
                    this.TrackingDetails.Equals(input.TrackingDetails))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.AmazonReferenceId != null)
                    hashCode = hashCode * 59 + this.AmazonReferenceId.GetHashCode();
                if (this.ContactInformation != null)
                    hashCode = hashCode * 59 + this.ContactInformation.GetHashCode();
                if (this.Dates != null)
                    hashCode = hashCode * 59 + this.Dates.GetHashCode();
                if (this.Destination != null)
                    hashCode = hashCode * 59 + this.Destination.GetHashCode();
                if (this.FreightInformation != null)
                    hashCode = hashCode * 59 + this.FreightInformation.GetHashCode();
                if (this.Name != null)
                    hashCode = hashCode * 59 + this.Name.GetHashCode();
                if (this.PlacementOptionId != null)
                    hashCode = hashCode * 59 + this.PlacementOptionId.GetHashCode();
                if (this.SelectedDeliveryWindow != null)
                    hashCode = hashCode * 59 + this.SelectedDeliveryWindow.GetHashCode();
                if (this.SelectedTransportationOptionId != null)
                    hashCode = hashCode * 59 + this.SelectedTransportationOptionId.GetHashCode();
                if (this.SelfShipAppointmentDetails != null)
                    hashCode = hashCode * 59 + this.SelfShipAppointmentDetails.GetHashCode();
                if (this.ShipmentConfirmationId != null)
                    hashCode = hashCode * 59 + this.ShipmentConfirmationId.GetHashCode();
                if (this.ShipmentId != null)
                    hashCode = hashCode * 59 + this.ShipmentId.GetHashCode();
                if (this.Source != null)
                    hashCode = hashCode * 59 + this.Source.GetHashCode();
                if (this.Status != null)
                    hashCode = hashCode * 59 + this.Status.GetHashCode();
                if (this.TrackingDetails != null)
                    hashCode = hashCode * 59 + this.TrackingDetails.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            // AmazonReferenceId (string) maxLength
            if(this.AmazonReferenceId != null && this.AmazonReferenceId.Length > 1024)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for AmazonReferenceId, length must be less than 1024.", new [] { "AmazonReferenceId" });
            }

            // AmazonReferenceId (string) minLength
            if(this.AmazonReferenceId != null && this.AmazonReferenceId.Length < 1)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for AmazonReferenceId, length must be greater than 1.", new [] { "AmazonReferenceId" });
            }

            // PlacementOptionId (string) maxLength
            if(this.PlacementOptionId != null && this.PlacementOptionId.Length > 38)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for PlacementOptionId, length must be less than 38.", new [] { "PlacementOptionId" });
            }

            // PlacementOptionId (string) minLength
            if(this.PlacementOptionId != null && this.PlacementOptionId.Length < 38)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for PlacementOptionId, length must be greater than 38.", new [] { "PlacementOptionId" });
            }

            // PlacementOptionId (string) pattern
            Regex regexPlacementOptionId = new Regex(@"^[a-zA-Z0-9-]*$", RegexOptions.CultureInvariant);
            if (false == regexPlacementOptionId.Match(this.PlacementOptionId).Success)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for PlacementOptionId, must match a pattern of " + regexPlacementOptionId, new [] { "PlacementOptionId" });
            }

            // SelectedTransportationOptionId (string) maxLength
            if(this.SelectedTransportationOptionId != null && this.SelectedTransportationOptionId.Length > 38)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for SelectedTransportationOptionId, length must be less than 38.", new [] { "SelectedTransportationOptionId" });
            }

            // SelectedTransportationOptionId (string) minLength
            if(this.SelectedTransportationOptionId != null && this.SelectedTransportationOptionId.Length < 38)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for SelectedTransportationOptionId, length must be greater than 38.", new [] { "SelectedTransportationOptionId" });
            }

            // SelectedTransportationOptionId (string) pattern
            Regex regexSelectedTransportationOptionId = new Regex(@"^[a-zA-Z0-9-]*$", RegexOptions.CultureInvariant);
            if (false == regexSelectedTransportationOptionId.Match(this.SelectedTransportationOptionId).Success)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for SelectedTransportationOptionId, must match a pattern of " + regexSelectedTransportationOptionId, new [] { "SelectedTransportationOptionId" });
            }

            // ShipmentConfirmationId (string) maxLength
            if(this.ShipmentConfirmationId != null && this.ShipmentConfirmationId.Length > 1024)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for ShipmentConfirmationId, length must be less than 1024.", new [] { "ShipmentConfirmationId" });
            }

            // ShipmentConfirmationId (string) minLength
            if(this.ShipmentConfirmationId != null && this.ShipmentConfirmationId.Length < 1)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for ShipmentConfirmationId, length must be greater than 1.", new [] { "ShipmentConfirmationId" });
            }

            // ShipmentId (string) maxLength
            if(this.ShipmentId != null && this.ShipmentId.Length > 38)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for ShipmentId, length must be less than 38.", new [] { "ShipmentId" });
            }

            // ShipmentId (string) minLength
            if(this.ShipmentId != null && this.ShipmentId.Length < 38)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for ShipmentId, length must be greater than 38.", new [] { "ShipmentId" });
            }

            // ShipmentId (string) pattern
            Regex regexShipmentId = new Regex(@"^[a-zA-Z0-9-]*$", RegexOptions.CultureInvariant);
            if (false == regexShipmentId.Match(this.ShipmentId).Success)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for ShipmentId, must match a pattern of " + regexShipmentId, new [] { "ShipmentId" });
            }

            yield break;
        }
    }

}
