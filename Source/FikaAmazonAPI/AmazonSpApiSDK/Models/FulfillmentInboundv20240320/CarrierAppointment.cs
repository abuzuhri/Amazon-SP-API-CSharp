/* 
 * The Selling Partner API for FBA inbound operations.
 *
 * The Selling Partner API for Fulfillment By Amazon (FBA) Inbound. The FBA Inbound API enables building inbound workflows to create, manage, and send shipments into Amazon's fulfillment network. The API has interoperability with the Send-to-Amazon user interface.
 *
 * OpenAPI spec version: 2024-03-20
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using Newtonsoft.Json;
using System;
using System.Collections.Generic;
using System.ComponentModel.DataAnnotations;
using System.IO;
using System.Runtime.Serialization;
using System.Text;

namespace FikaAmazonAPI.AmazonSpApiSDK.Models.FulfillmentInboundv20240320
{
    /// <summary>
    /// Contains details for a transportation carrier appointment. This appointment is vended out by Amazon and is an indicator for when a transportation carrier is accepting shipments to be picked up.
    /// </summary>
    [DataContract]
    public partial class CarrierAppointment :  IEquatable<CarrierAppointment>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="CarrierAppointment" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        public CarrierAppointment() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="CarrierAppointment" /> class.
        /// </summary>
        /// <param name="endTime">The end timestamp of the appointment in UTC. (required).</param>
        /// <param name="startTime">The start timestamp of the appointment in UTC. (required).</param>
        public CarrierAppointment(DateTime? endTime = default(DateTime?), DateTime? startTime = default(DateTime?))
        {
            // to ensure "endTime" is required (not null)
            if (endTime == null)
            {
                throw new InvalidDataException("endTime is a required property for CarrierAppointment and cannot be null");
            }
            else
            {
                this.EndTime = endTime;
            }
            // to ensure "startTime" is required (not null)
            if (startTime == null)
            {
                throw new InvalidDataException("startTime is a required property for CarrierAppointment and cannot be null");
            }
            else
            {
                this.StartTime = startTime;
            }
        }
        
        /// <summary>
        /// The end timestamp of the appointment in UTC.
        /// </summary>
        /// <value>The end timestamp of the appointment in UTC.</value>
        [DataMember(Name="endTime", EmitDefaultValue=false)]
        public DateTime? EndTime { get; set; }

        /// <summary>
        /// The start timestamp of the appointment in UTC.
        /// </summary>
        /// <value>The start timestamp of the appointment in UTC.</value>
        [DataMember(Name="startTime", EmitDefaultValue=false)]
        public DateTime? StartTime { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class CarrierAppointment {\n");
            sb.Append("  EndTime: ").Append(EndTime).Append("\n");
            sb.Append("  StartTime: ").Append(StartTime).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as CarrierAppointment);
        }

        /// <summary>
        /// Returns true if CarrierAppointment instances are equal
        /// </summary>
        /// <param name="input">Instance of CarrierAppointment to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(CarrierAppointment input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.EndTime == input.EndTime ||
                    (this.EndTime != null &&
                    this.EndTime.Equals(input.EndTime))
                ) && 
                (
                    this.StartTime == input.StartTime ||
                    (this.StartTime != null &&
                    this.StartTime.Equals(input.StartTime))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.EndTime != null)
                    hashCode = hashCode * 59 + this.EndTime.GetHashCode();
                if (this.StartTime != null)
                    hashCode = hashCode * 59 + this.StartTime.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
