/* 
 * The Selling Partner API for FBA inbound operations.
 *
 * The Selling Partner API for Fulfillment By Amazon (FBA) Inbound. The FBA Inbound API enables building inbound workflows to create, manage, and send shipments into Amazon's fulfillment network. The API has interoperability with the Send-to-Amazon user interface.
 *
 * OpenAPI spec version: 2024-03-20
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using Newtonsoft.Json;
using System;
using System.Collections.Generic;
using System.ComponentModel.DataAnnotations;
using System.Linq;
using System.Runtime.Serialization;
using System.Text;

namespace FikaAmazonAPI.AmazonSpApiSDK.Models.FulfillmentInboundv20240320
{
    /// <summary>
    /// The self ship appointment time slots availability and an expiration date for which the slots can be scheduled.
    /// </summary>
    [DataContract]
    public partial class SelfShipAppointmentSlotsAvailability :  IEquatable<SelfShipAppointmentSlotsAvailability>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="SelfShipAppointmentSlotsAvailability" /> class.
        /// </summary>
        /// <param name="expiresAt">ISO 8601 datetime with pattern &#x60;yyyy-MM-ddTHH:mm:ss.sssZ&#x60;..</param>
        /// <param name="slots">List of appointment slots..</param>
        public SelfShipAppointmentSlotsAvailability(DateTime? expiresAt = default(DateTime?), List<AppointmentSlot> slots = default(List<AppointmentSlot>))
        {
            this.ExpiresAt = expiresAt;
            this.Slots = slots;
        }
        
        /// <summary>
        /// ISO 8601 datetime with pattern &#x60;yyyy-MM-ddTHH:mm:ss.sssZ&#x60;.
        /// </summary>
        /// <value>ISO 8601 datetime with pattern &#x60;yyyy-MM-ddTHH:mm:ss.sssZ&#x60;.</value>
        [DataMember(Name="expiresAt", EmitDefaultValue=false)]
        public DateTime? ExpiresAt { get; set; }

        /// <summary>
        /// List of appointment slots.
        /// </summary>
        /// <value>List of appointment slots.</value>
        [DataMember(Name="slots", EmitDefaultValue=false)]
        public List<AppointmentSlot> Slots { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class SelfShipAppointmentSlotsAvailability {\n");
            sb.Append("  ExpiresAt: ").Append(ExpiresAt).Append("\n");
            sb.Append("  Slots: ").Append(Slots).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as SelfShipAppointmentSlotsAvailability);
        }

        /// <summary>
        /// Returns true if SelfShipAppointmentSlotsAvailability instances are equal
        /// </summary>
        /// <param name="input">Instance of SelfShipAppointmentSlotsAvailability to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(SelfShipAppointmentSlotsAvailability input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.ExpiresAt == input.ExpiresAt ||
                    (this.ExpiresAt != null &&
                    this.ExpiresAt.Equals(input.ExpiresAt))
                ) && 
                (
                    this.Slots == input.Slots ||
                    this.Slots != null &&
                    this.Slots.SequenceEqual(input.Slots)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.ExpiresAt != null)
                    hashCode = hashCode * 59 + this.ExpiresAt.GetHashCode();
                if (this.Slots != null)
                    hashCode = hashCode * 59 + this.Slots.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
