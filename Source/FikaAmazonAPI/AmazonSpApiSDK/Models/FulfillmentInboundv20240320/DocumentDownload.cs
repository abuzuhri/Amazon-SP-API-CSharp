/* 
 * The Selling Partner API for FBA inbound operations.
 *
 * The Selling Partner API for Fulfillment By Amazon (FBA) Inbound. The FBA Inbound API enables building inbound workflows to create, manage, and send shipments into Amazon's fulfillment network. The API has interoperability with the Send-to-Amazon user interface.
 *
 * OpenAPI spec version: 2024-03-20
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using Newtonsoft.Json;
using System;
using System.Collections.Generic;
using System.ComponentModel.DataAnnotations;
using System.IO;
using System.Runtime.Serialization;
using System.Text;

namespace FikaAmazonAPI.AmazonSpApiSDK.Models.FulfillmentInboundv20240320
{
    /// <summary>
    /// Resource to download the requested document.
    /// </summary>
    [DataContract]
    public partial class DocumentDownload :  IEquatable<DocumentDownload>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="DocumentDownload" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        public DocumentDownload() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="DocumentDownload" /> class.
        /// </summary>
        /// <param name="downloadType">The type of download. Can be URL. (required).</param>
        /// <param name="expiration">The timestamp of expiration of the URI. This is in ISO 8601 datetime format with pattern &#x60;yyyy-MM-ddTHH:mm:ss.sssZ&#x60;..</param>
        /// <param name="uri">Uniform resource identifier to identify where the document is located. (required).</param>
        public DocumentDownload(DownloadType downloadType = default(DownloadType), DateTime? expiration = default(DateTime?), string uri = default(string))
        {
            // to ensure "downloadType" is required (not null)
            if (downloadType == null)
            {
                throw new InvalidDataException("downloadType is a required property for DocumentDownload and cannot be null");
            }
            else
            {
                this.DownloadType = downloadType;
            }
            // to ensure "uri" is required (not null)
            if (uri == null)
            {
                throw new InvalidDataException("uri is a required property for DocumentDownload and cannot be null");
            }
            else
            {
                this.Uri = uri;
            }
            this.Expiration = expiration;
        }

        /// <summary>
        /// The type of download. Can be URL.
        /// </summary>
        /// <value>The type of download. Can be URL.</value>
        [DataMember(Name="downloadType", EmitDefaultValue=false)]
        public DownloadType DownloadType { get; set; }

        /// <summary>
        /// The timestamp of expiration of the URI. This is in ISO 8601 datetime format with pattern &#x60;yyyy-MM-ddTHH:mm:ss.sssZ&#x60;.
        /// </summary>
        /// <value>The timestamp of expiration of the URI. This is in ISO 8601 datetime format with pattern &#x60;yyyy-MM-ddTHH:mm:ss.sssZ&#x60;.</value>
        [DataMember(Name="expiration", EmitDefaultValue=false)]
        public DateTime? Expiration { get; set; }

        /// <summary>
        /// Uniform resource identifier to identify where the document is located.
        /// </summary>
        /// <value>Uniform resource identifier to identify where the document is located.</value>
        [DataMember(Name="uri", EmitDefaultValue=false)]
        public string Uri { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class DocumentDownload {\n");
            sb.Append("  DownloadType: ").Append(DownloadType).Append("\n");
            sb.Append("  Expiration: ").Append(Expiration).Append("\n");
            sb.Append("  Uri: ").Append(Uri).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as DocumentDownload);
        }

        /// <summary>
        /// Returns true if DocumentDownload instances are equal
        /// </summary>
        /// <param name="input">Instance of DocumentDownload to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(DocumentDownload input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.DownloadType == input.DownloadType ||
                    (this.DownloadType != null &&
                    this.DownloadType.Equals(input.DownloadType))
                ) && 
                (
                    this.Expiration == input.Expiration ||
                    (this.Expiration != null &&
                    this.Expiration.Equals(input.Expiration))
                ) && 
                (
                    this.Uri == input.Uri ||
                    (this.Uri != null &&
                    this.Uri.Equals(input.Uri))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.DownloadType != null)
                    hashCode = hashCode * 59 + this.DownloadType.GetHashCode();
                if (this.Expiration != null)
                    hashCode = hashCode * 59 + this.Expiration.GetHashCode();
                if (this.Uri != null)
                    hashCode = hashCode * 59 + this.Uri.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
