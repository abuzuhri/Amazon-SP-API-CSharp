/* 
 * The Selling Partner API for FBA inbound operations.
 *
 * The Selling Partner API for Fulfillment By Amazon (FBA) Inbound. The FBA Inbound API enables building inbound workflows to create, manage, and send shipments into Amazon's fulfillment network. The API has interoperability with the Send-to-Amazon user interface.
 *
 * OpenAPI spec version: 2024-03-20
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using Newtonsoft.Json;
using System;
using System.Collections.Generic;
using System.ComponentModel.DataAnnotations;
using System.IO;
using System.Runtime.Serialization;
using System.Text;

namespace FikaAmazonAPI.AmazonSpApiSDK.Models.FulfillmentInboundv20240320
{
    /// <summary>
    /// Contains input information about a pallet to be used in the inbound plan.
    /// </summary>
    [DataContract]
    public partial class PalletInput :  IEquatable<PalletInput>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="PalletInput" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        public PalletInput() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="PalletInput" /> class.
        /// </summary>
        /// <param name="dimensions">Measurement of a package dimensions.</param>
        /// <param name="quantity">The number of containers where all other properties like weight or dimensions are identical. (required).</param>
        /// <param name="stackability">Indicates whether pallets will be stacked when carrier arrives for pick-up.</param>
        /// <param name="weight">The weight of a package.</param>
        public PalletInput(Dimensions dimensions = default(Dimensions), int? quantity = default(int?), Stackability? stackability = default(Stackability?), Weight weight = default(Weight))
        {
            // to ensure "quantity" is required (not null)
            if (quantity == null)
            {
                throw new InvalidDataException("quantity is a required property for PalletInput and cannot be null");
            }
            else
            {
                this.Quantity = quantity;
            }
            this.Dimensions = dimensions;
            this.Stackability = stackability;
            this.Weight = weight;
        }

        /// <summary>
        /// Measurement of a package dimensions.
        /// </summary>
        [DataMember(Name="dimensions", EmitDefaultValue=false)]
        public Dimensions Dimensions { get; set; }

        /// <summary>
        /// Indicates whether pallets will be stacked when carrier arrives for pick-up.
        /// </summary>
        [DataMember(Name = "stackability", EmitDefaultValue = false)]
        public Stackability? Stackability { get; set; }

        /// <summary>
        /// The number of containers where all other properties like weight or dimensions are identical.
        /// </summary>
        /// <value>The number of containers where all other properties like weight or dimensions are identical.</value>
        [DataMember(Name="quantity", EmitDefaultValue=false)]
        public int? Quantity { get; set; }


        /// <summary>
        /// The weight of a package.
        /// </summary>
        [DataMember(Name="weight", EmitDefaultValue=false)]
        public Weight Weight { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class PalletInput {\n");
            sb.Append("  Dimensions: ").Append(Dimensions).Append("\n");
            sb.Append("  Quantity: ").Append(Quantity).Append("\n");
            sb.Append("  Stackability: ").Append(Stackability).Append("\n");
            sb.Append("  Weight: ").Append(Weight).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as PalletInput);
        }

        /// <summary>
        /// Returns true if PalletInput instances are equal
        /// </summary>
        /// <param name="input">Instance of PalletInput to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(PalletInput input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.Dimensions == input.Dimensions ||
                    (this.Dimensions != null &&
                    this.Dimensions.Equals(input.Dimensions))
                ) && 
                (
                    this.Quantity == input.Quantity ||
                    (this.Quantity != null &&
                    this.Quantity.Equals(input.Quantity))
                ) && 
                (
                    this.Stackability == input.Stackability ||
                    (this.Stackability != null &&
                    this.Stackability.Equals(input.Stackability))
                ) && 
                (
                    this.Weight == input.Weight ||
                    (this.Weight != null &&
                    this.Weight.Equals(input.Weight))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.Dimensions != null)
                    hashCode = hashCode * 59 + this.Dimensions.GetHashCode();
                if (this.Quantity != null)
                    hashCode = hashCode * 59 + this.Quantity.GetHashCode();
                if (this.Stackability != null)
                    hashCode = hashCode * 59 + this.Stackability.GetHashCode();
                if (this.Weight != null)
                    hashCode = hashCode * 59 + this.Weight.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            // Quantity (int?) maximum
            if(this.Quantity > (int?)10000)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for Quantity, must be a value less than or equal to 10000.", new [] { "Quantity" });
            }

            // Quantity (int?) minimum
            if(this.Quantity < (int?)1)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for Quantity, must be a value greater than or equal to 1.", new [] { "Quantity" });
            }

            yield break;
        }
    }

}
