/* 
 * The Selling Partner API for FBA inbound operations.
 *
 * The Selling Partner API for Fulfillment By Amazon (FBA) Inbound. The FBA Inbound API enables building inbound workflows to create, manage, and send shipments into Amazon's fulfillment network. The API has interoperability with the Send-to-Amazon user interface.
 *
 * OpenAPI spec version: 2024-03-20
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using Newtonsoft.Json;
using System;
using System.Collections.Generic;
using System.ComponentModel.DataAnnotations;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;

namespace FikaAmazonAPI.AmazonSpApiSDK.Models.FulfillmentInboundv20240320
{
    /// <summary>
    /// Contains information pertaining to a transportation option and the related carrier.
    /// </summary>
    [DataContract]
    public partial class TransportationOption :  IEquatable<TransportationOption>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="TransportationOption" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        public TransportationOption() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="TransportationOption" /> class.
        /// </summary>
        /// <param name="carrier">The carrier for the inbound shipment. (required).</param>
        /// <param name="carrierAppointment">Contains details for a transportation carrier appointment. This appointment is vended out by Amazon and is an indicator for when a transportation carrier is accepting shipments to be picked up.</param>
        /// <param name="preconditions">Identifies a list of preconditions for confirming the transportation option. (required).</param>
        /// <param name="quote">The estimated shipping cost associated with the transportation option.</param>
        /// <param name="shipmentId">Identifier to a shipment. A shipment contains the boxes and units being inbounded. (required).</param>
        /// <param name="shippingMode">Mode of shipment transportation that this option will provide. Can be: GROUND_SMALL_PARCEL, FREIGHT_LTL, FREIGHT_FTL_PALLET, FREIGHT_FTL_NONPALLET, OCEAN_LCL, OCEAN_FCL, AIR_SMALL_PARCEL, AIR_SMALL_PARCEL_EXPRESS. (required).</param>
        /// <param name="shippingSolution">Shipping program for the option. Can be: AMAZON_PARTNERED_CARRIER, USE_YOUR_OWN_CARRIER. (required).</param>
        /// <param name="transportationOptionId">Identifier to a transportation option. A transportation option represent one option for how to send a shipment. (required).</param>
        public TransportationOption(Carrier carrier = default(Carrier),
                                    CarrierAppointment carrierAppointment = default(CarrierAppointment),
                                    List<string> preconditions = default(List<string>),
                                    Quote quote = default(Quote),
                                    string shipmentId = default(string),
                                    ShippingMode shippingMode = default(ShippingMode),
                                    ShippingSolution shippingSolution = default(ShippingSolution),
                                    string transportationOptionId = default(string))
        {
            // to ensure "carrier" is required (not null)
            if (carrier == null)
            {
                throw new InvalidDataException("carrier is a required property for TransportationOption and cannot be null");
            }
            else
            {
                this.Carrier = carrier;
            }
            // to ensure "preconditions" is required (not null)
            if (preconditions == null)
            {
                throw new InvalidDataException("preconditions is a required property for TransportationOption and cannot be null");
            }
            else
            {
                this.Preconditions = preconditions;
            }
            // to ensure "shipmentId" is required (not null)
            if (shipmentId == null)
            {
                throw new InvalidDataException("shipmentId is a required property for TransportationOption and cannot be null");
            }
            else
            {
                this.ShipmentId = shipmentId;
            }
            // to ensure "shippingMode" is required (not null)
            if (shippingMode == null)
            {
                throw new InvalidDataException("shippingMode is a required property for TransportationOption and cannot be null");
            }
            else
            {
                this.ShippingMode = shippingMode;
            }
            // to ensure "shippingSolution" is required (not null)
            if (shippingSolution == null)
            {
                throw new InvalidDataException("shippingSolution is a required property for TransportationOption and cannot be null");
            }
            else
            {
                this.ShippingSolution = shippingSolution;
            }
            // to ensure "transportationOptionId" is required (not null)
            if (transportationOptionId == null)
            {
                throw new InvalidDataException("transportationOptionId is a required property for TransportationOption and cannot be null");
            }
            else
            {
                this.TransportationOptionId = transportationOptionId;
            }
            this.CarrierAppointment = carrierAppointment;
            this.Quote = quote;
        }


        /// <summary>
        /// The carrier for the inbound shipment.
        /// </summary>
        [DataMember(Name="carrier", EmitDefaultValue=false)]
        public Carrier Carrier { get; set; }

        /// <summary>
        /// Contains details for a transportation carrier appointment. This appointment is vended out by Amazon and is an indicator for when a transportation carrier is accepting shipments to be picked up.
        /// </summary>
        [DataMember(Name = "carrierAppointment", EmitDefaultValue = false)]
        public CarrierAppointment CarrierAppointment { get; set; }

        /// <summary>
        /// Identifies a list of preconditions for confirming the transportation option.
        /// </summary>
        [DataMember(Name = "preconditions", EmitDefaultValue = false)]
        public List<string> Preconditions { get; set; }

        /// <summary>
        /// The estimated shipping cost associated with the transportation option.
        /// </summary>
        [DataMember(Name="quote", EmitDefaultValue=false)]
        public Quote Quote { get; set; }

        /// <summary>
        /// Identifier to a shipment. A shipment contains the boxes and units being inbounded.
        /// </summary>
        /// <value>Identifier to a shipment. A shipment contains the boxes and units being inbounded.</value>
        [DataMember(Name="shipmentId", EmitDefaultValue=false)]
        public string ShipmentId { get; set; }

        /// <summary>
        /// Mode of shipment transportation that this option will provide. Can be: GROUND_SMALL_PARCEL, FREIGHT_LTL, FREIGHT_FTL_PALLET, FREIGHT_FTL_NONPALLET, OCEAN_LCL, OCEAN_FCL, AIR_SMALL_PARCEL, AIR_SMALL_PARCEL_EXPRESS.
        /// </summary>
        /// <value>Mode of shipment transportation that this option will provide. Can be: GROUND_SMALL_PARCEL, FREIGHT_LTL, FREIGHT_FTL_PALLET, FREIGHT_FTL_NONPALLET, OCEAN_LCL, OCEAN_FCL, AIR_SMALL_PARCEL, AIR_SMALL_PARCEL_EXPRESS.</value>
        [DataMember(Name="shippingMode", EmitDefaultValue=false)]
        public ShippingMode ShippingMode { get; set; }

        /// <summary>
        /// Shipping program for the option. Can be: AMAZON_PARTNERED_CARRIER, USE_YOUR_OWN_CARRIER.
        /// </summary>
        /// <value>Shipping program for the option. Can be: AMAZON_PARTNERED_CARRIER, USE_YOUR_OWN_CARRIER.</value>
        [DataMember(Name="shippingSolution", EmitDefaultValue=false)]
        public ShippingSolution ShippingSolution { get; set; }

        /// <summary>
        /// Identifier to a transportation option. A transportation option represent one option for how to send a shipment.
        /// </summary>
        /// <value>Identifier to a transportation option. A transportation option represent one option for how to send a shipment.</value>
        [DataMember(Name="transportationOptionId", EmitDefaultValue=false)]
        public string TransportationOptionId { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class TransportationOption {\n");
            sb.Append("  Carrier: ").Append(Carrier).Append("\n");
            sb.Append("  CarrierAppointment: ").Append(CarrierAppointment).Append("\n");
            sb.Append("  Preconditions: ").Append(Preconditions).Append("\n");
            sb.Append("  Quote: ").Append(Quote).Append("\n");
            sb.Append("  ShipmentId: ").Append(ShipmentId).Append("\n");
            sb.Append("  ShippingMode: ").Append(ShippingMode).Append("\n");
            sb.Append("  ShippingSolution: ").Append(ShippingSolution).Append("\n");
            sb.Append("  TransportationOptionId: ").Append(TransportationOptionId).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as TransportationOption);
        }

        /// <summary>
        /// Returns true if TransportationOption instances are equal
        /// </summary>
        /// <param name="input">Instance of TransportationOption to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(TransportationOption input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.Carrier == input.Carrier ||
                    (this.Carrier != null &&
                    this.Carrier.Equals(input.Carrier))
                ) && 
                (
                    this.CarrierAppointment == input.CarrierAppointment ||
                    (this.CarrierAppointment != null &&
                    this.CarrierAppointment.Equals(input.CarrierAppointment))
                ) && 
                (
                    this.Preconditions == input.Preconditions ||
                    (this.Preconditions != null &&
                    this.Preconditions.Equals(input.Preconditions))
                ) && 
                (
                    this.Quote == input.Quote ||
                    (this.Quote != null &&
                    this.Quote.Equals(input.Quote))
                ) && 
                (
                    this.ShipmentId == input.ShipmentId ||
                    (this.ShipmentId != null &&
                    this.ShipmentId.Equals(input.ShipmentId))
                ) && 
                (
                    this.ShippingMode == input.ShippingMode ||
                    (this.ShippingMode != null &&
                    this.ShippingMode.Equals(input.ShippingMode))
                ) && 
                (
                    this.ShippingSolution == input.ShippingSolution ||
                    (this.ShippingSolution != null &&
                    this.ShippingSolution.Equals(input.ShippingSolution))
                ) && 
                (
                    this.TransportationOptionId == input.TransportationOptionId ||
                    (this.TransportationOptionId != null &&
                    this.TransportationOptionId.Equals(input.TransportationOptionId))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.Carrier != null)
                    hashCode = hashCode * 59 + this.Carrier.GetHashCode();
                if (this.CarrierAppointment != null)
                    hashCode = hashCode * 59 + this.CarrierAppointment.GetHashCode();
                if (this.Preconditions != null)
                    hashCode = hashCode * 59 + this.Preconditions.GetHashCode();
                if (this.Quote != null)
                    hashCode = hashCode * 59 + this.Quote.GetHashCode();
                if (this.ShipmentId != null)
                    hashCode = hashCode * 59 + this.ShipmentId.GetHashCode();
                if (this.ShippingMode != null)
                    hashCode = hashCode * 59 + this.ShippingMode.GetHashCode();
                if (this.ShippingSolution != null)
                    hashCode = hashCode * 59 + this.ShippingSolution.GetHashCode();
                if (this.TransportationOptionId != null)
                    hashCode = hashCode * 59 + this.TransportationOptionId.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {

            // ShipmentId (string) maxLength
            if(this.ShipmentId != null && this.ShipmentId.Length > 38)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for ShipmentId, length must be less than 38.", new [] { "ShipmentId" });
            }

            // ShipmentId (string) minLength
            if(this.ShipmentId != null && this.ShipmentId.Length < 38)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for ShipmentId, length must be greater than 38.", new [] { "ShipmentId" });
            }

            // ShipmentId (string) pattern
            Regex regexShipmentId = new Regex(@"^[a-zA-Z0-9-]*$", RegexOptions.CultureInvariant);
            if (false == regexShipmentId.Match(this.ShipmentId).Success)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for ShipmentId, must match a pattern of " + regexShipmentId, new [] { "ShipmentId" });
            }

            // TransportationOptionId (string) maxLength
            if(this.TransportationOptionId != null && this.TransportationOptionId.Length > 38)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for TransportationOptionId, length must be less than 38.", new [] { "TransportationOptionId" });
            }

            // TransportationOptionId (string) minLength
            if(this.TransportationOptionId != null && this.TransportationOptionId.Length < 38)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for TransportationOptionId, length must be greater than 38.", new [] { "TransportationOptionId" });
            }

            // TransportationOptionId (string) pattern
            Regex regexTransportationOptionId = new Regex(@"^[a-zA-Z0-9-]*$", RegexOptions.CultureInvariant);
            if (false == regexTransportationOptionId.Match(this.TransportationOptionId).Success)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for TransportationOptionId, must match a pattern of " + regexTransportationOptionId, new [] { "TransportationOptionId" });
            }

            yield break;
        }
    }

}
