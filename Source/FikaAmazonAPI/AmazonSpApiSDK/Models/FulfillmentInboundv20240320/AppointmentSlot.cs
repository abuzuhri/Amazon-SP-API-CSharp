/* 
 * The Selling Partner API for FBA inbound operations.
 *
 * The Selling Partner API for Fulfillment By Amazon (FBA) Inbound. The FBA Inbound API enables building inbound workflows to create, manage, and send shipments into Amazon's fulfillment network. The API has interoperability with the Send-to-Amazon user interface.
 *
 * OpenAPI spec version: 2024-03-20
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using Newtonsoft.Json;
using System;
using System.Collections.Generic;
using System.ComponentModel.DataAnnotations;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;

namespace FikaAmazonAPI.AmazonSpApiSDK.Models.FulfillmentInboundv20240320
{
    /// <summary>
    /// The fulfillment center appointment slot for the transportation option.
    /// </summary>
    [DataContract]
    public partial class AppointmentSlot :  IEquatable<AppointmentSlot>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="AppointmentSlot" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        public AppointmentSlot() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="AppointmentSlot" /> class.
        /// </summary>
        /// <param name="slotId">An identifier to a self-ship appointment slot. (required).</param>
        /// <param name="slotTime">An appointment slot time with start and end. (required).</param>
        public AppointmentSlot(string slotId = default(string), AppointmentSlotTime slotTime = default(AppointmentSlotTime))
        {
            // to ensure "slotId" is required (not null)
            if (slotId == null)
            {
                throw new InvalidDataException("slotId is a required property for AppointmentSlot and cannot be null");
            }
            else
            {
                this.SlotId = slotId;
            }
            // to ensure "slotTime" is required (not null)
            if (slotTime == null)
            {
                throw new InvalidDataException("slotTime is a required property for AppointmentSlot and cannot be null");
            }
            else
            {
                this.SlotTime = slotTime;
            }
        }
        
        /// <summary>
        /// An identifier to a self-ship appointment slot.
        /// </summary>
        /// <value>An identifier to a self-ship appointment slot.</value>
        [DataMember(Name="slotId", EmitDefaultValue=false)]
        public string SlotId { get; set; }

        /// <summary>
        /// An appointment slot time with start and end.
        /// </summary>
        /// <value>An appointment slot time with start and end.</value>
        [DataMember(Name="slotTime", EmitDefaultValue=false)]
        public AppointmentSlotTime SlotTime { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class AppointmentSlot {\n");
            sb.Append("  SlotId: ").Append(SlotId).Append("\n");
            sb.Append("  SlotTime: ").Append(SlotTime).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as AppointmentSlot);
        }

        /// <summary>
        /// Returns true if AppointmentSlot instances are equal
        /// </summary>
        /// <param name="input">Instance of AppointmentSlot to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(AppointmentSlot input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.SlotId == input.SlotId ||
                    (this.SlotId != null &&
                    this.SlotId.Equals(input.SlotId))
                ) && 
                (
                    this.SlotTime == input.SlotTime ||
                    (this.SlotTime != null &&
                    this.SlotTime.Equals(input.SlotTime))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.SlotId != null)
                    hashCode = hashCode * 59 + this.SlotId.GetHashCode();
                if (this.SlotTime != null)
                    hashCode = hashCode * 59 + this.SlotTime.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            // SlotId (string) maxLength
            if(this.SlotId != null && this.SlotId.Length > 38)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for SlotId, length must be less than 38.", new [] { "SlotId" });
            }

            // SlotId (string) minLength
            if(this.SlotId != null && this.SlotId.Length < 38)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for SlotId, length must be greater than 38.", new [] { "SlotId" });
            }

            // SlotId (string) pattern
            Regex regexSlotId = new Regex(@"^[a-zA-Z0-9-]*$", RegexOptions.CultureInvariant);
            if (false == regexSlotId.Match(this.SlotId).Success)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for SlotId, must match a pattern of " + regexSlotId, new [] { "SlotId" });
            }

            yield break;
        }
    }

}
