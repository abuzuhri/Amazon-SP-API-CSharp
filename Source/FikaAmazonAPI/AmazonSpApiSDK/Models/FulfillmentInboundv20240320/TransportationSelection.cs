/* 
 * The Selling Partner API for FBA inbound operations.
 *
 * The Selling Partner API for Fulfillment By Amazon (FBA) Inbound. The FBA Inbound API enables building inbound workflows to create, manage, and send shipments into Amazon's fulfillment network. The API has interoperability with the Send-to-Amazon user interface.
 *
 * OpenAPI spec version: 2024-03-20
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using Newtonsoft.Json;
using System;
using System.Collections.Generic;
using System.ComponentModel.DataAnnotations;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;

namespace FikaAmazonAPI.AmazonSpApiSDK.Models.FulfillmentInboundv20240320
{
    /// <summary>
    /// The transportation option selected to confirm.
    /// </summary>
    [DataContract]
    public partial class TransportationSelection :  IEquatable<TransportationSelection>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="TransportationSelection" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        public TransportationSelection() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="TransportationSelection" /> class.
        /// </summary>
        /// <param name="contactInformation">The seller contact information.</param>
        /// <param name="shipmentId">Shipment ID that the transportation Option is for. (required).</param>
        /// <param name="transportationOptionId">Transportation option being selected for the provided shipment. (required).</param>
        public TransportationSelection(ContactInformation contactInformation = default(ContactInformation),
                                       string shipmentId = default(string),
                                       string transportationOptionId = default(string))
        {
            // to ensure "shipmentId" is required (not null)
            if (shipmentId == null)
            {
                throw new InvalidDataException("shipmentId is a required property for TransportationSelection and cannot be null");
            }
            else
            {
                this.ShipmentId = shipmentId;
            }
            // to ensure "transportationOptionId" is required (not null)
            if (transportationOptionId == null)
            {
                throw new InvalidDataException("transportationOptionId is a required property for TransportationSelection and cannot be null");
            }
            else
            {
                this.TransportationOptionId = transportationOptionId;
            }
            this.ContactInformation = contactInformation;
        }
        
        /// <summary>
        /// Gets or Sets ContactInformation
        /// </summary>
        [DataMember(Name="contactInformation", EmitDefaultValue=false)]
        public ContactInformation ContactInformation { get; set; }

        /// <summary>
        /// Shipment ID that the transportation Option is for.
        /// </summary>
        /// <value>Shipment ID that the transportation Option is for.</value>
        [DataMember(Name="shipmentId", EmitDefaultValue=false)]
        public string ShipmentId { get; set; }

        /// <summary>
        /// Transportation option being selected for the provided shipment.
        /// </summary>
        /// <value>Transportation option being selected for the provided shipment.</value>
        [DataMember(Name="transportationOptionId", EmitDefaultValue=false)]
        public string TransportationOptionId { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class TransportationSelection {\n");
            sb.Append("  ContactInformation: ").Append(ContactInformation).Append("\n");
            sb.Append("  ShipmentId: ").Append(ShipmentId).Append("\n");
            sb.Append("  TransportationOptionId: ").Append(TransportationOptionId).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as TransportationSelection);
        }

        /// <summary>
        /// Returns true if TransportationSelection instances are equal
        /// </summary>
        /// <param name="input">Instance of TransportationSelection to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(TransportationSelection input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.ContactInformation == input.ContactInformation ||
                    (this.ContactInformation != null &&
                    this.ContactInformation.Equals(input.ContactInformation))
                ) && 
                (
                    this.ShipmentId == input.ShipmentId ||
                    (this.ShipmentId != null &&
                    this.ShipmentId.Equals(input.ShipmentId))
                ) && 
                (
                    this.TransportationOptionId == input.TransportationOptionId ||
                    (this.TransportationOptionId != null &&
                    this.TransportationOptionId.Equals(input.TransportationOptionId))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.ContactInformation != null)
                    hashCode = hashCode * 59 + this.ContactInformation.GetHashCode();
                if (this.ShipmentId != null)
                    hashCode = hashCode * 59 + this.ShipmentId.GetHashCode();
                if (this.TransportationOptionId != null)
                    hashCode = hashCode * 59 + this.TransportationOptionId.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            // ShipmentId (string) maxLength
            if(this.ShipmentId != null && this.ShipmentId.Length > 38)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for ShipmentId, length must be less than 38.", new [] { "ShipmentId" });
            }

            // ShipmentId (string) minLength
            if(this.ShipmentId != null && this.ShipmentId.Length < 38)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for ShipmentId, length must be greater than 38.", new [] { "ShipmentId" });
            }

            // ShipmentId (string) pattern
            Regex regexShipmentId = new Regex(@"^[a-zA-Z0-9-]*$", RegexOptions.CultureInvariant);
            if (false == regexShipmentId.Match(this.ShipmentId).Success)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for ShipmentId, must match a pattern of " + regexShipmentId, new [] { "ShipmentId" });
            }

            // TransportationOptionId (string) maxLength
            if(this.TransportationOptionId != null && this.TransportationOptionId.Length > 38)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for TransportationOptionId, length must be less than 38.", new [] { "TransportationOptionId" });
            }

            // TransportationOptionId (string) minLength
            if(this.TransportationOptionId != null && this.TransportationOptionId.Length < 38)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for TransportationOptionId, length must be greater than 38.", new [] { "TransportationOptionId" });
            }

            // TransportationOptionId (string) pattern
            Regex regexTransportationOptionId = new Regex(@"^[a-zA-Z0-9-]*$", RegexOptions.CultureInvariant);
            if (false == regexTransportationOptionId.Match(this.TransportationOptionId).Success)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for TransportationOptionId, must match a pattern of " + regexTransportationOptionId, new [] { "TransportationOptionId" });
            }

            yield break;
        }
    }

}
