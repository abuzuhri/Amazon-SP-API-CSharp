/* 
 * The Selling Partner API for FBA inbound operations.
 *
 * The Selling Partner API for Fulfillment By Amazon (FBA) Inbound. The FBA Inbound API enables building inbound workflows to create, manage, and send shipments into Amazon's fulfillment network. The API has interoperability with the Send-to-Amazon user interface.
 *
 * OpenAPI spec version: 2024-03-20
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using Newtonsoft.Json;
using System;
using System.Collections.Generic;
using System.ComponentModel.DataAnnotations;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;

namespace FikaAmazonAPI.AmazonSpApiSDK.Models.FulfillmentInboundv20240320
{
    /// <summary>
    /// Contains information about a pallet that is used in the inbound plan. The pallet is a container that holds multiple items or boxes.
    /// </summary>
    [DataContract]
    public partial class Pallet :  IEquatable<Pallet>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="Pallet" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        public Pallet() { }

        /// <summary>
        /// Initializes a new instance of the <see cref="Pallet" /> class.
        /// </summary>
        /// <param name="dimensions">Measurement of a package dimensions.</param>
        /// <param name="packageId">Primary key to uniquely identify a Package (Box or Pallet). (required).</param>
        /// <param name="quantity">The number of containers where all other properties like weight or dimensions are identical..</param>
        /// <param name="stackability">Indicates whether pallets will be stacked when carrier arrives for pick-up.</param>
        /// <param name="weight">The weight of a package.</param>
        public Pallet(Dimensions dimensions = default(Dimensions),
                      string packageId = default(string),
                      int? quantity = default(int?),
                      Stackability? stackability = default(Stackability?),
                      Weight weight = default(Weight))
        {
            // to ensure "packageId" is required (not null)
            if (packageId == null)
            {
                throw new InvalidDataException("packageId is a required property for Pallet and cannot be null");
            }
            else
            {
                this.PackageId = packageId;
            }
            this.Dimensions = dimensions;
            this.Quantity = quantity;
            this.Stackability = stackability;
            this.Weight = weight;
        }

        /// <summary>
        /// Measurement of a package dimensions.
        /// </summary>
        /// <value>Measurement of a package dimensions.</value>
        [DataMember(Name="dimensions", EmitDefaultValue=false)]
        public Dimensions Dimensions { get; set; }

        /// <summary>
        /// Primary key to uniquely identify a Package (Box or Pallet).
        /// </summary>
        /// <value>Primary key to uniquely identify a Package (Box or Pallet).</value>
        [DataMember(Name="packageId", EmitDefaultValue=false)]
        public string PackageId { get; set; }

        /// <summary>
        /// The number of containers where all other properties like weight or dimensions are identical.
        /// </summary>
        /// <value>The number of containers where all other properties like weight or dimensions are identical.</value>
        [DataMember(Name="quantity", EmitDefaultValue=false)]
        public int? Quantity { get; set; }

        /// <summary>
        /// Indicates whether pallets will be stacked when carrier arrives for pick-up.
        /// </summary>
        /// <value>Indicates whether pallets will be stacked when carrier arrives for pick-up.</value>
        [DataMember(Name = "stackability", EmitDefaultValue = false)]
        public Stackability? Stackability { get; set; }

        /// <summary>
        /// The weight of a package.
        /// </summary>
        /// <value>The weight of a package.</value>
        [DataMember(Name="weight", EmitDefaultValue=false)]
        public Weight Weight { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class Pallet {\n");
            sb.Append("  Dimensions: ").Append(Dimensions).Append("\n");
            sb.Append("  PackageId: ").Append(PackageId).Append("\n");
            sb.Append("  Quantity: ").Append(Quantity).Append("\n");
            sb.Append("  Stackability: ").Append(Stackability).Append("\n");
            sb.Append("  Weight: ").Append(Weight).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as Pallet);
        }

        /// <summary>
        /// Returns true if Pallet instances are equal
        /// </summary>
        /// <param name="input">Instance of Pallet to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(Pallet input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.Dimensions == input.Dimensions ||
                    (this.Dimensions != null &&
                    this.Dimensions.Equals(input.Dimensions))
                ) && 
                (
                    this.PackageId == input.PackageId ||
                    (this.PackageId != null &&
                    this.PackageId.Equals(input.PackageId))
                ) && 
                (
                    this.Quantity == input.Quantity ||
                    (this.Quantity != null &&
                    this.Quantity.Equals(input.Quantity))
                ) && 
                (
                    this.Stackability == input.Stackability ||
                    (this.Stackability != null &&
                    this.Stackability.Equals(input.Stackability))
                ) && 
                (
                    this.Weight == input.Weight ||
                    (this.Weight != null &&
                    this.Weight.Equals(input.Weight))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.Dimensions != null)
                    hashCode = hashCode * 59 + this.Dimensions.GetHashCode();
                if (this.PackageId != null)
                    hashCode = hashCode * 59 + this.PackageId.GetHashCode();
                if (this.Quantity != null)
                    hashCode = hashCode * 59 + this.Quantity.GetHashCode();
                if (this.Stackability != null)
                    hashCode = hashCode * 59 + this.Stackability.GetHashCode();
                if (this.Weight != null)
                    hashCode = hashCode * 59 + this.Weight.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            // PackageId (string) maxLength
            if(this.PackageId != null && this.PackageId.Length > 38)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for PackageId, length must be less than 38.", new [] { "PackageId" });
            }

            // PackageId (string) minLength
            if(this.PackageId != null && this.PackageId.Length < 38)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for PackageId, length must be greater than 38.", new [] { "PackageId" });
            }

            // PackageId (string) pattern
            Regex regexPackageId = new Regex(@"^[a-zA-Z0-9-]*$", RegexOptions.CultureInvariant);
            if (false == regexPackageId.Match(this.PackageId).Success)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for PackageId, must match a pattern of " + regexPackageId, new [] { "PackageId" });
            }

            // Quantity (int?) maximum
            if(this.Quantity > (int?)10000)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for Quantity, must be a value less than or equal to 10000.", new [] { "Quantity" });
            }

            // Quantity (int?) minimum
            if(this.Quantity < (int?)1)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for Quantity, must be a value greater than or equal to 1.", new [] { "Quantity" });
            }

            yield break;
        }
    }

}
