/* 
 * The Selling Partner API for FBA inbound operations.
 *
 * The Selling Partner API for Fulfillment By Amazon (FBA) Inbound. The FBA Inbound API enables building inbound workflows to create, manage, and send shipments into Amazon's fulfillment network. The API has interoperability with the Send-to-Amazon user interface.
 *
 * OpenAPI spec version: 2024-03-20
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using Newtonsoft.Json;
using System;
using System.Collections.Generic;
using System.ComponentModel.DataAnnotations;
using System.Runtime.Serialization;
using System.Text;

namespace FikaAmazonAPI.AmazonSpApiSDK.Models.FulfillmentInboundv20240320
{
    /// <summary>
    /// Contains information used to track and identify a Small Parcel Delivery (SPD) item.
    /// </summary>
    [DataContract]
    public partial class SpdTrackingItem :  IEquatable<SpdTrackingItem>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="SpdTrackingItem" /> class.
        /// </summary>
        /// <param name="boxId">The ID provided by Amazon that identifies a given box. This ID is comprised of the external shipment ID (which         is generated after transportation has been confirmed) and the index of the box..</param>
        /// <param name="trackingId">The tracking ID associated with each box in a non-Amazon partnered Small Parcel Delivery (SPD) shipment..</param>
        /// <param name="trackingNumberValidationStatus">Whether or not Amazon has validated the tracking number. If more than 24 hours have passed and the status is         not yet &#39;VALIDATED&#39;, please verify the number and update if necessary. Can be &#x60;VALIDATED&#x60; or &#x60;NOT_VALIDATED&#x60;..</param>
        public SpdTrackingItem(string boxId = default(string),
                               string trackingId = default(string),
                               TrackingNumberValidationStatus? trackingNumberValidationStatus = default(TrackingNumberValidationStatus?))
        {
            this.BoxId = boxId;
            this.TrackingId = trackingId;
            this.TrackingNumberValidationStatus = trackingNumberValidationStatus;
        }
        
        /// <summary>
        /// The ID provided by Amazon that identifies a given box. This ID is comprised of the external shipment ID (which         is generated after transportation has been confirmed) and the index of the box.
        /// </summary>
        /// <value>The ID provided by Amazon that identifies a given box. This ID is comprised of the external shipment ID (which         is generated after transportation has been confirmed) and the index of the box.</value>
        [DataMember(Name="boxId", EmitDefaultValue=false)]
        public string BoxId { get; set; }

        /// <summary>
        /// The tracking ID associated with each box in a non-Amazon partnered Small Parcel Delivery (SPD) shipment.
        /// </summary>
        /// <value>The tracking ID associated with each box in a non-Amazon partnered Small Parcel Delivery (SPD) shipment.</value>
        [DataMember(Name="trackingId", EmitDefaultValue=false)]
        public string TrackingId { get; set; }

        /// <summary>
        /// Whether or not Amazon has validated the tracking number. If more than 24 hours have passed and the status is         not yet &#39;VALIDATED&#39;, please verify the number and update if necessary. Can be &#x60;VALIDATED&#x60; or &#x60;NOT_VALIDATED&#x60;.
        /// </summary>
        /// <value>Whether or not Amazon has validated the tracking number. If more than 24 hours have passed and the status is         not yet &#39;VALIDATED&#39;, please verify the number and update if necessary. Can be &#x60;VALIDATED&#x60; or &#x60;NOT_VALIDATED&#x60;.</value>
        [DataMember(Name="trackingNumberValidationStatus", EmitDefaultValue=false)]
        public TrackingNumberValidationStatus? TrackingNumberValidationStatus { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class SpdTrackingItem {\n");
            sb.Append("  BoxId: ").Append(BoxId).Append("\n");
            sb.Append("  TrackingId: ").Append(TrackingId).Append("\n");
            sb.Append("  TrackingNumberValidationStatus: ").Append(TrackingNumberValidationStatus).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as SpdTrackingItem);
        }

        /// <summary>
        /// Returns true if SpdTrackingItem instances are equal
        /// </summary>
        /// <param name="input">Instance of SpdTrackingItem to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(SpdTrackingItem input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.BoxId == input.BoxId ||
                    (this.BoxId != null &&
                    this.BoxId.Equals(input.BoxId))
                ) && 
                (
                    this.TrackingId == input.TrackingId ||
                    (this.TrackingId != null &&
                    this.TrackingId.Equals(input.TrackingId))
                ) && 
                (
                    this.TrackingNumberValidationStatus == input.TrackingNumberValidationStatus ||
                    (this.TrackingNumberValidationStatus != null &&
                    this.TrackingNumberValidationStatus.Equals(input.TrackingNumberValidationStatus))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.BoxId != null)
                    hashCode = hashCode * 59 + this.BoxId.GetHashCode();
                if (this.TrackingId != null)
                    hashCode = hashCode * 59 + this.TrackingId.GetHashCode();
                if (this.TrackingNumberValidationStatus != null)
                    hashCode = hashCode * 59 + this.TrackingNumberValidationStatus.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            // BoxId (string) maxLength
            if(this.BoxId != null && this.BoxId.Length > 1024)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for BoxId, length must be less than 1024.", new [] { "BoxId" });
            }

            // BoxId (string) minLength
            if(this.BoxId != null && this.BoxId.Length < 1)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for BoxId, length must be greater than 1.", new [] { "BoxId" });
            }

            // TrackingId (string) maxLength
            if(this.TrackingId != null && this.TrackingId.Length > 1024)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for TrackingId, length must be less than 1024.", new [] { "TrackingId" });
            }

            // TrackingId (string) minLength
            if(this.TrackingId != null && this.TrackingId.Length < 1)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for TrackingId, length must be greater than 1.", new [] { "TrackingId" });
            }

            yield break;
        }
    }

}
