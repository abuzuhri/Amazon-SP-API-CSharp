/* 
 * The Selling Partner API for FBA inbound operations.
 *
 * The Selling Partner API for Fulfillment By Amazon (FBA) Inbound. The FBA Inbound API enables building inbound workflows to create, manage, and send shipments into Amazon's fulfillment network. The API has interoperability with the Send-to-Amazon user interface.
 *
 * OpenAPI spec version: 2024-03-20
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using Newtonsoft.Json;
using System;
using System.Collections.Generic;
using System.ComponentModel.DataAnnotations;
using System.IO;
using System.Linq;
using System.Runtime.Serialization;
using System.Text;

namespace FikaAmazonAPI.AmazonSpApiSDK.Models.FulfillmentInboundv20240320
{
    /// <summary>
    /// Pallet information, including weight, dimensions, quantity, stackability, freight class, and declared value.
    /// </summary>
    [DataContract]
    public partial class PalletInformation :  IEquatable<PalletInformation>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="PalletInformation" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected PalletInformation() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="PalletInformation" /> class.
        /// </summary>
        /// <param name="declaredValue">declaredValue.</param>
        /// <param name="freightClass">Freight class. Can be &#x60;NONE&#x60;, &#x60;FC_50&#x60;, &#x60;FC_55&#x60;, &#x60;FC_60&#x60;, &#x60;FC_65&#x60;, &#x60;FC_70&#x60;, &#x60;FC_77_5&#x60;, &#x60;FC_85&#x60;, &#x60;FC_92_5&#x60;, &#x60;FC_100&#x60;, &#x60;FC_110&#x60;, &#x60;FC_125&#x60;, &#x60;FC_150&#x60;, &#x60;FC_175&#x60;, &#x60;FC_200&#x60;, &#x60;FC_250&#x60;, &#x60;FC_300&#x60;, &#x60;FC_400&#x60;, or &#x60;FC_500&#x60;..</param>
        /// <param name="pallets">Set pallet configuration for Less-Than-Truckload (LTL). (required).</param>
        public PalletInformation(Currency declaredValue = default(Currency), string freightClass = default(string), List<PalletInput> pallets = default(List<PalletInput>))
        {
            // to ensure "pallets" is required (not null)
            if (pallets == null)
            {
                throw new InvalidDataException("pallets is a required property for PalletInformation and cannot be null");
            }
            else
            {
                this.Pallets = pallets;
            }
            this.DeclaredValue = declaredValue;
            this.FreightClass = freightClass;
        }
        
        /// <summary>
        /// Gets or Sets DeclaredValue
        /// </summary>
        [DataMember(Name="declaredValue", EmitDefaultValue=false)]
        public Currency DeclaredValue { get; set; }

        /// <summary>
        /// Freight class. Can be &#x60;NONE&#x60;, &#x60;FC_50&#x60;, &#x60;FC_55&#x60;, &#x60;FC_60&#x60;, &#x60;FC_65&#x60;, &#x60;FC_70&#x60;, &#x60;FC_77_5&#x60;, &#x60;FC_85&#x60;, &#x60;FC_92_5&#x60;, &#x60;FC_100&#x60;, &#x60;FC_110&#x60;, &#x60;FC_125&#x60;, &#x60;FC_150&#x60;, &#x60;FC_175&#x60;, &#x60;FC_200&#x60;, &#x60;FC_250&#x60;, &#x60;FC_300&#x60;, &#x60;FC_400&#x60;, or &#x60;FC_500&#x60;.
        /// </summary>
        /// <value>Freight class. Can be &#x60;NONE&#x60;, &#x60;FC_50&#x60;, &#x60;FC_55&#x60;, &#x60;FC_60&#x60;, &#x60;FC_65&#x60;, &#x60;FC_70&#x60;, &#x60;FC_77_5&#x60;, &#x60;FC_85&#x60;, &#x60;FC_92_5&#x60;, &#x60;FC_100&#x60;, &#x60;FC_110&#x60;, &#x60;FC_125&#x60;, &#x60;FC_150&#x60;, &#x60;FC_175&#x60;, &#x60;FC_200&#x60;, &#x60;FC_250&#x60;, &#x60;FC_300&#x60;, &#x60;FC_400&#x60;, or &#x60;FC_500&#x60;.</value>
        [DataMember(Name="freightClass", EmitDefaultValue=false)]
        public string FreightClass { get; set; }

        /// <summary>
        /// Set pallet configuration for Less-Than-Truckload (LTL).
        /// </summary>
        /// <value>Set pallet configuration for Less-Than-Truckload (LTL).</value>
        [DataMember(Name="pallets", EmitDefaultValue=false)]
        public List<PalletInput> Pallets { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class PalletInformation {\n");
            sb.Append("  DeclaredValue: ").Append(DeclaredValue).Append("\n");
            sb.Append("  FreightClass: ").Append(FreightClass).Append("\n");
            sb.Append("  Pallets: ").Append(Pallets).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as PalletInformation);
        }

        /// <summary>
        /// Returns true if PalletInformation instances are equal
        /// </summary>
        /// <param name="input">Instance of PalletInformation to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(PalletInformation input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.DeclaredValue == input.DeclaredValue ||
                    (this.DeclaredValue != null &&
                    this.DeclaredValue.Equals(input.DeclaredValue))
                ) && 
                (
                    this.FreightClass == input.FreightClass ||
                    (this.FreightClass != null &&
                    this.FreightClass.Equals(input.FreightClass))
                ) && 
                (
                    this.Pallets == input.Pallets ||
                    this.Pallets != null &&
                    this.Pallets.SequenceEqual(input.Pallets)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.DeclaredValue != null)
                    hashCode = hashCode * 59 + this.DeclaredValue.GetHashCode();
                if (this.FreightClass != null)
                    hashCode = hashCode * 59 + this.FreightClass.GetHashCode();
                if (this.Pallets != null)
                    hashCode = hashCode * 59 + this.Pallets.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            // FreightClass (string) maxLength
            if(this.FreightClass != null && this.FreightClass.Length > 1024)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for FreightClass, length must be less than 1024.", new [] { "FreightClass" });
            }

            // FreightClass (string) minLength
            if(this.FreightClass != null && this.FreightClass.Length < 1)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for FreightClass, length must be greater than 1.", new [] { "FreightClass" });
            }

            yield break;
        }
    }

}
