/* 
 * The Selling Partner API for FBA inbound operations.
 *
 * The Selling Partner API for Fulfillment By Amazon (FBA) Inbound. The FBA Inbound API enables building inbound workflows to create, manage, and send shipments into Amazon's fulfillment network. The API has interoperability with the Send-to-Amazon user interface.
 *
 * OpenAPI spec version: 2024-03-20
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using Newtonsoft.Json;
using System;
using System.Collections.Generic;
using System.ComponentModel.DataAnnotations;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;

namespace FikaAmazonAPI.AmazonSpApiSDK.Models.FulfillmentInboundv20240320
{
    /// <summary>
    /// Preview of the changes that will be applied to the shipment.
    /// </summary>
    [DataContract]
    public partial class ContentUpdatePreview :  IEquatable<ContentUpdatePreview>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="ContentUpdatePreview" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        public ContentUpdatePreview() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="ContentUpdatePreview" /> class.
        /// </summary>
        /// <param name="contentUpdatePreviewId">Identifier of a content update preview. (required).</param>
        /// <param name="expiration">The date in ISO 8601 format for when the content update expires. (required)</param>
        /// <param name="requestedUpdates">Objects that were included in the update request. (required).</param>
        /// <param name="transportationOption">Packing group IDs. (required).</param>
        public ContentUpdatePreview(string contentUpdatePreviewId = default(string),
                                    DateTime? expiration = default(DateTime?),
                                    RequestedUpdates requestedUpdates = default(RequestedUpdates),
                                    TransportationOption transportationOption = default(TransportationOption))
        {
            // to ensure "contentUpdatePreviewId " is required (not null)
            if (contentUpdatePreviewId == null)
            {
                throw new InvalidDataException("contentUpdatePreviewId  is a required property for ContentUpdatePreview and cannot be null");
            }
            else
            {
                this.ContentUpdatePreviewId = contentUpdatePreviewId;
            }
            // to ensure "expiration" is required (not null)
            if (expiration == null)
            {
                throw new InvalidDataException("expiration is a required property for ContentUpdatePreview and cannot be null");
            }
            else
            {
                this.Expiration = expiration;
            }
            // to ensure "requestedUpdates" is required (not null)
            if (requestedUpdates == null)
            {
                throw new InvalidDataException("requestedUpdates is a required property for ContentUpdatePreview and cannot be null");
            }
            else
            {
                this.RequestedUpdates = requestedUpdates;
            }
            // to ensure "transportationOption" is required (not null)
            if (transportationOption == null)
            {
                throw new InvalidDataException("transportationOption is a required property for ContentUpdatePreview and cannot be null");
            }
            else
            {
                this.TransportationOption = transportationOption;
            }
            this.Expiration = expiration;
        }

        /// <summary>
        /// Identifier of a content update preview.
        /// </summary>
        /// <value>Identifier of a content update preview.</value>
        [DataMember(Name="contentUpdatePreviewId", EmitDefaultValue=false)]
        public string ContentUpdatePreviewId { get; set; }

        /// <summary>
        /// The date in ISO 8601 format for when the content update expires. 
        /// </summary>
        /// <value>The date in ISO 8601 format for when the content update expires.</value>
        [DataMember(Name="expiration", EmitDefaultValue=false)]
        public DateTime? Expiration { get; set; }

        /// <summary>
        /// Objects that were included in the update request.
        /// </summary>
        /// <value>Objects that were included in the update request.</value>
        [DataMember(Name="requestedUpdates", EmitDefaultValue=false)]
        public RequestedUpdates RequestedUpdates { get; set; }

        /// <summary>
        /// Contains information pertaining to a transportation option and the related carrier.
        /// </summary>
        /// <value>Contains information pertaining to a transportation option and the related carrier.</value>
        [DataMember(Name="transportationOption", EmitDefaultValue=false)]
        public TransportationOption TransportationOption { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class ContentUpdatePreview {\n");
            sb.Append("  ContentUpdatePreviewId: ").Append(ContentUpdatePreviewId).Append("\n");
            sb.Append("  Expiration: ").Append(Expiration).Append("\n");
            sb.Append("  RequestedUpdates: ").Append(RequestedUpdates).Append("\n");
            sb.Append("  TransportationOption: ").Append(TransportationOption).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as ContentUpdatePreview);
        }

        /// <summary>
        /// Returns true if ContentUpdatePreview instances are equal
        /// </summary>
        /// <param name="input">Instance of ContentUpdatePreview to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(ContentUpdatePreview input)
        {
            if (input == null)
                return false;

            return
                (
                    this.ContentUpdatePreviewId == input.ContentUpdatePreviewId ||
                    (this.ContentUpdatePreviewId != null &&
                    this.ContentUpdatePreviewId.Equals(input.ContentUpdatePreviewId))
                ) && 
                (
                    this.Expiration  == input.Expiration ||
                    (this.Expiration != null &&
                    this.Expiration.Equals(input.Expiration))
                ) && 
                (
                    this.RequestedUpdates == input.RequestedUpdates ||
                    this.RequestedUpdates != null &&
                    this.RequestedUpdates.Equals(input.RequestedUpdates)
                ) &&
                (
                    this.TransportationOption == input.TransportationOption ||
                    this.TransportationOption != null &&
                    this.TransportationOption.Equals(input.TransportationOption)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.ContentUpdatePreviewId != null)
                    hashCode = hashCode * 59 + this.ContentUpdatePreviewId.GetHashCode();
                if (this.Expiration != null)
                    hashCode = hashCode * 59 + this.Expiration.GetHashCode();
                if (this.RequestedUpdates != null)
                    hashCode = hashCode * 59 + this.RequestedUpdates.GetHashCode();
                if (this.TransportationOption != null)
                    hashCode = hashCode * 59 + this.TransportationOption.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            // ContentUpdatePreviewId (string) maxLength
            if(this.ContentUpdatePreviewId != null && this.ContentUpdatePreviewId.Length > 38)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for ContentUpdatePreviewId, length must be less than 38.", new [] { "ContentUpdatePreviewId" });
            }

            // ContentUpdatePreviewId (string) minLength
            if(this.ContentUpdatePreviewId != null && this.ContentUpdatePreviewId.Length < 38)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for ContentUpdatePreviewId, length must be greater than 38.", new [] { "ContentUpdatePreviewId" });
            }

            // ContentUpdatePreviewId (string) pattern
            Regex regexContentUpdatePreviewId = new Regex(@"^[a-zA-Z0-9-]*$", RegexOptions.CultureInvariant);
            if (false == regexContentUpdatePreviewId.Match(this.ContentUpdatePreviewId).Success)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for ContentUpdatePreviewId, must match a pattern of " + regexContentUpdatePreviewId, new [] { "ContentUpdatePreviewId" });
            }

            yield break;
        }
    }

}
