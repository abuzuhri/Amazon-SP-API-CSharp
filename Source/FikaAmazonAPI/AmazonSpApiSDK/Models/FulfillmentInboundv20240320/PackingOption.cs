/* 
 * The Selling Partner API for FBA inbound operations.
 *
 * The Selling Partner API for Fulfillment By Amazon (FBA) Inbound. The FBA Inbound API enables building inbound workflows to create, manage, and send shipments into Amazon's fulfillment network. The API has interoperability with the Send-to-Amazon user interface.
 *
 * OpenAPI spec version: 2024-03-20
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using Newtonsoft.Json;
using System;
using System.Collections.Generic;
using System.ComponentModel.DataAnnotations;
using System.IO;
using System.Linq;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;

namespace FikaAmazonAPI.AmazonSpApiSDK.Models.FulfillmentInboundv20240320
{
    /// <summary>
    /// A packing option contains a set of pack groups plus additional information about the packing option, such as any discounts or fees if it&#39;s selected.
    /// </summary>
    [DataContract]
    public partial class PackingOption :  IEquatable<PackingOption>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="PackingOption" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        public PackingOption() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="PackingOption" /> class.
        /// </summary>
        /// <param name="discounts">Discount for the offered option. (required).</param>
        /// <param name="expiration">The timestamp at which this packing option becomes no longer valid. This is in ISO 8601 datetime format with pattern &#x60;yyyy-MM-ddTHH:mm:ss.sssZ&#x60;..</param>
        /// <param name="fees">Fee for the offered option. (required).</param>
        /// <param name="packingGroups">Packing group IDs. (required).</param>
        /// <param name="packingOptionId">Identifier to a packing option. (required).</param>
        /// <param name="status">The status of the packing option. Can be: OFFERED, ACCEPTED, or EXPIRED.</param>
        /// <param name="supportedShippingConfigurations">List of supported shipping modes. (required).</param>
        public PackingOption(List<Incentive> discounts = default(List<Incentive>),
                             DateTime? expiration = default(DateTime?),
                             List<Incentive> fees = default(List<Incentive>),
                             List<string> packingGroups = default(List<string>),
                             string packingOptionId = default(string),
                             PackingOptionStatus status = default(PackingOptionStatus),
                             List<ShippingConfiguration> supportedShippingConfigurations = default(List<ShippingConfiguration>))
        {
            // to ensure "discounts" is required (not null)
            if (discounts == null)
            {
                throw new InvalidDataException("discounts is a required property for PackingOption and cannot be null");
            }
            else
            {
                this.Discounts = discounts;
            }
            // to ensure "fees" is required (not null)
            if (fees == null)
            {
                throw new InvalidDataException("fees is a required property for PackingOption and cannot be null");
            }
            else
            {
                this.Fees = fees;
            }
            // to ensure "packingGroups" is required (not null)
            if (packingGroups == null)
            {
                throw new InvalidDataException("packingGroups is a required property for PackingOption and cannot be null");
            }
            else
            {
                this.PackingGroups = packingGroups;
            }
            // to ensure "packingOptionId" is required (not null)
            if (packingOptionId == null)
            {
                throw new InvalidDataException("packingOptionId is a required property for PackingOption and cannot be null");
            }
            else
            {
                this.PackingOptionId = packingOptionId;
            }
            // to ensure "status" is required (not null)
            if (status == null)
            {
                throw new InvalidDataException("status is a required property for PackingOption and cannot be null");
            }
            else
            {
                this.Status = status;
            }
            // to ensure "supportedShippingConfigurations" is required (not null)
            if (supportedShippingConfigurations == null)
            {
                throw new InvalidDataException("supportedShippingConfigurations is a required property for PackingOption and cannot be null");
            }
            else
            {
                this.SupportedShippingConfigurations = supportedShippingConfigurations;
            }
            this.Expiration = expiration;
        }
        
        /// <summary>
        /// Discount for the offered option.
        /// </summary>
        /// <value>Discount for the offered option.</value>
        [DataMember(Name="discounts", EmitDefaultValue=false)]
        public List<Incentive> Discounts { get; set; }

        /// <summary>
        /// The timestamp at which this packing option becomes no longer valid. This is in ISO 8601 datetime format with pattern &#x60;yyyy-MM-ddTHH:mm:ss.sssZ&#x60;.
        /// </summary>
        /// <value>The timestamp at which this packing option becomes no longer valid. This is in ISO 8601 datetime format with pattern &#x60;yyyy-MM-ddTHH:mm:ss.sssZ&#x60;.</value>
        [DataMember(Name="expiration", EmitDefaultValue=false)]
        public DateTime? Expiration { get; set; }

        /// <summary>
        /// Fee for the offered option.
        /// </summary>
        /// <value>Fee for the offered option.</value>
        [DataMember(Name="fees", EmitDefaultValue=false)]
        public List<Incentive> Fees { get; set; }

        /// <summary>
        /// Packing group IDs.
        /// </summary>
        /// <value>Packing group IDs.</value>
        [DataMember(Name="packingGroups", EmitDefaultValue=false)]
        public List<string> PackingGroups { get; set; }

        /// <summary>
        /// Identifier to a packing option.
        /// </summary>
        /// <value>Identifier to a packing option.</value>
        [DataMember(Name="packingOptionId", EmitDefaultValue=false)]
        public string PackingOptionId { get; set; }

        /// <summary>
        /// The status of the packing option. Can be &#x60;OFFERED&#x60;, &#x60;ACCEPTED&#x60;, or &#x60;EXPIRED&#x60;.
        /// </summary>
        /// <value>The status of the packing option. Can be &#x60;OFFERED&#x60;, &#x60;ACCEPTED&#x60;, or &#x60;EXPIRED&#x60;.</value>
        [DataMember(Name="status", EmitDefaultValue=false)]
        public PackingOptionStatus Status { get; set; }

        /// <summary>
        /// List of supported shipping modes.
        /// </summary>
        /// <value>List of supported shipping modes.</value>
        [DataMember(Name="supportedShippingConfigurations", EmitDefaultValue=false)]
        public List<ShippingConfiguration> SupportedShippingConfigurations { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class PackingOption {\n");
            sb.Append("  Discounts: ").Append(Discounts).Append("\n");
            sb.Append("  Expiration: ").Append(Expiration).Append("\n");
            sb.Append("  Fees: ").Append(Fees).Append("\n");
            sb.Append("  PackingGroups: ").Append(PackingGroups).Append("\n");
            sb.Append("  PackingOptionId: ").Append(PackingOptionId).Append("\n");
            sb.Append("  Status: ").Append(Status).Append("\n");
            sb.Append("  SupportedShippingConfigurations: ").Append(SupportedShippingConfigurations).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as PackingOption);
        }

        /// <summary>
        /// Returns true if PackingOption instances are equal
        /// </summary>
        /// <param name="input">Instance of PackingOption to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(PackingOption input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.Discounts == input.Discounts ||
                    this.Discounts != null &&
                    this.Discounts.SequenceEqual(input.Discounts)
                ) && 
                (
                    this.Expiration == input.Expiration ||
                    (this.Expiration != null &&
                    this.Expiration.Equals(input.Expiration))
                ) && 
                (
                    this.Fees == input.Fees ||
                    this.Fees != null &&
                    this.Fees.SequenceEqual(input.Fees)
                ) &&
                (
                    this.PackingGroups == input.PackingGroups ||
                    this.PackingGroups != null &&
                    this.PackingGroups.SequenceEqual(input.PackingGroups)
                ) && 
                (
                    this.PackingOptionId == input.PackingOptionId ||
                    (this.PackingOptionId != null &&
                    this.PackingOptionId.Equals(input.PackingOptionId))
                ) && 
                (
                    this.Status == input.Status ||
                    (this.Status != null &&
                    this.Status.Equals(input.Status))
                ) && 
                (
                    this.SupportedShippingConfigurations == input.SupportedShippingConfigurations ||
                    this.SupportedShippingConfigurations != null &&
                    this.SupportedShippingConfigurations.SequenceEqual(input.SupportedShippingConfigurations)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.Discounts != null)
                    hashCode = hashCode * 59 + this.Discounts.GetHashCode();
                if (this.Expiration != null)
                    hashCode = hashCode * 59 + this.Expiration.GetHashCode();
                if (this.Fees != null)
                    hashCode = hashCode * 59 + this.Fees.GetHashCode();
                if (this.PackingGroups != null)
                    hashCode = hashCode * 59 + this.PackingGroups.GetHashCode();
                if (this.PackingOptionId != null)
                    hashCode = hashCode * 59 + this.PackingOptionId.GetHashCode();
                if (this.Status != null)
                    hashCode = hashCode * 59 + this.Status.GetHashCode();
                if (this.SupportedShippingConfigurations != null)
                    hashCode = hashCode * 59 + this.SupportedShippingConfigurations.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            // PackingOptionId (string) maxLength
            if(this.PackingOptionId != null && this.PackingOptionId.Length > 38)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for PackingOptionId, length must be less than 38.", new [] { "PackingOptionId" });
            }

            // PackingOptionId (string) minLength
            if(this.PackingOptionId != null && this.PackingOptionId.Length < 38)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for PackingOptionId, length must be greater than 38.", new [] { "PackingOptionId" });
            }

            // PackingOptionId (string) pattern
            Regex regexPackingOptionId = new Regex(@"^[a-zA-Z0-9-]*$", RegexOptions.CultureInvariant);
            if (false == regexPackingOptionId.Match(this.PackingOptionId).Success)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for PackingOptionId, must match a pattern of " + regexPackingOptionId, new [] { "PackingOptionId" });
            }

            yield break;
        }
    }

}
