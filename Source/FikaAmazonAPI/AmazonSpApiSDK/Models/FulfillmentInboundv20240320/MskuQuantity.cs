/* 
 * The Selling Partner API for FBA inbound operations.
 *
 * The Selling Partner API for Fulfillment By Amazon (FBA) Inbound. The FBA Inbound API enables building inbound workflows to create, manage, and send shipments into Amazon's fulfillment network. The API has interoperability with the Send-to-Amazon user interface.
 *
 * OpenAPI spec version: 2024-03-20
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using Newtonsoft.Json;
using System;
using System.Collections.Generic;
using System.ComponentModel.DataAnnotations;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;

namespace FikaAmazonAPI.AmazonSpApiSDK.Models.FulfillmentInboundv20240320
{
    /// <summary>
    /// Represents an msku and the related quantity.
    /// </summary>
    [DataContract]
    public partial class MskuQuantity :  IEquatable<MskuQuantity>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="MskuQuantity" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        public MskuQuantity() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="MskuQuantity" /> class.
        /// </summary>
        /// <param name="msku">The merchant SKU, a merchant-supplied identifier for a specific SKU. (required).</param>
        /// <param name="quantity">A positive integer.</param>
        public MskuQuantity(string msku = default(string), int? quantity = default(int?))
        {
            // to ensure "msku" is required (not null)
            if (msku == null)
            {
                throw new InvalidDataException("msku is a required property for MskuQuantity and cannot be null");
            }
            else
            {
                this.Msku = msku;
            }
            // to ensure "quantity" is required (not null)
            if (quantity == null)
            {
                throw new InvalidDataException("quantity is a required property for MskuQuantity and cannot be null");
            }
            else
            {
                this.Quantity = quantity;
            }
        }

        /// <summary>
        /// The merchant SKU, a merchant-supplied identifier for a specific SKU.
        /// </summary>
        /// <value>The merchant SKU, a merchant-supplied identifier for a specific SKU.</value>
        [DataMember(Name= "msku", EmitDefaultValue=false)]
        public string Msku { get; set; }

        /// <summary>
        /// A positive integer.
        /// </summary>
        /// <value>A positive integer.</value>
        [DataMember(Name="quantity", EmitDefaultValue=false)]
        public int? Quantity { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class MskuQuantity {\n");
            sb.Append("  Msku: ").Append(Msku).Append("\n");
            sb.Append("  Quantity: ").Append(Quantity).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as MskuQuantity);
        }

        /// <summary>
        /// Returns true if MskuQuantity instances are equal
        /// </summary>
        /// <param name="input">Instance of MskuQuantity to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(MskuQuantity input)
        {
            if (input == null)
                return false;

            return
                (
                    this.Msku == input.Msku ||
                    (this.Msku != null &&
                    this.Msku.Equals(input.Msku))
                ) &&
                (
                    this.Quantity == input.Quantity ||
                    (this.Quantity != null &&
                    this.Quantity.Equals(input.Quantity))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.Msku != null)
                    hashCode = hashCode * 59 + this.Msku.GetHashCode();
                if (this.Quantity != null)
                    hashCode = hashCode * 59 + this.Quantity.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            // Msku (string) maxLength
            if (this.Msku != null && this.Msku.Length > 40)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for Msku, length must be less than 40.", new [] { "Msku" });
            }

            // Msku (string) minLength
            if (this.Msku != null && this.Msku.Length < 1)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for Msku, length must be greater than 1.", new [] { "Msku" });
            }

            // Quantity (int?) maximum
            if(this.Quantity > (int?)10000)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for Quantity, must be a value less than or equal to 10000.", new [] { "Quantity" });
            }

            // Quantity (int?) minimum
            if(this.Quantity < (int?)1)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for Quantity, must be a value greater than or equal to 1.", new [] { "Quantity" });
            }

            yield break;
        }
    }

}
