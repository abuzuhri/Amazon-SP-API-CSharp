/* 
 * The Selling Partner API for FBA inbound operations.
 *
 * The Selling Partner API for Fulfillment By Amazon (FBA) Inbound. The FBA Inbound API enables building inbound workflows to create, manage, and send shipments into Amazon's fulfillment network. The API has interoperability with the Send-to-Amazon user interface.
 *
 * OpenAPI spec version: 2024-03-20
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using Newtonsoft.Json;
using System;
using System.Collections.Generic;
using System.ComponentModel.DataAnnotations;
using System.Runtime.Serialization;
using System.Text;

namespace FikaAmazonAPI.AmazonSpApiSDK.Models.FulfillmentInboundv20240320
{
    /// <summary>
    /// The shipping configurations supported for the packing option. Available modes are ground small parcel, freight less-than-truckload (LTL), freight full-truckload (FTL) palletized, freight FTL non-palletized, ocean less-than-container-load (LCL), ocean full-container load (FCL), air small parcel, and air small parcel express.
    /// </summary>
    [DataContract]
    public partial class ShippingConfiguration :  IEquatable<ShippingConfiguration>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="ShippingConfiguration" /> class.
        /// </summary>
        /// <param name="shippingMode">Mode of shipment transportation that this option will provide. Can be: GROUND_SMALL_PARCEL, FREIGHT_LTL, FREIGHT_FTL_PALLET, FREIGHT_FTL_NONPALLET, OCEAN_LCL, OCEAN_FCL, AIR_SMALL_PARCEL, AIR_SMALL_PARCEL_EXPRESS.</param>
        /// <param name="shippingSolution">Shipping program for the option. Can be: AMAZON_PARTNERED_CARRIER, USE_YOUR_OWN_CARRIER.</param>
        public ShippingConfiguration(ShippingMode? shippingMode = default(ShippingMode?), ShippingSolution? shippingSolution = default(ShippingSolution?))
        {
            this.ShippingMode = shippingMode;
            this.ShippingSolution = shippingSolution;
        }

        /// <summary>
        /// Mode of shipment transportation that this option will provide. Can be: GROUND_SMALL_PARCEL, FREIGHT_LTL, FREIGHT_FTL_PALLET, FREIGHT_FTL_NONPALLET, OCEAN_LCL, OCEAN_FCL, AIR_SMALL_PARCEL, AIR_SMALL_PARCEL_EXPRESS.
        /// </summary>
        /// <value>Mode of shipment transportation that this option will provide. Can be: GROUND_SMALL_PARCEL, FREIGHT_LTL, FREIGHT_FTL_PALLET, FREIGHT_FTL_NONPALLET, OCEAN_LCL, OCEAN_FCL, AIR_SMALL_PARCEL, AIR_SMALL_PARCEL_EXPRESS.</value>
        [DataMember(Name="shippingMode", EmitDefaultValue=false)]
        public ShippingMode? ShippingMode { get; set; }

        /// <summary>
        /// Shipping program for the option. Can be: AMAZON_PARTNERED_CARRIER, USE_YOUR_OWN_CARRIER.
        /// </summary>
        /// <value>Shipping program for the option. Can be: AMAZON_PARTNERED_CARRIER, USE_YOUR_OWN_CARRIER.</value>
        [DataMember(Name="shippingSolution", EmitDefaultValue=false)]
        public ShippingSolution? ShippingSolution { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class ShippingConfiguration {\n");
            sb.Append("  ShippingMode: ").Append(ShippingMode).Append("\n");
            sb.Append("  ShippingSolution: ").Append(ShippingSolution).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as ShippingConfiguration);
        }

        /// <summary>
        /// Returns true if ShippingConfiguration instances are equal
        /// </summary>
        /// <param name="input">Instance of ShippingConfiguration to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(ShippingConfiguration input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.ShippingMode == input.ShippingMode ||
                    (this.ShippingMode != null &&
                    this.ShippingMode.Equals(input.ShippingMode))
                ) && 
                (
                    this.ShippingSolution == input.ShippingSolution ||
                    (this.ShippingSolution != null &&
                    this.ShippingSolution.Equals(input.ShippingSolution))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.ShippingMode != null)
                    hashCode = hashCode * 59 + this.ShippingMode.GetHashCode();
                if (this.ShippingSolution != null)
                    hashCode = hashCode * 59 + this.ShippingSolution.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {

            yield break;
        }
    }

}
