/* 
 * The Selling Partner API for FBA inbound operations.
 *
 * The Selling Partner API for Fulfillment By Amazon (FBA) Inbound. The FBA Inbound API enables building inbound workflows to create, manage, and send shipments into Amazon's fulfillment network. The API has interoperability with the Send-to-Amazon user interface.
 *
 * OpenAPI spec version: 2024-03-20
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using Newtonsoft.Json;
using System;
using System.Collections.Generic;
using System.ComponentModel.DataAnnotations;
using System.IO;
using System.Linq;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;

namespace FikaAmazonAPI.AmazonSpApiSDK.Models.FulfillmentInboundv20240320
{
    /// <summary>
    /// The &#x60;getInboundOperationStatus&#x60; response.
    /// </summary>
    [DataContract]
    public partial class InboundOperationStatus :  IEquatable<InboundOperationStatus>, IValidatableObject
    {

        /// <summary>
        /// Initializes a new instance of the <see cref="InboundOperationStatus" /> class.
        /// </summary>
        /// <param name="operation">The name of the operation that was executed in the asynchronous API call. (required).</param>
        /// <param name="operationId">The operation Id returned by the asynchronous API call. (required).</param>
        /// <param name="operationProblems">The problems in the processing of the asynchronous operation. (required).</param>
        /// <param name="operationStatus">The status of an operation. Can be: SUCCESS, FAILED, IN_PROGRESS. (required).</param>
        public InboundOperationStatus(string operation = default(string),
                                      string operationId = default(string),
                                      List<OperationProblem> operationProblems = default(List<OperationProblem>),
                                      OperationStatus operationStatus = default(OperationStatus))
        {
            // to ensure "operation" is required (not null)
            if (operation == null)
            {
                throw new InvalidDataException("operation is a required property for InboundOperationStatus and cannot be null");
            }
            else
            {
                this.Operation = operation;
            }
            // to ensure "operationId" is required (not null)
            if (operationId == null)
            {
                throw new InvalidDataException("operationId is a required property for InboundOperationStatus and cannot be null");
            }
            else
            {
                this.OperationId = operationId;
            }
            // to ensure "operationProblems" is required (not null)
            if (operationProblems == null)
            {
                throw new InvalidDataException("operationProblems is a required property for InboundOperationStatus and cannot be null");
            }
            else
            {
                this.OperationProblems = operationProblems;
            }
            // to ensure "operationStatus" is required (not null)
            if (operationStatus == null)
            {
                throw new InvalidDataException("operationStatus is a required property for InboundOperationStatus and cannot be null");
            }
            else
            {
                this.OperationStatus = operationStatus;
            }
        }
        public InboundOperationStatus()
        {
            this.Operation = default(string);
            this.OperationId = default(string);
            this.OperationProblems = default(List<OperationProblem>);
            this.OperationStatus = default(OperationStatus);
        }

        /// <summary>
        /// The name of the operation that was executed in the asynchronous API call.
        /// </summary>
        /// <value>The name of the operation that was executed in the asynchronous API call.</value>
        [DataMember(Name="operation", EmitDefaultValue=false)]
        public string Operation { get; set; }

        /// <summary>
        /// The operation Id returned by the asynchronous API call.
        /// </summary>
        /// <value>The operation Id returned by the asynchronous API call.</value>
        [DataMember(Name="operationId", EmitDefaultValue=false)]
        public string OperationId { get; set; }

        /// <summary>
        /// The problems in the processing of the asynchronous operation.
        /// </summary>
        /// <value>The problems in the processing of the asynchronous operation.</value>
        [DataMember(Name="operationProblems", EmitDefaultValue=false)]
        public List<OperationProblem> OperationProblems { get; set; }

        /// <summary>
        /// The status of an operation. Can be: SUCCESS, FAILED, IN_PROGRESS.
        /// </summary>
        /// <value>The status of an operation. Can be: SUCCESS, FAILED, IN_PROGRESS.</value>
        [DataMember(Name = "operationStatus", EmitDefaultValue = false)]
        public OperationStatus OperationStatus { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class InboundOperationStatus {\n");
            sb.Append("  Operation: ").Append(Operation).Append("\n");
            sb.Append("  OperationId: ").Append(OperationId).Append("\n");
            sb.Append("  OperationProblems: ").Append(OperationProblems).Append("\n");
            sb.Append("  OperationStatus: ").Append(OperationStatus).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as InboundOperationStatus);
        }

        /// <summary>
        /// Returns true if InboundOperationStatus instances are equal
        /// </summary>
        /// <param name="input">Instance of InboundOperationStatus to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(InboundOperationStatus input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.Operation == input.Operation ||
                    (this.Operation != null &&
                    this.Operation.Equals(input.Operation))
                ) && 
                (
                    this.OperationId == input.OperationId ||
                    (this.OperationId != null &&
                    this.OperationId.Equals(input.OperationId))
                ) && 
                (
                    this.OperationProblems == input.OperationProblems ||
                    this.OperationProblems != null &&
                    this.OperationProblems.SequenceEqual(input.OperationProblems)
                ) && 
                (
                    this.OperationStatus == input.OperationStatus ||
                    (this.OperationStatus != null &&
                    this.OperationStatus.Equals(input.OperationStatus))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.Operation != null)
                    hashCode = hashCode * 59 + this.Operation.GetHashCode();
                if (this.OperationId != null)
                    hashCode = hashCode * 59 + this.OperationId.GetHashCode();
                if (this.OperationProblems != null)
                    hashCode = hashCode * 59 + this.OperationProblems.GetHashCode();
                if (this.OperationStatus != null)
                    hashCode = hashCode * 59 + this.OperationStatus.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            // Operation (string) maxLength
            if(this.Operation != null && this.Operation.Length > 1024)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for Operation, length must be less than 1024.", new [] { "Operation" });
            }

            // Operation (string) minLength
            if(this.Operation != null && this.Operation.Length < 1)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for Operation, length must be greater than 1.", new [] { "Operation" });
            }

            // OperationId (string) maxLength
            if(this.OperationId != null && this.OperationId.Length > 38)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for OperationId, length must be less than 38.", new [] { "OperationId" });
            }

            // OperationId (string) minLength
            if(this.OperationId != null && this.OperationId.Length < 36)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for OperationId, length must be greater than 36.", new [] { "OperationId" });
            }

            // OperationId (string) pattern
            Regex regexOperationId = new Regex(@"^[a-zA-Z0-9-]*$", RegexOptions.CultureInvariant);
            if (false == regexOperationId.Match(this.OperationId).Success)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for OperationId, must match a pattern of " + regexOperationId, new [] { "OperationId" });
            }

            yield break;
        }
    }

}
