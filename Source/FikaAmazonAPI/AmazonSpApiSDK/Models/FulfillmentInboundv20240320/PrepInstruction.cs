/* 
 * The Selling Partner API for FBA inbound operations.
 *
 * The Selling Partner API for Fulfillment By Amazon (FBA) Inbound. The FBA Inbound API enables building inbound workflows to create, manage, and send shipments into Amazon's fulfillment network. The API has interoperability with the Send-to-Amazon user interface.
 *
 * OpenAPI spec version: 2024-03-20
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using Newtonsoft.Json;
using System;
using System.Collections.Generic;
using System.ComponentModel.DataAnnotations;
using System.Runtime.Serialization;
using System.Text;

namespace FikaAmazonAPI.AmazonSpApiSDK.Models.FulfillmentInboundv20240320
{
    /// <summary>
    /// Information pertaining to the preparation of inbound goods.
    /// </summary>
    [DataContract]
    public partial class PrepInstruction :  IEquatable<PrepInstruction>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="PrepInstruction" /> class.
        /// </summary>
        /// <param name="fee">fee.</param>
        /// <param name="prepOwner">In some situations, special preparations are required for items and this field reflects the owner of the preparations. Options include AMAZON, SELLER or NONE.</param>
        /// <param name="prepType">Type of preparation that should be done. Can be: ITEM_LABELING, ITEM_BUBBLEWRAP, ITEM_POLYBAGGING, ITEM_TAPING, ITEM_BLACK_SHRINKWRAP, ITEM_HANG_GARMENT, ITEM_BOXING, ITEM_SETCREAT, ITEM_RMOVHANG, ITEM_SUFFOSTK, ITEM_CAP_SEALING, ITEM_DEBUNDLE, ITEM_SETSTK, ITEM_SIOC, ITEM_NO_PREP, ADULT, BABY, TEXTILE, HANGER, FRAGILE, LIQUID, SHARP, SMALL, PERFORATED, GRANULAR, SET, FC_PROVIDED, UNKNOWN, NONE.</param>
        public PrepInstruction(Currency fee = default(Currency), PrepOwner? prepOwner = default(PrepOwner?), PrepType? prepType = default(PrepType?))
        {
            this.Fee = fee;
            this.PrepOwner = prepOwner;
            this.PrepType = prepType;
        }
        
        /// <summary>
        /// Gets or Sets Fee
        /// </summary>
        [DataMember(Name="fee", EmitDefaultValue=false)]
        public Currency Fee { get; set; }

        /// <summary>
        /// In some situations, special preparations are required for items and this field reflects the owner of the preparations. Options include AMAZON, SELLER or NONE.
        /// </summary>
        /// <value>In some situations, special preparations are required for items and this field reflects the owner of the preparations. Options include AMAZON, SELLER or NONE.</value>
        [DataMember(Name="prepOwner", EmitDefaultValue=false)]
        public PrepOwner? PrepOwner { get; set; }

        /// <summary>
        /// Type of preparation that should be done. Can be: ITEM_LABELING, ITEM_BUBBLEWRAP, ITEM_POLYBAGGING, ITEM_TAPING, ITEM_BLACK_SHRINKWRAP, ITEM_HANG_GARMENT, ITEM_BOXING, ITEM_SETCREAT, ITEM_RMOVHANG, ITEM_SUFFOSTK, ITEM_CAP_SEALING, ITEM_DEBUNDLE, ITEM_SETSTK, ITEM_SIOC, ITEM_NO_PREP, ADULT, BABY, TEXTILE, HANGER, FRAGILE, LIQUID, SHARP, SMALL, PERFORATED, GRANULAR, SET, FC_PROVIDED, UNKNOWN, NONE.
        /// </summary>
        /// <value>Type of preparation that should be done. Can be: ITEM_LABELING, ITEM_BUBBLEWRAP, ITEM_POLYBAGGING, ITEM_TAPING, ITEM_BLACK_SHRINKWRAP, ITEM_HANG_GARMENT, ITEM_BOXING, ITEM_SETCREAT, ITEM_RMOVHANG, ITEM_SUFFOSTK, ITEM_CAP_SEALING, ITEM_DEBUNDLE, ITEM_SETSTK, ITEM_SIOC, ITEM_NO_PREP, ADULT, BABY, TEXTILE, HANGER, FRAGILE, LIQUID, SHARP, SMALL, PERFORATED, GRANULAR, SET, FC_PROVIDED, UNKNOWN, NONE.</value>
        [DataMember(Name="prepType", EmitDefaultValue=false)]
        public PrepType? PrepType { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class PrepInstruction {\n");
            sb.Append("  Fee: ").Append(Fee).Append("\n");
            sb.Append("  PrepOwner: ").Append(PrepOwner).Append("\n");
            sb.Append("  PrepType: ").Append(PrepType).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as PrepInstruction);
        }

        /// <summary>
        /// Returns true if PrepInstruction instances are equal
        /// </summary>
        /// <param name="input">Instance of PrepInstruction to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(PrepInstruction input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.Fee == input.Fee ||
                    (this.Fee != null &&
                    this.Fee.Equals(input.Fee))
                ) && 
                (
                    this.PrepOwner == input.PrepOwner ||
                    (this.PrepOwner != null &&
                    this.PrepOwner.Equals(input.PrepOwner))
                ) && 
                (
                    this.PrepType == input.PrepType ||
                    (this.PrepType != null &&
                    this.PrepType.Equals(input.PrepType))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.Fee != null)
                    hashCode = hashCode * 59 + this.Fee.GetHashCode();
                if (this.PrepOwner != null)
                    hashCode = hashCode * 59 + this.PrepOwner.GetHashCode();
                if (this.PrepType != null)
                    hashCode = hashCode * 59 + this.PrepType.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {

            yield break;
        }
    }

}
