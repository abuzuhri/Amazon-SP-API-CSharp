/* 
 * The Selling Partner API for FBA inbound operations.
 *
 * The Selling Partner API for Fulfillment By Amazon (FBA) Inbound. The FBA Inbound API enables building inbound workflows to create, manage, and send shipments into Amazon's fulfillment network. The API has interoperability with the Send-to-Amazon user interface.
 *
 * OpenAPI spec version: 2024-03-20
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using Newtonsoft.Json;
using System;
using System.Collections.Generic;
using System.ComponentModel.DataAnnotations;
using System.IO;
using System.Linq;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;

namespace FikaAmazonAPI.AmazonSpApiSDK.Models.FulfillmentInboundv20240320
{
    /// <summary>
    /// The createMarketplaceItemLabels request.
    /// </summary>
    [DataContract]
    public partial class CreateMarketplaceItemLabelsRequest :  IEquatable<CreateMarketplaceItemLabelsRequest>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="CreateMarketplaceItemLabelsRequest" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        public CreateMarketplaceItemLabelsRequest() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="CreateMarketplaceItemLabelsRequest" /> class.
        /// </summary>
        /// <param name="height">The height of the item label.</param>
        /// <param name="labelType">Indicates the type of print type for a given label. (required).</param>
        /// <param name="localeCode">The locale code constructed from ISO 639 language code and ISO 3166-1 alpha-2 standard of country codes separated by an underscore character.</param>
        /// <param name="marketplaceId">The Marketplace ID. (required).</param>
        /// <param name="mskuQuantities">Represents the quantity of an msku to print item labels for. (required).</param>
        /// <param name="pageType">The page type to use to print the labels. Possible values: A4_21, A4_24, A4_24_64x33, A4_24_66x35, A4_24_70x36, A4_24_70x37, A4_24i, A4_27, A4_40_52x29, A4_44_48x25, Letter_30.</param>
        /// <param name="width">The width of the item label.</param>
        public CreateMarketplaceItemLabelsRequest(decimal? height = default(decimal?),
                                                  LabelPrintType labelType = default(LabelPrintType),
                                                  string localeCode = default(string),
                                                  string marketplaceId = default(string),
                                                  List<MskuQuantity> mskuQuantities = default(List<MskuQuantity>),
                                                  ItemLabelPageType? pageType = default(ItemLabelPageType?),
                                                  decimal? width = default(decimal?))
        {
            // to ensure "labelType" is required (not null)
            if (labelType == null)
            {
                throw new InvalidDataException("labelType is a required property for CreateMarketplaceItemLabelsRequest and cannot be null");
            }
            else
            {
                this.LabelType = labelType;
            }
            // to ensure "marketplaceId" is required (not null)
            if (marketplaceId == null)
            {
                throw new InvalidDataException("marketplaceId is a required property for CreateMarketplaceItemLabelsRequest and cannot be null");
            }
            else
            {
                this.MarketplaceId = marketplaceId;
            }
            // to ensure "mskuQuantities" is required (not null)
            if (mskuQuantities == null)
            {
                throw new InvalidDataException("mskuQuantities is a required property for CreateMarketplaceItemLabelsRequest and cannot be null");
            }
            else
            {
                this.MskuQuantities = mskuQuantities;
            }
            this.Height = height;
            this.LocaleCode = localeCode;
            this.PageType = pageType;
            this.Width = width;
        }

        /// <summary>
        /// The height of the item label. 
        /// </summary>
        /// <value>The height of the item label.</value>
        [DataMember(Name= "height", EmitDefaultValue=false)]
        public decimal? Height { get; set; }

        /// <summary>
        /// Indicates the type of print type for a given label.
        /// </summary>
        /// <value>Indicates the type of print type for a given label.</value>
        [DataMember(Name= "labelType", EmitDefaultValue=false)]
        public LabelPrintType LabelType { get; set; }

        /// <summary>
        /// The locale code constructed from ISO 639 language code and ISO 3166-1 alpha-2 standard of country codes separated by an underscore character.
        /// </summary>
        /// <value>The locale code constructed from ISO 639 language code and ISO 3166-1 alpha-2 standard of country codes separated by an underscore character.</value>
        [DataMember(Name= "localeCode", EmitDefaultValue=false)]
        public string LocaleCode { get; set; }

        /// <summary>
        /// The Marketplace ID. Refer to Marketplace IDs for a list of possible values.
        /// </summary>
        /// <value>The Marketplace ID. Refer to Marketplace IDs for a list of possible values.</value>
        [DataMember(Name= "marketplaceId", EmitDefaultValue=false)]
        public string MarketplaceId { get; set; }

        /// <summary>
        /// Represents the quantity of an msku to print item labels for.
        /// </summary>
        /// <value>Represents the quantity of an msku to print item labels for.</value>
        [DataMember(Name = "mskuQuantities", EmitDefaultValue = false)]
        public List<MskuQuantity> MskuQuantities { get; set; }

        /// <summary>
        /// The page type to use to print the labels. Possible values: A4_21, A4_24, A4_24_64x33, A4_24_66x35, A4_24_70x36, A4_24_70x37, A4_24i, A4_27, A4_40_52x29, A4_44_48x25, Letter_30.
        /// </summary>
        /// <value>The page type to use to print the labels. Possible values: A4_21, A4_24, A4_24_64x33, A4_24_66x35, A4_24_70x36, A4_24_70x37, A4_24i, A4_27, A4_40_52x29, A4_44_48x25, Letter_30.</value>
        [DataMember(Name = "pageType", EmitDefaultValue = false)]
        public ItemLabelPageType? PageType { get; set; }

        /// <summary>
        /// The width of the item label.
        /// </summary>
        /// <value>The width of the item label.</value>
        [DataMember(Name = "width", EmitDefaultValue = false)]
        public decimal? Width { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class CreateMarketplaceItemLabelsRequest {\n");
            sb.Append("  Height: ").Append(Height).Append("\n");
            sb.Append("  LabelType: ").Append(LabelType).Append("\n");
            sb.Append("  LocaleCode: ").Append(LocaleCode).Append("\n");
            sb.Append("  MarketplaceId: ").Append(MarketplaceId).Append("\n");
            sb.Append("  MskuQuantities: ").Append(MskuQuantities).Append("\n");
            sb.Append("  PageType: ").Append(PageType).Append("\n");
            sb.Append("  Width: ").Append(Width).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as CreateMarketplaceItemLabelsRequest);
        }

        /// <summary>
        /// Returns true if CreateMarketplaceItemLabelsRequest instances are equal
        /// </summary>
        /// <param name="input">Instance of CreateMarketplaceItemLabelsRequest to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(CreateMarketplaceItemLabelsRequest input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.Height == input.Height ||
                    this.Height != null &&
                    this.Height.Equals(input.Height)
                ) && 
                (
                    this.LabelType == input.LabelType ||
                    this.LabelType != null &&
                    this.LabelType.Equals(input.LabelType)
                ) && 
                (
                    this.LocaleCode == input.LocaleCode ||
                    (this.LocaleCode != null &&
                    this.LocaleCode.Equals(input.LocaleCode))
                ) && 
                (
                    this.MarketplaceId == input.MarketplaceId ||
                    (this.MarketplaceId != null &&
                    this.MarketplaceId.Equals(input.MarketplaceId))
                ) &&
                (
                    this.MskuQuantities == input.MskuQuantities ||
                    (this.MskuQuantities != null &&
                    this.MskuQuantities.SequenceEqual(input.MskuQuantities))
                ) &&
                (
                    this.PageType == input.PageType ||
                    (this.PageType != null &&
                    this.PageType.Equals(input.PageType))
                ) &&
                (
                    this.Width == input.Width ||
                    (this.Width != null &&
                    this.Width.Equals(input.Width))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.Height != null)
                    hashCode = hashCode * 59 + this.Height.GetHashCode();
                if (this.LabelType != null)
                    hashCode = hashCode * 59 + this.LabelType.GetHashCode();
                if (this.LocaleCode != null)
                    hashCode = hashCode * 59 + this.LocaleCode.GetHashCode();
                if (this.MarketplaceId != null)
                    hashCode = hashCode * 59 + this.MarketplaceId.GetHashCode();
                if (this.MskuQuantities != null)
                    hashCode = hashCode * 59 + this.MskuQuantities.GetHashCode();
                if (this.PageType != null)
                    hashCode = hashCode * 59 + this.PageType.GetHashCode();
                if (this.Width != null)
                    hashCode = hashCode * 59 + this.Width.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            // MarketplaceId (string) maxLength
            if (this.MarketplaceId != null && this.MarketplaceId.Length > 256)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for MarketplaceId, length must be less than 256.", new [] { "MarketplaceId" });
            }

            // MarketplaceId (string) minLength
            if (this.MarketplaceId != null && this.MarketplaceId.Length < 1)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for MarketplaceId, length must be greater than 1.", new [] { "MarketplaceId" });
            }

            // LocaleCode (string) pattern
            Regex regexLocaleCode = new Regex(@"^[a-z]{2}_[A-Z]{2}$", RegexOptions.CultureInvariant);
            if (false == regexLocaleCode.Match(this.LocaleCode).Success)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for LocaleCode, must match a pattern of " + regexLocaleCode, new[] { "LocaleCode" });
            }

            // Height (decimal?) maximum
            if (this.Height > (decimal?)100)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for Height, must be a value less than or equal to 100.", new[] { "Height" });
            }

            // Height (decimal?) minimum
            if (this.Height < (decimal?)25)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for Height, must be a value greater than or equal to 25.", new[] { "Height" });
            }

            // Width (decimal?) maximum
            if (this.Width > (decimal?)100)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for Width, must be a value less than or equal to 100.", new[] { "Width" });
            }

            // Width (decimal?) minimum
            if (this.Width < (decimal?)25)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for Width, must be a value greater than or equal to 25.", new[] { "Width" });
            }

            yield break;
        }
    }

}
