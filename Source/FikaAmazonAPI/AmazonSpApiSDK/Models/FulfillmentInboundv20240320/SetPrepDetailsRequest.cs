/* 
 * The Selling Partner API for FBA inbound operations.
 *
 * The Selling Partner API for Fulfillment By Amazon (FBA) Inbound. The FBA Inbound API enables building inbound workflows to create, manage, and send shipments into Amazon's fulfillment network. The API has interoperability with the Send-to-Amazon user interface.
 *
 * OpenAPI spec version: 2024-03-20
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using Newtonsoft.Json;
using System;
using System.Collections.Generic;
using System.ComponentModel.DataAnnotations;
using System.IO;
using System.Linq;
using System.Runtime.Serialization;
using System.Text;

namespace FikaAmazonAPI.AmazonSpApiSDK.Models.FulfillmentInboundv20240320
{
    /// <summary>
    /// The &#x60;setPrepDetails&#x60; request.
    /// </summary>
    [DataContract]
    public partial class SetPrepDetailsRequest : IEquatable<SetPrepDetailsRequest>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="SetPrepDetailsRequest" /> class.
        /// </summary>
        [JsonConstructorAttribute]
    	public SetPrepDetailsRequest() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="SetPrepDetailsRequest" /> class.
        /// </summary>
        /// <param name="marketplaceId">The marketplace ID. For a list of possible values, refer to [Marketplace IDs](https://developer-docs.amazon.com/sp-api/docs/marketplace-ids). (required).</param>
        /// <param name="mskuPrepDetails">A list of MSKUs and related prep details. (required).</param>
        public SetPrepDetailsRequest(string marketplaceId = default(string), List<MskuPrepDetailInput> mskuPrepDetails = default(List<MskuPrepDetailInput>))
        {
            // to ensure "marketplaceId" is required (not null)
            if (marketplaceId == null)
            {
                throw new InvalidDataException("marketplaceId is a required property for SetPrepDetailsRequest and cannot be null");
            }
            else
            {
                this.MarketplaceId = marketplaceId;
            }
            // to ensure "mskuPrepDetails" is required (not null)
            if (mskuPrepDetails == null)
            {
                throw new InvalidDataException("mskuPrepDetails is a required property for SetPrepDetailsRequest and cannot be null");
            }
            else
            {
                this.MskuPrepDetails = mskuPrepDetails;
            }
        }

        /// <summary>
        /// The marketplace ID. For a list of possible values, refer to [Marketplace IDs](https://developer-docs.amazon.com/sp-api/docs/marketplace-ids).
        /// </summary>
        /// <value>The marketplace ID. For a list of possible values, refer to [Marketplace IDs](https://developer-docs.amazon.com/sp-api/docs/marketplace-ids).</value>
        [DataMember(Name = "marketplaceId", EmitDefaultValue = false)]
        public string MarketplaceId { get; set; }

        /// <summary>
        /// A list of MSKUs and related prep details.
        /// </summary>
        /// <value>A list of MSKUs and related prep details.</value>
        [DataMember(Name = "mskuPrepDetails", EmitDefaultValue = false)]
        public List<MskuPrepDetailInput> MskuPrepDetails { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class SetPrepDetailsRequest {\n");
            sb.Append("  MarketplaceId: ").Append(MarketplaceId).Append("\n");
            sb.Append("  MskuPrepDetails: ").Append(MskuPrepDetails).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as SetPrepDetailsRequest);
        }

        /// <summary>
        /// Returns true if SetPrepDetailsRequest instances are equal
        /// </summary>
        /// <param name="input">Instance of SetPrepDetailsRequest to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(SetPrepDetailsRequest input)
        {
            if (input == null)
                return false;

            return
                (
                    this.MarketplaceId == input.MarketplaceId ||
                    (this.MarketplaceId != null &&
                    this.MarketplaceId.Equals(input.MarketplaceId))
                ) &&
                (
                    this.MskuPrepDetails == input.MskuPrepDetails ||
                    this.MskuPrepDetails != null &&
                    this.MskuPrepDetails.SequenceEqual(input.MskuPrepDetails)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.MarketplaceId != null)
                    hashCode = hashCode * 59 + this.MarketplaceId.GetHashCode();
                if (this.MskuPrepDetails != null)
                    hashCode = hashCode * 59 + this.MskuPrepDetails.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            // MarketplaceId (string) maxLength
            if (this.MarketplaceId != null && this.MarketplaceId.Length > 20)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for MarketplaceId, length must be less than 20.", new[] { "MarketplaceId" });
            }

            // MarketplaceId (string) minLength
            if (this.MarketplaceId != null && this.MarketplaceId.Length < 1)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for MarketplaceId, length must be greater than 1.", new[] { "MarketplaceId" });
            }

            yield break;
        }
    }

}
