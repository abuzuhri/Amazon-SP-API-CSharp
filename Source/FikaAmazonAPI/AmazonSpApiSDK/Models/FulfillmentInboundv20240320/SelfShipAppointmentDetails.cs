/* 
 * The Selling Partner API for FBA inbound operations.
 *
 * The Selling Partner API for Fulfillment By Amazon (FBA) Inbound. The FBA Inbound API enables building inbound workflows to create, manage, and send shipments into Amazon's fulfillment network. The API has interoperability with the Send-to-Amazon user interface.
 *
 * OpenAPI spec version: 2024-03-20
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using Newtonsoft.Json;
using System;
using System.Collections.Generic;
using System.ComponentModel.DataAnnotations;
using System.Runtime.Serialization;
using System.Text;

namespace FikaAmazonAPI.AmazonSpApiSDK.Models.FulfillmentInboundv20240320
{
    /// <summary>
    /// Appointment details for carrier pickup or fulfillment center appointments.
    /// </summary>
    [DataContract]
    public partial class SelfShipAppointmentDetails :  IEquatable<SelfShipAppointmentDetails>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="SelfShipAppointmentDetails" /> class.
        /// </summary>
        /// <param name="appointmentId">Identifier for appointment.</param>
        /// <param name="appointmentSlotTime">An appointment slot time with start and end.</param>
        /// <param name="appointmentStatus">Status of the appointment.</param>
        public SelfShipAppointmentDetails(decimal? appointmentId = default(decimal?), AppointmentSlotTime appointmentSlotTime = default(AppointmentSlotTime), string appointmentStatus = default(string))
        {
            this.AppointmentId = appointmentId;
            this.AppointmentSlotTime = appointmentSlotTime;
            this.AppointmentStatus = appointmentStatus;
        }
        
        /// <summary>
        /// Identifier for appointment.
        /// </summary>
        /// <value>Identifier for appointment.</value>
        [DataMember(Name="appointmentId", EmitDefaultValue=false)]
        public decimal? AppointmentId { get; set; }

        /// <summary>
        /// Gets or Sets AppointmentSlotTime
        /// </summary>
        [DataMember(Name="appointmentSlotTime", EmitDefaultValue=false)]
        public AppointmentSlotTime AppointmentSlotTime { get; set; }

        /// <summary>
        /// Status of the appointment.
        /// </summary>
        /// <value>Status of the appointment.</value>
        [DataMember(Name="appointmentStatus", EmitDefaultValue=false)]
        public string AppointmentStatus { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class SelfShipAppointmentDetails {\n");
            sb.Append("  AppointmentId: ").Append(AppointmentId).Append("\n");
            sb.Append("  AppointmentSlotTime: ").Append(AppointmentSlotTime).Append("\n");
            sb.Append("  AppointmentStatus: ").Append(AppointmentStatus).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as SelfShipAppointmentDetails);
        }

        /// <summary>
        /// Returns true if SelfShipAppointmentDetails instances are equal
        /// </summary>
        /// <param name="input">Instance of SelfShipAppointmentDetails to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(SelfShipAppointmentDetails input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.AppointmentId == input.AppointmentId ||
                    (this.AppointmentId != null &&
                    this.AppointmentId.Equals(input.AppointmentId))
                ) && 
                (
                    this.AppointmentSlotTime == input.AppointmentSlotTime ||
                    (this.AppointmentSlotTime != null &&
                    this.AppointmentSlotTime.Equals(input.AppointmentSlotTime))
                ) && 
                (
                    this.AppointmentStatus == input.AppointmentStatus ||
                    (this.AppointmentStatus != null &&
                    this.AppointmentStatus.Equals(input.AppointmentStatus))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.AppointmentId != null)
                    hashCode = hashCode * 59 + this.AppointmentId.GetHashCode();
                if (this.AppointmentSlotTime != null)
                    hashCode = hashCode * 59 + this.AppointmentSlotTime.GetHashCode();
                if (this.AppointmentStatus != null)
                    hashCode = hashCode * 59 + this.AppointmentStatus.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            // AppointmentStatus (string) maxLength
            if(this.AppointmentStatus != null && this.AppointmentStatus.Length > 1024)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for AppointmentStatus, length must be less than 1024.", new [] { "AppointmentStatus" });
            }

            // AppointmentStatus (string) minLength
            if(this.AppointmentStatus != null && this.AppointmentStatus.Length < 1)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for AppointmentStatus, length must be greater than 1.", new [] { "AppointmentStatus" });
            }

            yield break;
        }
    }

}
