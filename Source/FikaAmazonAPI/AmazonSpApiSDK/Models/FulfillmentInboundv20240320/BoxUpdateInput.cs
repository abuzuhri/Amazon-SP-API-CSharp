/* 
 * The Selling Partner API for FBA inbound operations.
 *
 * The Selling Partner API for Fulfillment By Amazon (FBA) Inbound. The FBA Inbound API enables building inbound workflows to create, manage, and send shipments into Amazon's fulfillment network. The API has interoperability with the Send-to-Amazon user interface.
 *
 * OpenAPI spec version: 2024-03-20
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using Newtonsoft.Json;
using System;
using System.Collections.Generic;
using System.ComponentModel.DataAnnotations;
using System.IO;
using System.Linq;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;

namespace FikaAmazonAPI.AmazonSpApiSDK.Models.FulfillmentInboundv20240320
{
    /// <summary>
    /// Input information for updating a box
    /// </summary>
    [DataContract]
    public partial class BoxUpdateInput :  IEquatable<BoxUpdateInput>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="BoxUpdateInput" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        public BoxUpdateInput() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="BoxUpdateInput" /> class.
        /// </summary>
        /// <param name="contentInformationSource">Indication of how box content is meant to be provided. (required).</param>
        /// <param name="dimensions">Measurement of a package's dimensions. (required).</param>
        /// <param name="items">The items and their quantity in the box. This must be empty if the box contentInformationSource is BARCODE_2D or MANUAL_PROCESS.</param>
        /// <param name="packageId">Primary key to uniquely identify a Box Package. PackageId must be provided if the intent is to update an existing box. Adding a new box will not require providing this value. Any existing PackageIds not provided will be treated as to-be-removed</param>
        /// <param name="quantity">The number of containers where all other properties like weight or dimensions are identical. (required).</param>
        /// <param name="weight">The weight of a package. (required).</param>
        public BoxUpdateInput(BoxContentInformationSource contentInformationSource = default(BoxContentInformationSource),
                              Dimensions dimensions = default(Dimensions),
                              List<ItemInput> items = default(List<ItemInput>),
                              string packageId = default(string),
                              int? quantity = default(int?),
                              Weight weight = default(Weight))
        {
            // to ensure "contentInformationSource" is required (not null)
            if (contentInformationSource == null)
            {
                throw new InvalidDataException("contentInformationSource is a required property for BoxUpdateInput and cannot be null");
            }
            else
            {
                this.ContentInformationSource = contentInformationSource;
            }
            // to ensure "dimensions" is required (not null)
            if (dimensions == null)
            {
                throw new InvalidDataException("dimensions is a required property for BoxUpdateInput and cannot be null");
            }
            else
            {
                this.Dimensions = dimensions;
            }
            // to ensure "quantity" is required (not null)
            if (quantity == null)
            {
                throw new InvalidDataException("quantity is a required property for BoxUpdateInput and cannot be null");
            }
            else
            {
                this.Quantity = quantity;
            }
            // to ensure "weight" is required (not null)
            if (weight == null)
            {
                throw new InvalidDataException("weight is a required property for BoxUpdateInput and cannot be null");
            }
            else
            {
                this.Weight = weight;
            }
            this.PackageId = packageId;
            this.Items = items;
        }

        /// <summary>
        /// Indication of how box content is meant to be provided.
        /// </summary>
        /// <value>Indication of how box content is meant to be provided.</value>
        [DataMember(Name="contentInformationSource", EmitDefaultValue = false)]
        public BoxContentInformationSource ContentInformationSource { get; set; }

        /// <summary>
        /// Measurement of a package's dimensions.
        /// </summary>
        /// <value>Measurement of a package's dimensions.</value>
        [DataMember(Name="dimensions", EmitDefaultValue=false)]
        public Dimensions Dimensions { get; set; }

        /// <summary>
        /// The items and their quantity in the box. This must be empty if the box contentInformationSource is BARCODE_2D or MANUAL_PROCESS.
        /// </summary>
        /// <value>The items and their quantity in the box. This must be empty if the box contentInformationSource is BARCODE_2D or MANUAL_PROCESS.</value>
        [DataMember(Name="items", EmitDefaultValue = false)]
        public List<ItemInput> Items { get; set; }

        /// <summary>
        /// Primary key to uniquely identify a Box Package. PackageId must be provided if the intent is to update an existing box. Adding a new box will not require providing this value. Any existing PackageIds not provided will be treated as to-be-removed.
        /// </summary>
        /// <value>Primary key to uniquely identify a Box Package. PackageId must be provided if the intent is to update an existing box. Adding a new box will not require providing this value. Any existing PackageIds not provided will be treated as to-be-removed.</value>
        [DataMember(Name="packageId", EmitDefaultValue = false)]
        public string PackageId { get; set; }

        /// <summary>
        /// The number of containers where all other properties like weight or dimensions are identical.
        /// </summary>
        /// <value>The number of containers where all other properties like weight or dimensions are identical.</value>
        [DataMember(Name="quantity", EmitDefaultValue=false)]
        public int? Quantity { get; set; }

        /// <summary>
        /// The weight of a package.
        /// </summary>
        /// <value>The weight of a package.</value>
        [DataMember(Name="weight", EmitDefaultValue=false)]
        public Weight Weight { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class BoxUpdateInput {\n");
            sb.Append("  ContentInformationSource: ").Append(ContentInformationSource).Append("\n");
            sb.Append("  Dimensions: ").Append(Dimensions).Append("\n");
            sb.Append("  Items: ").Append(Items).Append("\n");
            sb.Append("  PackageId: ").Append(PackageId).Append("\n");
            sb.Append("  Quantity: ").Append(Quantity).Append("\n");
            sb.Append("  Weight: ").Append(Weight).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as BoxUpdateInput);
        }

        /// <summary>
        /// Returns true if BoxUpdateInput instances are equal
        /// </summary>
        /// <param name="input">Instance of BoxUpdateInput to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(BoxUpdateInput input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.ContentInformationSource == input.ContentInformationSource ||
                    (this.ContentInformationSource != null &&
                    this.ContentInformationSource.Equals(input.ContentInformationSource))
                ) && 
                (
                    this.Dimensions == input.Dimensions ||
                    (this.Dimensions != null &&
                    this.Dimensions.Equals(input.Dimensions))
                ) &&
                (
                    this.Items == input.Items ||
                    (this.Items != null &&
                    this.Items.SequenceEqual(input.Items))
                ) &&
                (
                    this.PackageId == input.PackageId ||
                    (this.PackageId != null &&
                    this.PackageId.Equals(input.PackageId))
                ) &&
                (
                    this.Quantity == input.Quantity ||
                    (this.Quantity != null &&
                    this.Quantity.Equals(input.Quantity))
                ) &&
                (
                    this.Weight == input.Weight ||
                    (this.Weight != null &&
                    this.Weight.Equals(input.Weight))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.ContentInformationSource != null)
                    hashCode = hashCode * 59 + this.ContentInformationSource.GetHashCode();
                if (this.Dimensions != null)
                    hashCode = hashCode * 59 + this.Dimensions.GetHashCode();
                if (this.Items != null)
                    hashCode = hashCode * 59 + this.Items.GetHashCode();
                if (this.PackageId != null)
                    hashCode = hashCode * 59 + this.PackageId.GetHashCode();
                if (this.Quantity != null)
                    hashCode = hashCode * 59 + this.Quantity.GetHashCode();
                if (this.Weight != null)
                    hashCode = hashCode * 59 + this.Weight.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            // PackageId (string) maxLength
            if (this.PackageId != null && this.PackageId.Length > 38)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for PackageId, length must be less than 38.", new[] { "PackageId" });
            }

            // PackageId (string) minLength
            if (this.PackageId != null && this.PackageId.Length < 38)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for PackageId, length must be greater than 38.", new[] { "PackageId" });
            }

            // PackageId (string) pattern
            Regex regexPackageId = new Regex(@"^[a-zA-Z0-9-]*$", RegexOptions.CultureInvariant);
            if (false == regexPackageId.Match(this.PackageId).Success)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for PackageId, must match a pattern of " + regexPackageId, new[] { "PackageId" });
            }

            // Quantity (int?) maximum
            if (this.Quantity > (int?)10000)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for Quantity, must be a value less than or equal to 10000.", new [] { "Quantity" });
            }

            // Quantity (int?) minimum
            if(this.Quantity < (int?)1)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for Quantity, must be a value greater than or equal to 1.", new [] { "Quantity" });
            }

            yield break;
        }
    }

}
