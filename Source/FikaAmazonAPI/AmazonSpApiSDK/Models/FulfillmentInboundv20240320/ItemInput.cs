/* 
 * The Selling Partner API for FBA inbound operations.
 *
 * The Selling Partner API for Fulfillment By Amazon (FBA) Inbound. The FBA Inbound API enables building inbound workflows to create, manage, and send shipments into Amazon's fulfillment network. The API has interoperability with the Send-to-Amazon user interface.
 *
 * OpenAPI spec version: 2024-03-20
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using FikaAmazonAPI.Utils;
using Newtonsoft.Json;
using System;
using System.Collections.Generic;
using System.ComponentModel.DataAnnotations;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;

namespace FikaAmazonAPI.AmazonSpApiSDK.Models.FulfillmentInboundv20240320
{
    /// <summary>
    /// Defines an item&#39;s input parameters.
    /// </summary>
    [DataContract]
    public partial class ItemInput :  IEquatable<ItemInput>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="ItemInput" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        public ItemInput() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="ItemInput" /> class.
        /// </summary>
        /// <param name="expiration">The expiration date of the MSKU in ISO 8601 format. The same MSKU with different expiration dates cannot go into the same box.</param>
        /// <param name="labelOwner">Specifies who will label the items. Options include AMAZON, SELLER or NONE. (required).</param>
        /// <param name="manufacturingLotCode">The manufacturing lot code.</param>
        /// <param name="msku">The merchant SKU. (required).</param>
        /// <param name="prepOwner">In some situations, special preparations are required for items and this field reflects the owner of the preparations. Options include AMAZON, SELLER or NONE. (required).</param>
        /// <param name="quantity">The number of units of the specified MSKU that will be shipped. (required).</param>
        public ItemInput(DateTime? expiration = default(DateTime?),
                         LabelOwner labelOwner = default(LabelOwner),
                         string manufacturingLotCode = default(string),
                         string msku = default(string),
                         PrepOwner prepOwner = default(PrepOwner),
                         int? quantity = default(int?))
        {
            // to ensure "labelOwner" is required (not null)
            if (labelOwner == null)
            {
                throw new InvalidDataException("labelOwner is a required property for ItemInput and cannot be null");
            }
            else
            {
                this.LabelOwner = labelOwner;
            }
            // to ensure "msku" is required (not null)
            if (msku == null)
            {
                throw new InvalidDataException("msku is a required property for ItemInput and cannot be null");
            }
            else
            {
                this.Msku = msku;
            }
            // to ensure "prepOwner" is required (not null)
            if (prepOwner == null)
            {
                throw new InvalidDataException("prepOwner is a required property for ItemInput and cannot be null");
            }
            else
            {
                this.PrepOwner = prepOwner;
            }
            // to ensure "quantity" is required (not null)
            if (quantity == null)
            {
                throw new InvalidDataException("quantity is a required property for ItemInput and cannot be null");
            }
            else
            {
                this.Quantity = quantity;
            }
            this.Expiration = expiration;
            this.ManufacturingLotCode = manufacturingLotCode;
        }

        /// <summary>
        /// The expiration date of the MSKU in ISO 8601 format. The same MSKU with different expiration dates cannot go into the same box.
        /// </summary>
        /// <value>The expiration date of the MSKU in ISO 8601 format. The same MSKU with different expiration dates cannot go into the same box.</value>
        [JsonConverter(typeof(Iso8601DateConverter))]
        [DataMember(Name="expiration", EmitDefaultValue=false)]

        public DateTime? Expiration { get; set; }

        /// <summary>
        /// Specifies who will label the items. Options include AMAZON, SELLER or NONE.
        /// </summary>
        [DataMember(Name = "labelOwner", EmitDefaultValue = false)]
        public LabelOwner LabelOwner { get; set; }

        /// <summary>
        /// The manufacturing lot code.
        /// </summary>
        /// <value>The manufacturing lot code.</value>
        [DataMember(Name="manufacturingLotCode", EmitDefaultValue=false)]
        public string ManufacturingLotCode { get; set; }

        /// <summary>
        /// The merchant SKU.
        /// </summary>
        /// <value>The merchant SKU.</value>
        [DataMember(Name="msku", EmitDefaultValue=false)]
        public string Msku { get; set; }

        /// <summary>
        /// In some situations, special preparations are required for items and this field reflects the owner of the preparations. Options include AMAZON, SELLER or NONE.
        /// </summary>
        [DataMember(Name = "prepOwner", EmitDefaultValue = false)]
        public PrepOwner PrepOwner { get; set; }

        /// <summary>
        /// The number of units of the specified MSKU that will be shipped.
        /// </summary>
        /// <value>The number of units of the specified MSKU that will be shipped.</value>
        [DataMember(Name="quantity", EmitDefaultValue=false)]
        public int? Quantity { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class ItemInput {\n");
            sb.Append("  Expiration: ").Append(Expiration).Append("\n");
            sb.Append("  LabelOwner: ").Append(LabelOwner).Append("\n");
            sb.Append("  ManufacturingLotCode: ").Append(ManufacturingLotCode).Append("\n");
            sb.Append("  Msku: ").Append(Msku).Append("\n");
            sb.Append("  PrepOwner: ").Append(PrepOwner).Append("\n");
            sb.Append("  Quantity: ").Append(Quantity).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as ItemInput);
        }

        /// <summary>
        /// Returns true if ItemInput instances are equal
        /// </summary>
        /// <param name="input">Instance of ItemInput to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(ItemInput input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.Expiration == input.Expiration ||
                    (this.Expiration != null &&
                    this.Expiration.Equals(input.Expiration))
                ) && 
                (
                    this.LabelOwner == input.LabelOwner ||
                    (this.LabelOwner != null &&
                    this.LabelOwner.Equals(input.LabelOwner))
                ) && 
                (
                    this.ManufacturingLotCode == input.ManufacturingLotCode ||
                    (this.ManufacturingLotCode != null &&
                    this.ManufacturingLotCode.Equals(input.ManufacturingLotCode))
                ) && 
                (
                    this.Msku == input.Msku ||
                    (this.Msku != null &&
                    this.Msku.Equals(input.Msku))
                ) && 
                (
                    this.PrepOwner == input.PrepOwner ||
                    (this.PrepOwner != null &&
                    this.PrepOwner.Equals(input.PrepOwner))
                ) && 
                (
                    this.Quantity == input.Quantity ||
                    (this.Quantity != null &&
                    this.Quantity.Equals(input.Quantity))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.Expiration != null)
                    hashCode = hashCode * 59 + this.Expiration.GetHashCode();
                if (this.LabelOwner != null)
                    hashCode = hashCode * 59 + this.LabelOwner.GetHashCode();
                if (this.ManufacturingLotCode != null)
                    hashCode = hashCode * 59 + this.ManufacturingLotCode.GetHashCode();
                if (this.Msku != null)
                    hashCode = hashCode * 59 + this.Msku.GetHashCode();
                if (this.PrepOwner != null)
                    hashCode = hashCode * 59 + this.PrepOwner.GetHashCode();
                if (this.Quantity != null)
                    hashCode = hashCode * 59 + this.Quantity.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {

            // ManufacturingLotCode (string) maxLength
            if(this.ManufacturingLotCode != null && this.ManufacturingLotCode.Length > 256)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for ManufacturingLotCode, length must be less than 256.", new [] { "ManufacturingLotCode" });
            }

            // ManufacturingLotCode (string) minLength
            if(this.ManufacturingLotCode != null && this.ManufacturingLotCode.Length < 1)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for ManufacturingLotCode, length must be greater than 1.", new [] { "ManufacturingLotCode" });
            }

            // Msku (string) maxLength
            if(this.Msku != null && this.Msku.Length > 40)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for Msku, length must be less than 40.", new [] { "Msku" });
            }

            // Msku (string) minLength
            if(this.Msku != null && this.Msku.Length < 1)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for Msku, length must be greater than 1.", new [] { "Msku" });
            }

            // Quantity (int?) maximum
            if(this.Quantity > (int?)10000)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for Quantity, must be a value less than or equal to 10000.", new [] { "Quantity" });
            }

            // Quantity (int?) minimum
            if(this.Quantity < (int?)1)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for Quantity, must be a value greater than or equal to 1.", new [] { "Quantity" });
            }

            yield break;
        }
    }

}
