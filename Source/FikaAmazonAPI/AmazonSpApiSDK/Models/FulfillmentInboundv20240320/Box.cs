/* 
 * The Selling Partner API for FBA inbound operations.
 *
 * The Selling Partner API for Fulfillment By Amazon (FBA) Inbound. The FBA Inbound API enables building inbound workflows to create, manage, and send shipments into Amazon's fulfillment network. The API has interoperability with the Send-to-Amazon user interface.
 *
 * OpenAPI spec version: 2024-03-20
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using Newtonsoft.Json;
using System;
using System.Collections.Generic;
using System.ComponentModel.DataAnnotations;
using System.IO;
using System.Linq;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;

namespace FikaAmazonAPI.AmazonSpApiSDK.Models.FulfillmentInboundv20240320
{
    /// <summary>
    /// Contains information about a box that is used in the inbound plan. The box may contain an item and metadata about the box itself.
    /// </summary>
    [DataContract]
    public partial class Box :  IEquatable<Box>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="Box" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        public Box() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="Box" /> class.
        /// </summary>
        /// <param name="boxId">The ID provided by Amazon that identifies a given box. This ID is comprised of the external shipment ID (which is generated after transportation has been confirmed) and the index of the box.</param>
        /// <param name="contentInformationSource">Indication of how box content is meant to be provided.</param>
        /// <param name="destinationRegion">Representation of a location used within the inbounding experience.</param>
        /// <param name="dimensions">Measurement of a package's dimensions.</param>
        /// <param name="items">Items contained within the box.</param>
        /// <param name="packageId">Primary key to uniquely identify a Package (Box or Pallet). (required).</param>
        /// <param name="quantity">The number of containers where all other properties like weight or dimensions are identical.</param>
        /// <param name="templateName">Template name of the box.</param>
        /// <param name="weight">weight.</param>
        public Box(string boxId = default(string),
                   BoxContentInformationSource? contentInformationSource = default(BoxContentInformationSource?),
                   Region destinationRegion = default(Region),
                   Dimensions dimensions = default(Dimensions),
                   List<Item> items = default(List<Item>),
                   string packageId = default(string),
                   int? quantity = default(int?),
                   string templateName = default(string),
                   Weight weight = default(Weight))
        {
            // to ensure "packageId" is required (not null)
            if (packageId == null)
            {
                throw new InvalidDataException("packageId is a required property for Box and cannot be null");
            }
            else
            {
                this.PackageId = packageId;
            }

            this.BoxId = boxId;
            this.ContentInformationSource = contentInformationSource;
            this.DestinationRegion = destinationRegion;
            this.Dimensions = dimensions;
            this.Items = items;
            this.Quantity = quantity;
            this.TemplateName = templateName;
            this.Weight = weight;
        }

        /// <summary>
        /// The ID provided by Amazon that identifies a given box. This ID is comprised of the external shipment ID (which is generated after transportation has been confirmed) and the index of the box.
        /// </summary>
        /// <value>The ID provided by Amazon that identifies a given box. This ID is comprised of the external shipment ID (which is generated after transportation has been confirmed) and the index of the box.</value>
        [DataMember(Name="boxId", EmitDefaultValue=false)]
        public string BoxId { get; set; }

        /// <summary>
        /// Indication of how box content is meant to be provided.
        /// </summary>
        /// <value>Indication of how box content is meant to be provided.</value>
        [DataMember(Name = "contentInformationSource", EmitDefaultValue = false)]
        public BoxContentInformationSource? ContentInformationSource { get; set; }

        /// <summary>
        /// Gets or Sets DestinationRegion
        /// </summary>
        /// <value>Representation of a location used within the inbounding experience.</value>
        [DataMember(Name="destinationRegion", EmitDefaultValue=false)]
        public Region DestinationRegion { get; set; }

        /// <summary>
        /// Measurement of a package's dimensions.
        /// </summary>
        /// <value>Measurement of a package's dimensions.</value>
        [DataMember(Name="dimensions", EmitDefaultValue=false)]
        public Dimensions Dimensions { get; set; }

        /// <summary>
        /// Items contained within the box.
        /// </summary>
        /// <value>Items contained within the box.</value>
        [DataMember(Name="items", EmitDefaultValue=false)]
        public List<Item> Items { get; set; }

        /// <summary>
        /// Primary key to uniquely identify a Package (Box or Pallet).
        /// </summary>
        /// <value>Primary key to uniquely identify a Package (Box or Pallet).</value>
        [DataMember(Name="packageId", EmitDefaultValue=false)]
        public string PackageId { get; set; }

        /// <summary>
        /// The number of containers where all other properties like weight or dimensions are identical.
        /// </summary>
        /// <value>The number of containers where all other properties like weight or dimensions are identical.</value>
        [DataMember(Name="quantity", EmitDefaultValue=false)]
        public int? Quantity { get; set; }

        /// <summary>
        /// Template name of the box.
        /// </summary>
        /// <value>Template name of the box.</value>
        [DataMember(Name="templateName", EmitDefaultValue=false)]
        public string TemplateName { get; set; }

        /// <summary>
        /// Gets or Sets Weight
        /// </summary>
        [DataMember(Name="weight", EmitDefaultValue=false)]
        public Weight Weight { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class Box {\n");
            sb.Append("  BoxId: ").Append(BoxId).Append("\n");
            sb.Append("  ContentInformationSource: ").Append(ContentInformationSource).Append("\n");
            sb.Append("  DestinationRegion: ").Append(DestinationRegion).Append("\n");
            sb.Append("  Dimensions: ").Append(Dimensions).Append("\n");
            sb.Append("  Items: ").Append(Items).Append("\n");
            sb.Append("  PackageId: ").Append(PackageId).Append("\n");
            sb.Append("  Quantity: ").Append(Quantity).Append("\n");
            sb.Append("  TemplateName: ").Append(TemplateName).Append("\n");
            sb.Append("  Weight: ").Append(Weight).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as Box);
        }

        /// <summary>
        /// Returns true if Box instances are equal
        /// </summary>
        /// <param name="input">Instance of Box to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(Box input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.BoxId == input.BoxId ||
                    (this.BoxId != null &&
                    this.BoxId.Equals(input.BoxId))
                ) &&
                                (
                    this.ContentInformationSource == input.ContentInformationSource ||
                    (this.ContentInformationSource != null &&
                    this.ContentInformationSource.Equals(input.ContentInformationSource))
                ) &&
                (
                    this.DestinationRegion == input.DestinationRegion ||
                    (this.DestinationRegion != null &&
                    this.DestinationRegion.Equals(input.DestinationRegion))
                ) && 
                (
                    this.Dimensions == input.Dimensions ||
                    (this.Dimensions != null &&
                    this.Dimensions.Equals(input.Dimensions))
                ) && 
                (
                    this.Items == input.Items ||
                    this.Items != null &&
                    this.Items.SequenceEqual(input.Items)
                ) && 
                (
                    this.PackageId == input.PackageId ||
                    (this.PackageId != null &&
                    this.PackageId.Equals(input.PackageId))
                ) && 
                (
                    this.Quantity == input.Quantity ||
                    (this.Quantity != null &&
                    this.Quantity.Equals(input.Quantity))
                ) && 
                (
                    this.TemplateName == input.TemplateName ||
                    (this.TemplateName != null &&
                    this.TemplateName.Equals(input.TemplateName))
                ) && 
                (
                    this.Weight == input.Weight ||
                    (this.Weight != null &&
                    this.Weight.Equals(input.Weight))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.BoxId != null)
                    hashCode = hashCode * 59 + this.BoxId.GetHashCode();
                if (this.ContentInformationSource != null)
                    hashCode = hashCode * 59 + this.ContentInformationSource.GetHashCode();
                if (this.DestinationRegion != null)
                    hashCode = hashCode * 59 + this.DestinationRegion.GetHashCode();
                if (this.Dimensions != null)
                    hashCode = hashCode * 59 + this.Dimensions.GetHashCode();
                if (this.Items != null)
                    hashCode = hashCode * 59 + this.Items.GetHashCode();
                if (this.PackageId != null)
                    hashCode = hashCode * 59 + this.PackageId.GetHashCode();
                if (this.Quantity != null)
                    hashCode = hashCode * 59 + this.Quantity.GetHashCode();
                if (this.TemplateName != null)
                    hashCode = hashCode * 59 + this.TemplateName.GetHashCode();
                if (this.Weight != null)
                    hashCode = hashCode * 59 + this.Weight.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            // BoxId (string) maxLength
            if(this.BoxId != null && this.BoxId.Length > 1024)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for BoxId, length must be less than 1024.", new [] { "BoxId" });
            }

            // BoxId (string) minLength
            if(this.BoxId != null && this.BoxId.Length < 1)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for BoxId, length must be greater than 1.", new [] { "BoxId" });
            }

            // PackageId (string) maxLength
            if (this.PackageId != null && this.PackageId.Length > 38)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for PackageId, length must be less than 38.", new [] { "PackageId" });
            }

            // PackageId (string) minLength
            if(this.PackageId != null && this.PackageId.Length < 38)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for PackageId, length must be greater than 38.", new [] { "PackageId" });
            }

            // PackageId (string) pattern
            Regex regexPackageId = new Regex(@"^[a-zA-Z0-9-]*$", RegexOptions.CultureInvariant);
            if (false == regexPackageId.Match(this.PackageId).Success)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for PackageId, must match a pattern of " + regexPackageId, new [] { "PackageId" });
            }

            // Quantity (int?) maximum
            if(this.Quantity > (int?)10000)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for Quantity, must be a value less than or equal to 10000.", new [] { "Quantity" });
            }

            // Quantity (int?) minimum
            if(this.Quantity < (int?)1)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for Quantity, must be a value greater than or equal to 1.", new [] { "Quantity" });
            }

            // TemplateName (string) maxLength
            if(this.TemplateName != null && this.TemplateName.Length > 1024)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for TemplateName, length must be less than 1024.", new [] { "TemplateName" });
            }

            // TemplateName (string) minLength
            if(this.TemplateName != null && this.TemplateName.Length < 1)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for TemplateName, length must be greater than 1.", new [] { "TemplateName" });
            }

            yield break;
        }
    }

}
