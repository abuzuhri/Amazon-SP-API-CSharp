/* 
 * The Selling Partner API for FBA inbound operations.
 *
 * The Selling Partner API for Fulfillment By Amazon (FBA) Inbound. The FBA Inbound API enables building inbound workflows to create, manage, and send shipments into Amazon's fulfillment network. The API has interoperability with the Send-to-Amazon user interface.
 *
 * OpenAPI spec version: 2024-03-20
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using Newtonsoft.Json;
using System;
using System.Collections.Generic;
using System.ComponentModel.DataAnnotations;
using System.IO;
using System.Linq;
using System.Runtime.Serialization;
using System.Text;

namespace FikaAmazonAPI.AmazonSpApiSDK.Models.FulfillmentInboundv20240320
{
    /// <summary>
    /// Contains input information to update Small Parcel Delivery (SPD) tracking information.
    /// </summary>
    [DataContract]
    public partial class SpdTrackingDetailInput :  IEquatable<SpdTrackingDetailInput>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="SpdTrackingDetailInput" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        public SpdTrackingDetailInput() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="SpdTrackingDetailInput" /> class.
        /// </summary>
        /// <param name="spdTrackingItems">List of Small Parcel Delivery (SPD) tracking items input. (required).</param>
        public SpdTrackingDetailInput(List<SpdTrackingItemInput> spdTrackingItems = default(List<SpdTrackingItemInput>))
        {
            // to ensure "spdTrackingItems" is required (not null)
            if (spdTrackingItems == null)
            {
                throw new InvalidDataException("spdTrackingItems is a required property for SpdTrackingDetailInput and cannot be null");
            }
            else
            {
                this.SpdTrackingItems = spdTrackingItems;
            }
        }
        
        /// <summary>
        /// List of Small Parcel Delivery (SPD) tracking items input.
        /// </summary>
        /// <value>List of Small Parcel Delivery (SPD) tracking items input.</value>
        [DataMember(Name="spdTrackingItems", EmitDefaultValue=false)]
        public List<SpdTrackingItemInput> SpdTrackingItems { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class SpdTrackingDetailInput {\n");
            sb.Append("  SpdTrackingItems: ").Append(SpdTrackingItems).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as SpdTrackingDetailInput);
        }

        /// <summary>
        /// Returns true if SpdTrackingDetailInput instances are equal
        /// </summary>
        /// <param name="input">Instance of SpdTrackingDetailInput to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(SpdTrackingDetailInput input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.SpdTrackingItems == input.SpdTrackingItems ||
                    this.SpdTrackingItems != null &&
                    this.SpdTrackingItems.SequenceEqual(input.SpdTrackingItems)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.SpdTrackingItems != null)
                    hashCode = hashCode * 59 + this.SpdTrackingItems.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
