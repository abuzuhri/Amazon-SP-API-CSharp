/* 
 * The Selling Partner API for FBA inbound operations.
 *
 * The Selling Partner API for Fulfillment By Amazon (FBA) Inbound. The FBA Inbound API enables building inbound workflows to create, manage, and send shipments into Amazon's fulfillment network. The API has interoperability with the Send-to-Amazon user interface.
 *
 * OpenAPI spec version: 2024-03-20
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using Newtonsoft.Json;
using System;
using System.Collections.Generic;
using System.ComponentModel.DataAnnotations;
using System.IO;
using System.Linq;
using System.Runtime.Serialization;
using System.Text;

namespace FikaAmazonAPI.AmazonSpApiSDK.Models.FulfillmentInboundv20240320
{
    /// <summary>
    /// &#x60;listInboundPlanBoxes&#x60; response.
    /// </summary>
    [DataContract]
    public partial class ListInboundPlanBoxesResponse :  IEquatable<ListInboundPlanBoxesResponse>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="ListInboundPlanBoxesResponse" /> class.
        /// </summary>
        /// <param name="boxes">A list of boxes in an inbound plan. (required).</param>
        /// <param name="pagination">pagination.</param>
        public ListInboundPlanBoxesResponse(List<Box> boxes = default(List<Box>), Pagination pagination = default(Pagination))
        {
            // to ensure "boxes" is required (not null)
            if (boxes == null)
            {
                throw new InvalidDataException("boxes is a required property for ListInboundPlanBoxesResponse and cannot be null");
            }
            else
            {
                this.Boxes = boxes;
            }
            this.Pagination = pagination;
        }
        
        public ListInboundPlanBoxesResponse()
        {
            this.Boxes = default(List<Box>);
            this.Pagination = default(Pagination);
        }

        /// <summary>
        /// A list of boxes in an inbound plan.
        /// </summary>
        /// <value>A list of boxes in an inbound plan.</value>
        [DataMember(Name="boxes", EmitDefaultValue=false)]
        public List<Box> Boxes { get; set; }

        /// <summary>
        /// Gets or Sets Pagination
        /// </summary>
        [DataMember(Name="pagination", EmitDefaultValue=false)]
        public Pagination Pagination { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class ListInboundPlanBoxesResponse {\n");
            sb.Append("  Boxes: ").Append(Boxes).Append("\n");
            sb.Append("  Pagination: ").Append(Pagination).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as ListInboundPlanBoxesResponse);
        }

        /// <summary>
        /// Returns true if ListInboundPlanBoxesResponse instances are equal
        /// </summary>
        /// <param name="input">Instance of ListInboundPlanBoxesResponse to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(ListInboundPlanBoxesResponse input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.Boxes == input.Boxes ||
                    this.Boxes != null &&
                    this.Boxes.SequenceEqual(input.Boxes)
                ) && 
                (
                    this.Pagination == input.Pagination ||
                    (this.Pagination != null &&
                    this.Pagination.Equals(input.Pagination))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.Boxes != null)
                    hashCode = hashCode * 59 + this.Boxes.GetHashCode();
                if (this.Pagination != null)
                    hashCode = hashCode * 59 + this.Pagination.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
