/* 
 * The Selling Partner API for FBA inbound operations.
 *
 * The Selling Partner API for Fulfillment By Amazon (FBA) Inbound. The FBA Inbound API enables building inbound workflows to create, manage, and send shipments into Amazon's fulfillment network. The API has interoperability with the Send-to-Amazon user interface.
 *
 * OpenAPI spec version: 2024-03-20
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using Newtonsoft.Json;
using System;
using System.Collections.Generic;
using System.ComponentModel.DataAnnotations;
using System.IO;
using System.Runtime.Serialization;
using System.Text;

namespace FikaAmazonAPI.AmazonSpApiSDK.Models.FulfillmentInboundv20240320
{
    /// <summary>
    /// Contains a start and end DateTime representing a time range.
    /// </summary>
    [DataContract]
    public partial class Window :  IEquatable<Window>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="Window" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        public Window() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="Window" /> class.
        /// </summary>
        /// <param name="editableUntil">The timestamp at which this Window can no longer be edited.</param>
        /// <param name="end">The end timestamp of the window. (required).</param>
        /// <param name="start">The start timestamp of the window. (required).</param>
        public Window(DateTime? editableUntil = default(DateTime?), DateTime? end = default(DateTime?), DateTime? start = default(DateTime?))
        {
            // to ensure "end" is required (not null)
            if (end == null)
            {
                throw new InvalidDataException("end is a required property for Window and cannot be null");
            }
            else
            {
                this.End = end;
            }
            // to ensure "start" is required (not null)
            if (start == null)
            {
                throw new InvalidDataException("start is a required property for Window and cannot be null");
            }
            else
            {
                this.Start = start;
            }
            this.EditableUntil = editableUntil;
        }
        
        /// <summary>
        /// The timestamp at which this Window can no longer be edited.
        /// </summary>
        /// <value>The timestamp at which this Window can no longer be edited.</value>
        [DataMember(Name="editableUntil", EmitDefaultValue=false)]
        public DateTime? EditableUntil { get; set; }

        /// <summary>
        /// The end timestamp of the window.
        /// </summary>
        /// <value>The end timestamp of the window.</value>
        [DataMember(Name="end", EmitDefaultValue=false)]
        public DateTime? End { get; set; }

        /// <summary>
        /// The start timestamp of the window.
        /// </summary>
        /// <value>The start timestamp of the window.</value>
        [DataMember(Name="start", EmitDefaultValue=false)]
        public DateTime? Start { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class Window {\n");
            sb.Append("  EditableUntil: ").Append(EditableUntil).Append("\n");
            sb.Append("  End: ").Append(End).Append("\n");
            sb.Append("  Start: ").Append(Start).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as Window);
        }

        /// <summary>
        /// Returns true if Window instances are equal
        /// </summary>
        /// <param name="input">Instance of Window to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(Window input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.EditableUntil == input.EditableUntil ||
                    (this.EditableUntil != null &&
                    this.EditableUntil.Equals(input.EditableUntil))
                ) && 
                (
                    this.End == input.End ||
                    (this.End != null &&
                    this.End.Equals(input.End))
                ) && 
                (
                    this.Start == input.Start ||
                    (this.Start != null &&
                    this.Start.Equals(input.Start))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.EditableUntil != null)
                    hashCode = hashCode * 59 + this.EditableUntil.GetHashCode();
                if (this.End != null)
                    hashCode = hashCode * 59 + this.End.GetHashCode();
                if (this.Start != null)
                    hashCode = hashCode * 59 + this.Start.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
