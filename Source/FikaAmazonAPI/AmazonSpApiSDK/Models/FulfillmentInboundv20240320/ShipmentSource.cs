/* 
 * The Selling Partner API for FBA inbound operations.
 *
 * The Selling Partner API for Fulfillment By Amazon (FBA) Inbound. The FBA Inbound API enables building inbound workflows to create, manage, and send shipments into Amazon's fulfillment network. The API has interoperability with the Send-to-Amazon user interface.
 *
 * OpenAPI spec version: 2024-03-20
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using Newtonsoft.Json;
using System;
using System.Collections.Generic;
using System.ComponentModel.DataAnnotations;
using System.IO;
using System.Runtime.Serialization;
using System.Text;

namespace FikaAmazonAPI.AmazonSpApiSDK.Models.FulfillmentInboundv20240320
{
    /// <summary>
    /// Specifies the &#39;ship from&#39; address for the shipment.
    /// </summary>
    [DataContract]
    public partial class ShipmentSource :  IEquatable<ShipmentSource>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="ShipmentSource" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        public ShipmentSource() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="ShipmentSource" /> class.
        /// </summary>
        /// <param name="address">Specific details to identify a place.</param>
        /// <param name="sourceType">The type of source for this shipment. Can be &#x60;SELLER_FACILITY&#x60;. (required).</param>
        public ShipmentSource(Address address = default(Address), SourceType sourceType = default(SourceType))
        {
            // to ensure "sourceType" is required (not null)
            if (sourceType == null)
            {
                throw new InvalidDataException("sourceType is a required property for ShipmentSource and cannot be null");
            }
            else
            {
                this.SourceType = sourceType;
            }
            this.Address = address;
        }
        
        /// <summary>
        /// Gets or Sets Address
        /// </summary>
        [DataMember(Name="address", EmitDefaultValue=false)]
        public Address Address { get; set; }

        /// <summary>
        /// The type of source for this shipment. Can be &#x60;SELLER_FACILITY&#x60;.
        /// </summary>
        /// <value>The type of source for this shipment. Can be &#x60;SELLER_FACILITY&#x60;.</value>
        [DataMember(Name="sourceType", EmitDefaultValue=false)]
        public SourceType SourceType { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class ShipmentSource {\n");
            sb.Append("  Address: ").Append(Address).Append("\n");
            sb.Append("  SourceType: ").Append(SourceType).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as ShipmentSource);
        }

        /// <summary>
        /// Returns true if ShipmentSource instances are equal
        /// </summary>
        /// <param name="input">Instance of ShipmentSource to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(ShipmentSource input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.Address == input.Address ||
                    (this.Address != null &&
                    this.Address.Equals(input.Address))
                ) && 
                (
                    this.SourceType == input.SourceType ||
                    (this.SourceType != null &&
                    this.SourceType.Equals(input.SourceType))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.Address != null)
                    hashCode = hashCode * 59 + this.Address.GetHashCode();
                if (this.SourceType != null)
                    hashCode = hashCode * 59 + this.SourceType.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {

            yield break;
        }
    }

}
