/* 
 * Selling Partner API for Listings Items
 *
 * The Selling Partner API for Listings Items (Listings Items API) provides programmatic access to selling partner listings on Amazon. Use this API in collaboration with the Selling Partner API for Product Type Definitions, which you use to retrieve the information about Amazon product types needed to use the Listings Items API.  For more information, see the [Listings Items API Use Case Guide](doc:listings-items-api-v2021-08-01-use-case-guide).
 *
 * OpenAPI spec version: 2021-08-01
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using Newtonsoft.Json;
using System;
using System.Collections.Generic;
using System.ComponentModel.DataAnnotations;
using System.IO;
using System.Linq;
using System.Runtime.Serialization;
using System.Text;

namespace FikaAmazonAPI.AmazonSpApiSDK.Models.ListingsItems
{
    /// <summary>
    /// A variation theme that indicates the combination of listing item attributes that define the variation family.
    /// </summary>
    [DataContract]
    public partial class ItemVariationTheme : IEquatable<ItemVariationTheme>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="ItemVariationTheme" /> class.
        /// </summary>
        /// <param name="attributes">The names of the listing item attributes that are associated with the variation theme. (required).</param>
        /// <param name="theme">The variation theme that indicates the combination of listing item attributes that define the variation family. (required).</param>
        public ItemVariationTheme(List<string> attributes = default(List<string>), string theme = default(string))
        {
            // to ensure "attributes" is required (not null)
            if (attributes == null)
            {
                throw new InvalidDataException("attributes is a required property for ItemVariationTheme and cannot be null");
            }
            else
            {
                this.Attributes = attributes;
            }
            // to ensure "theme" is required (not null)
            if (theme == null)
            {
                throw new InvalidDataException("theme is a required property for ItemVariationTheme and cannot be null");
            }
            else
            {
                this.Theme = theme;
            }
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="ItemVariationTheme" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        public ItemVariationTheme() { }

        /// <summary>
        /// The names of the listing item attributes that are associated with the variation theme.
        /// </summary>
        /// <value>The names of the listing item attributes that are associated with the variation theme.</value>
        [DataMember(Name="attributes", EmitDefaultValue = false)]
        public List<string> Attributes { get; set; }

        /// <summary>
        /// The variation theme that indicates the combination of listing item attributes that define the variation family. 
        /// </summary>
        /// <value>The variation theme that indicates the combination of listing item attributes that define the variation family. </value>
        [DataMember(Name="theme", EmitDefaultValue = false)]
        public string Theme { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class ItemVariationTheme {\n");
            sb.Append("  Attributes: ").Append(Attributes).Append("\n");
            sb.Append("  Theme: ").Append(Theme).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as ItemVariationTheme);
        }

        /// <summary>
        /// Returns true if ItemVariationTheme instances are equal
        /// </summary>
        /// <param name="input">Instance of ItemVariationTheme to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(ItemVariationTheme input)
        {
            if (input == null)
                return false;

            return
                (
                    this.Attributes == input.Attributes ||
                    this.Attributes != null &&
                    this.Attributes.SequenceEqual(input.Attributes)
                ) &&
                (
                    this.Theme == input.Theme ||
                    (this.Theme != null &&
                    this.Theme.Equals(input.Theme))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.Attributes != null)
                    hashCode = hashCode * 59 + this.Attributes.GetHashCode();
                if (this.Theme != null)
                    hashCode = hashCode * 59 + this.Theme.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
