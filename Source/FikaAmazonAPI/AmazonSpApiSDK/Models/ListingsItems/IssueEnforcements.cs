/* 
 * Selling Partner API for Listings Items
 *
 * The Selling Partner API for Listings Items (Listings Items API) provides programmatic access to selling partner listings on Amazon. Use this API in collaboration with the Selling Partner API for Product Type Definitions, which you use to retrieve the information about Amazon product types needed to use the Listings Items API.  For more information, see the [Listings Items API Use Case Guide](doc:listings-items-api-v2021-08-01-use-case-guide).
 *
 * OpenAPI spec version: 2021-08-01
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using Newtonsoft.Json;
using System;
using System.Collections.Generic;
using System.ComponentModel.DataAnnotations;
using System.IO;
using System.Linq;
using System.Runtime.Serialization;
using System.Text;

namespace FikaAmazonAPI.AmazonSpApiSDK.Models.ListingsItems
{
    /// <summary>
    /// This field provides information about the enforcement actions taken by Amazon that affect the publishing or status of a listing. It also includes details about any associated exemptions.
    /// </summary>
    [DataContract]
    public partial class IssueEnforcements : IEquatable<IssueEnforcements>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="IssueEnforcements" /> class.
        /// </summary>
        /// <param name="actions">List of enforcement actions taken by Amazon that affect the publishing or status of a listing. (required).</param>
        /// <param name="exemption">The "exemption" field serves to convey the status of enforcement actions by Amazon. (required).</param>
        public IssueEnforcements(List<IssueEnforcementAction> actions = default(List<IssueEnforcementAction>), IssueExemption exemption = default(IssueExemption))
        {
            // to ensure "actions" is required (not null)
            if (actions == null)
            {
                throw new InvalidDataException("actions is a required property for IssueEnforcements and cannot be null");
            }
            else
            {
                this.Actions = actions;
            }
            // to ensure "exemption" is required (not null)
            if (exemption == null)
            {
                throw new InvalidDataException("exemption is a required property for IssueEnforcements and cannot be null");
            }
            else
            {
                this.Exemption = exemption;
            }
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="IssueEnforcements" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        public IssueEnforcements() { }

        /// <summary>
        /// List of enforcement actions taken by Amazon that affect the publishing or status of a listing.
        /// </summary>
        /// <value>List of enforcement actions taken by Amazon that affect the publishing or status of a listing.</value>
        [DataMember(Name="actions", EmitDefaultValue = false)]
        public List<IssueEnforcementAction> Actions { get; set; }

        /// <summary>
        /// The "exemption" field serves to convey the status of enforcement actions by Amazon.
        /// </summary>
        /// <value>The "exemption" field serves to convey the status of enforcement actions by Amazon. </value>
        [DataMember(Name="exemption", EmitDefaultValue = false)]
        public IssueExemption Exemption { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class IssueEnforcements {\n");
            sb.Append("  Actions: ").Append(Actions).Append("\n");
            sb.Append("  Exemption: ").Append(Exemption).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as IssueEnforcements);
        }

        /// <summary>
        /// Returns true if IssueEnforcements instances are equal
        /// </summary>
        /// <param name="input">Instance of IssueEnforcements to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(IssueEnforcements input)
        {
            if (input == null)
                return false;

            return
                (
                    this.Actions == input.Actions ||
                    this.Actions != null &&
                    this.Actions.SequenceEqual(input.Actions)
                ) &&
                (
                    this.Exemption == input.Exemption ||
                    (this.Exemption != null &&
                    this.Exemption.Equals(input.Exemption))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.Actions != null)
                    hashCode = hashCode * 59 + this.Actions.GetHashCode();
                if (this.Exemption != null)
                    hashCode = hashCode * 59 + this.Exemption.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
