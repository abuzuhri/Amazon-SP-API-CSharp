/* 
 * Selling Partner API for Listings Items
 *
 * The Selling Partner API for Listings Items (Listings Items API) provides programmatic access to selling partner listings on Amazon. Use this API in collaboration with the Selling Partner API for Product Type Definitions, which you use to retrieve the information about Amazon product types needed to use the Listings Items API.  For more information, see the [Listings Items API Use Case Guide](doc:listings-items-api-v2021-08-01-use-case-guide).
 *
 * OpenAPI spec version: 2021-08-01
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.IO;
using System.Text;
using System.Collections.Generic;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using System.ComponentModel.DataAnnotations;
using Newtonsoft.Json.Converters;
using System.Linq;

namespace FikaAmazonAPI.AmazonSpApiSDK.Models.ListingsItems
{
    /// <summary>
    /// The relationship details for a listing item.
    /// </summary>
    [DataContract]
    public partial class ItemRelationship :  IEquatable<ItemRelationship>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="ItemRelationship" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        public ItemRelationship() { }

        /// <summary>
        /// Initializes a new instance of the <see cref="ItemRelationship" /> class.
        /// </summary>
        /// <param name="childSkus">Identifiers (SKUs) of the related items that are children of this listing item.</param>
        /// <param name="parentSkus">Identifiers (SKUs) of the related items that are parents of this listing item.</param>
        /// <param name="variationTheme">For VARIATION relationships, the variation theme is the combination of listing item attributes that define the variation family.</param>
        /// <param name="type">The type of relationship. (required).</param>
        public ItemRelationship(List<string> childSkus = default(List<string>), List<string> parentSkus = default(List<string>), ItemVariationTheme variationTheme = default(ItemVariationTheme), RelationshipType type = default(RelationshipType))
        {
            // to ensure "type" is required (not null)
            if (type == null)
            {
                throw new InvalidDataException("type is a required property for ItemRelationship and cannot be null");
            }
            else
            {
                this.Type = type;
            }
            this.ChildSkus = childSkus;
            this.ParentSkus = parentSkus;
            this.VariationTheme = variationTheme;
        }

        /// <summary>
        /// Identifiers (SKUs) of the related items that are children of this listing item.
        /// </summary>
        /// <value>Identifiers (SKUs) of the related items that are children of this listing item.</value>
        [DataMember(Name = "childSkus", EmitDefaultValue = false)]
        public List<string> ChildSkus { get; set; }

        /// <summary>
        /// Identifiers (SKUs) of the related items that are parents of this listing item.
        /// </summary>
        /// <value>Identifiers (SKUs) of the related items that are parents of this listing item.</value>
        [DataMember(Name = "parentSkus", EmitDefaultValue = false)]
        public List<string> ParentSkus { get; set; }

        /// <summary>
        /// For VARIATION relationships, the variation theme is the combination of listing item attributes that define the variation family.
        /// </summary>
        /// <value>For VARIATION relationships, the variation theme is the combination of listing item attributes that define the variation family.</value>
        [DataMember(Name = "variationTheme", EmitDefaultValue = false)]
        public ItemVariationTheme VariationTheme { get; set; }

        /// <summary>
        /// Type of relationship.
        /// </summary>
        /// <value>Type of relationship.</value>
        [DataMember(Name = "type", EmitDefaultValue = false)]
        public RelationshipType Type { get; set; }


        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class ItemRelationship {\n");
            sb.Append("  ChildSkus: ").Append(ChildSkus).Append("\n");
            sb.Append("  ParentSkus: ").Append(ParentSkus).Append("\n");
            sb.Append("  VariationTheme: ").Append(VariationTheme).Append("\n");
            sb.Append("  Type: ").Append(Type).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as ItemRelationship);
        }

        /// <summary>
        /// Returns true if ItemRelationship instances are equal
        /// </summary>
        /// <param name="input">Instance of ItemRelationship to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(ItemRelationship input)
        {
            if (input == null)
                return false;

            return
                (
                    this.ChildSkus == input.ChildSkus ||
                    this.ChildSkus != null &&
                    this.ChildSkus.SequenceEqual(input.ChildSkus)
                ) &&
                (
                    this.ParentSkus == input.ParentSkus ||
                    this.ParentSkus != null &&
                    this.ParentSkus.SequenceEqual(input.ParentSkus)
                ) &&
                (
                    this.VariationTheme == input.VariationTheme ||
                    (this.VariationTheme != null &&
                    this.VariationTheme.Equals(input.VariationTheme))
                ) &&
                (
                    this.Type == input.Type ||
                    (this.Type != null &&
                    this.Type.Equals(input.Type))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.ChildSkus != null)
                    hashCode = hashCode * 59 + this.ChildSkus.GetHashCode();
                if (this.ParentSkus != null)
                    hashCode = hashCode * 59 + this.ParentSkus.GetHashCode();
                if (this.VariationTheme != null)
                    hashCode = hashCode * 59 + this.VariationTheme.GetHashCode();
                if (this.Type != null)
                    hashCode = hashCode * 59 + this.Type.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
