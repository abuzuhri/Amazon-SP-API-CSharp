/* 
 * Selling Partner API for Listings Items
 *
 * The Selling Partner API for Listings Items (Listings Items API) provides programmatic access to selling partner listings on Amazon. Use this API in collaboration with the Selling Partner API for Product Type Definitions, which you use to retrieve the information about Amazon product types needed to use the Listings Items API.  For more information, see the [Listings Items API Use Case Guide](doc:listings-items-api-v2021-08-01-use-case-guide).
 *
 * OpenAPI spec version: 2021-08-01
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using Newtonsoft.Json;
using System;
using System.Collections.Generic;
using System.ComponentModel.DataAnnotations;
using System.IO;
using System.Linq;
using System.Runtime.Serialization;
using System.Text;

namespace FikaAmazonAPI.AmazonSpApiSDK.Models.ListingsItems
{
    /// <summary>
    /// Conveying the status of the listed enforcement actions and, if applicable, provides information about the exemption's expiry date.
    /// </summary>
    [DataContract]
    public partial class IssueExemption : IEquatable<IssueExemption>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="IssueExemption" /> class.
        /// </summary>
        /// <param name="status">This field indicates the current exemption status for the listed enforcement actions. It can take values such as EXEMPT, signifying permanent exemption, EXEMPT_UNTIL_EXPIRY_DATE indicating temporary exemption until a specified date, or NOT_EXEMPT signifying no exemptions, and enforcement actions were already applied. (required).</param>
        /// <param name="expiryDate">This field represents the timestamp, following the ISO 8601 format, which specifies the date when temporary exemptions, if applicable, will expire, and Amazon will begin enforcing the listed actions. (required).</param>
        public IssueExemption(IssueExemptionStatus status = default(IssueExemptionStatus), DateTime? expiryDate = default(DateTime?))
        {
            // to ensure "status" is required (not null)
            if (status == null)
            {
                throw new InvalidDataException("status is a required property for IssueExemption and cannot be null");
            }
            else
            {
                this.Status = status;
            }
            this.ExpiryDate = expiryDate;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="IssueExemption" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        public IssueExemption() { }

        /// <summary>
        /// This field indicates the current exemption status for the listed enforcement actions. It can take values such as EXEMPT, signifying permanent exemption, EXEMPT_UNTIL_EXPIRY_DATE indicating temporary exemption until a specified date, or NOT_EXEMPT signifying no exemptions, and enforcement actions were already applied.
        /// </summary>
        /// <value>This field indicates the current exemption status for the listed enforcement actions. It can take values such as EXEMPT, signifying permanent exemption, EXEMPT_UNTIL_EXPIRY_DATE indicating temporary exemption until a specified date, or NOT_EXEMPT signifying no exemptions, and enforcement actions were already applied.</value>
        [DataMember(Name="status", EmitDefaultValue = false)]
        public IssueExemptionStatus Status { get; set; }

        /// <summary>
        /// This field represents the timestamp, following the ISO 8601 format, which specifies the date when temporary exemptions, if applicable, will expire, and Amazon will begin enforcing the listed actions. 
        /// </summary>
        /// <value>This field represents the timestamp, following the ISO 8601 format, which specifies the date when temporary exemptions, if applicable, will expire, and Amazon will begin enforcing the listed actions. </value>
        [DataMember(Name="expiryDate", EmitDefaultValue = false)]
        public DateTime? ExpiryDate { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class IssueExemption {\n");
            sb.Append("  Status: ").Append(Status).Append("\n");
            sb.Append("  ExpiryDate: ").Append(ExpiryDate).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as IssueExemption);
        }

        /// <summary>
        /// Returns true if IssueExemption instances are equal
        /// </summary>
        /// <param name="input">Instance of IssueExemption to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(IssueExemption input)
        {
            if (input == null)
                return false;

            return
                (
                    this.Status == input.Status ||
                    (this.Status != null &&
                    this.Status.Equals(input.Status))
                ) &&
                (
                    this.ExpiryDate == input.ExpiryDate ||
                    (this.ExpiryDate != null &&
                    this.ExpiryDate.Equals(input.ExpiryDate))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.Status != null)
                    hashCode = hashCode * 59 + this.Status.GetHashCode();
                if (this.ExpiryDate != null)
                    hashCode = hashCode * 59 + this.ExpiryDate.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
