/* 
 * The Selling Partner API for Finances
 *
 * The Selling Partner API for Finances helps you obtain financial information relevant to a seller's business. You can obtain financial events for a given order or date range without having to wait until a statement period closes.
 *
 * OpenAPI spec version: 2024-06-19
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System;
using System.Collections.Generic;
using System.ComponentModel.DataAnnotations;
using System.Runtime.Serialization;
using System.Text;

namespace FikaAmazonAPI.AmazonSpApiSDK.Models.Finances.Model
{
    /// <summary>
    /// Related business identifier of the transaction.
    /// </summary>
    [DataContract]
    public partial class RelatedIdentifier :  IEquatable<RelatedIdentifier>, IValidatableObject
    {
        /// <summary>
        /// Enumerated set of related business identifier names.
        /// </summary>
        /// <value>Enumerated set of related business identifier names.</value>
        [JsonConverter(typeof(StringEnumConverter))]
        public enum RelatedIdentifierNameEnum
        {
            
            /// <summary>
            /// Enum ORDERID for value: ORDER_ID
            /// </summary>
            [EnumMember(Value = "ORDER_ID")]
            ORDERID = 1,
            
            /// <summary>
            /// Enum SHIPMENTID for value: SHIPMENT_ID
            /// </summary>
            [EnumMember(Value = "SHIPMENT_ID")]
            SHIPMENTID = 2,
            
            /// <summary>
            /// Enum EVENTGROUPID for value: EVENT_GROUP_ID
            /// </summary>
            [EnumMember(Value = "EVENT_GROUP_ID")]
            EVENTGROUPID = 3,
            
            /// <summary>
            /// Enum REFUNDID for value: REFUND_ID
            /// </summary>
            [EnumMember(Value = "REFUND_ID")]
            REFUNDID = 4,
            
            /// <summary>
            /// Enum INVOICEID for value: INVOICE_ID
            /// </summary>
            [EnumMember(Value = "INVOICE_ID")]
            INVOICEID = 5,
            
            /// <summary>
            /// Enum DISBURSEMENTID for value: DISBURSEMENT_ID
            /// </summary>
            [EnumMember(Value = "DISBURSEMENT_ID")]
            DISBURSEMENTID = 6,
            
            /// <summary>
            /// Enum TRANSFERID for value: TRANSFER_ID
            /// </summary>
            [EnumMember(Value = "TRANSFER_ID")]
            TRANSFERID = 7,
            
            /// <summary>
            /// Enum DEFERREDTRANSACTIONID for value: DEFERRED_TRANSACTION_ID
            /// </summary>
            [EnumMember(Value = "DEFERRED_TRANSACTION_ID")]
            DEFERREDTRANSACTIONID = 8,
            
            /// <summary>
            /// Enum RELEASETRANSACTIONID for value: RELEASE_TRANSACTION_ID
            /// </summary>
            [EnumMember(Value = "RELEASE_TRANSACTION_ID")]
            RELEASETRANSACTIONID = 9,
            
            /// <summary>
            /// Enum FINANCIALEVENTGROUPID for value: FINANCIAL_EVENT_GROUP_ID
            /// </summary>
            [EnumMember(Value = "FINANCIAL_EVENT_GROUP_ID")]
            FINANCIALEVENTGROUPID = 10
        }

        /// <summary>
        /// Enumerated set of related business identifier names.
        /// </summary>
        /// <value>Enumerated set of related business identifier names.</value>
        [DataMember(Name="relatedIdentifierName", EmitDefaultValue=false)]
        public RelatedIdentifierNameEnum? RelatedIdentifierName { get; set; }
        /// <summary>
        /// Initializes a new instance of the <see cref="RelatedIdentifier" /> class.
        /// </summary>
        /// <param name="relatedIdentifierName">Enumerated set of related business identifier names..</param>
        /// <param name="relatedIdentifierValue">Corresponding value of RelatedIdentifierName.</param>
        public RelatedIdentifier(RelatedIdentifierNameEnum? relatedIdentifierName = default(RelatedIdentifierNameEnum?), string relatedIdentifierValue = default(string))
        {
            this.RelatedIdentifierName = relatedIdentifierName;
            this.RelatedIdentifierValue = relatedIdentifierValue;
        }
        

        /// <summary>
        /// Corresponding value of RelatedIdentifierName
        /// </summary>
        /// <value>Corresponding value of RelatedIdentifierName</value>
        [DataMember(Name="relatedIdentifierValue", EmitDefaultValue=false)]
        public string RelatedIdentifierValue { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class RelatedIdentifier {\n");
            sb.Append("  RelatedIdentifierName: ").Append(RelatedIdentifierName).Append("\n");
            sb.Append("  RelatedIdentifierValue: ").Append(RelatedIdentifierValue).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as RelatedIdentifier);
        }

        /// <summary>
        /// Returns true if RelatedIdentifier instances are equal
        /// </summary>
        /// <param name="input">Instance of RelatedIdentifier to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(RelatedIdentifier input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.RelatedIdentifierName == input.RelatedIdentifierName ||
                    (this.RelatedIdentifierName != null &&
                    this.RelatedIdentifierName.Equals(input.RelatedIdentifierName))
                ) && 
                (
                    this.RelatedIdentifierValue == input.RelatedIdentifierValue ||
                    (this.RelatedIdentifierValue != null &&
                    this.RelatedIdentifierValue.Equals(input.RelatedIdentifierValue))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.RelatedIdentifierName != null)
                    hashCode = hashCode * 59 + this.RelatedIdentifierName.GetHashCode();
                if (this.RelatedIdentifierValue != null)
                    hashCode = hashCode * 59 + this.RelatedIdentifierValue.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
