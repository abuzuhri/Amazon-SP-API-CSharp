/* 
 * The Selling Partner API for Finances
 *
 * The Selling Partner API for Finances helps you obtain financial information relevant to a seller's business. You can obtain financial events for a given order or date range without having to wait until a statement period closes.
 *
 * OpenAPI spec version: 2024-06-19
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using Newtonsoft.Json;
using System;
using System.Collections.Generic;
using System.ComponentModel.DataAnnotations;
using System.Runtime.Serialization;
using System.Text;

namespace FikaAmazonAPI.AmazonSpApiSDK.Models.Finances.Model
{
    /// <summary>
    /// Additional information related to Amazon Pay.
    /// </summary>
    [DataContract]
    public partial class AmazonPayContext :  IEquatable<AmazonPayContext>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="AmazonPayContext" /> class.
        /// </summary>
        /// <param name="storeName">Store name related to transaction..</param>
        /// <param name="orderType">Order type of the transaction..</param>
        /// <param name="channel">Channel details of related transaction..</param>
        public AmazonPayContext(string storeName = default(string), string orderType = default(string), string channel = default(string))
        {
            this.StoreName = storeName;
            this.OrderType = orderType;
            this.Channel = channel;
        }
        
        /// <summary>
        /// Store name related to transaction.
        /// </summary>
        /// <value>Store name related to transaction.</value>
        [DataMember(Name="storeName", EmitDefaultValue=false)]
        public string StoreName { get; set; }

        /// <summary>
        /// Order type of the transaction.
        /// </summary>
        /// <value>Order type of the transaction.</value>
        [DataMember(Name="orderType", EmitDefaultValue=false)]
        public string OrderType { get; set; }

        /// <summary>
        /// Channel details of related transaction.
        /// </summary>
        /// <value>Channel details of related transaction.</value>
        [DataMember(Name="channel", EmitDefaultValue=false)]
        public string Channel { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class AmazonPayContext {\n");
            sb.Append("  StoreName: ").Append(StoreName).Append("\n");
            sb.Append("  OrderType: ").Append(OrderType).Append("\n");
            sb.Append("  Channel: ").Append(Channel).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as AmazonPayContext);
        }

        /// <summary>
        /// Returns true if AmazonPayContext instances are equal
        /// </summary>
        /// <param name="input">Instance of AmazonPayContext to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(AmazonPayContext input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.StoreName == input.StoreName ||
                    (this.StoreName != null &&
                    this.StoreName.Equals(input.StoreName))
                ) && 
                (
                    this.OrderType == input.OrderType ||
                    (this.OrderType != null &&
                    this.OrderType.Equals(input.OrderType))
                ) && 
                (
                    this.Channel == input.Channel ||
                    (this.Channel != null &&
                    this.Channel.Equals(input.Channel))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.StoreName != null)
                    hashCode = hashCode * 59 + this.StoreName.GetHashCode();
                if (this.OrderType != null)
                    hashCode = hashCode * 59 + this.OrderType.GetHashCode();
                if (this.Channel != null)
                    hashCode = hashCode * 59 + this.Channel.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
