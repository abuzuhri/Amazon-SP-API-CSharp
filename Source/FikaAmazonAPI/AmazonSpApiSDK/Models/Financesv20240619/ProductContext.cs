/* 
 * The Selling Partner API for Finances
 *
 * The Selling Partner API for Finances helps you obtain financial information relevant to a seller's business. You can obtain financial events for a given order or date range without having to wait until a statement period closes.
 *
 * OpenAPI spec version: 2024-06-19
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using Newtonsoft.Json;
using System;
using System.Collections.Generic;
using System.ComponentModel.DataAnnotations;
using System.Runtime.Serialization;
using System.Text;

namespace FikaAmazonAPI.AmazonSpApiSDK.Models.Finances.Model
{
    /// <summary>
    /// Additional information related to the product.
    /// </summary>
    [DataContract]
    public partial class ProductContext :  IEquatable<ProductContext>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="ProductContext" /> class.
        /// </summary>
        /// <param name="asin">Amazon Standard Identification Number (ASIN) of the item..</param>
        /// <param name="sku">Stock keeping unit (SKU) of the item..</param>
        /// <param name="quantityShipped">Quantity of the item shipped..</param>
        /// <param name="fulfillmentNetwork">Fulfillment network of the item..</param>
        public ProductContext(string asin = default(string), string sku = default(string), int? quantityShipped = default(int?), string fulfillmentNetwork = default(string))
        {
            this.Asin = asin;
            this.Sku = sku;
            this.QuantityShipped = quantityShipped;
            this.FulfillmentNetwork = fulfillmentNetwork;
        }
        
        /// <summary>
        /// Amazon Standard Identification Number (ASIN) of the item.
        /// </summary>
        /// <value>Amazon Standard Identification Number (ASIN) of the item.</value>
        [DataMember(Name="asin", EmitDefaultValue=false)]
        public string Asin { get; set; }

        /// <summary>
        /// Stock keeping unit (SKU) of the item.
        /// </summary>
        /// <value>Stock keeping unit (SKU) of the item.</value>
        [DataMember(Name="sku", EmitDefaultValue=false)]
        public string Sku { get; set; }

        /// <summary>
        /// Quantity of the item shipped.
        /// </summary>
        /// <value>Quantity of the item shipped.</value>
        [DataMember(Name="quantityShipped", EmitDefaultValue=false)]
        public int? QuantityShipped { get; set; }

        /// <summary>
        /// Fulfillment network of the item.
        /// </summary>
        /// <value>Fulfillment network of the item.</value>
        [DataMember(Name="fulfillmentNetwork", EmitDefaultValue=false)]
        public string FulfillmentNetwork { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class ProductContext {\n");
            sb.Append("  Asin: ").Append(Asin).Append("\n");
            sb.Append("  Sku: ").Append(Sku).Append("\n");
            sb.Append("  QuantityShipped: ").Append(QuantityShipped).Append("\n");
            sb.Append("  FulfillmentNetwork: ").Append(FulfillmentNetwork).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as ProductContext);
        }

        /// <summary>
        /// Returns true if ProductContext instances are equal
        /// </summary>
        /// <param name="input">Instance of ProductContext to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(ProductContext input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.Asin == input.Asin ||
                    (this.Asin != null &&
                    this.Asin.Equals(input.Asin))
                ) && 
                (
                    this.Sku == input.Sku ||
                    (this.Sku != null &&
                    this.Sku.Equals(input.Sku))
                ) && 
                (
                    this.QuantityShipped == input.QuantityShipped ||
                    (this.QuantityShipped != null &&
                    this.QuantityShipped.Equals(input.QuantityShipped))
                ) && 
                (
                    this.FulfillmentNetwork == input.FulfillmentNetwork ||
                    (this.FulfillmentNetwork != null &&
                    this.FulfillmentNetwork.Equals(input.FulfillmentNetwork))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.Asin != null)
                    hashCode = hashCode * 59 + this.Asin.GetHashCode();
                if (this.Sku != null)
                    hashCode = hashCode * 59 + this.Sku.GetHashCode();
                if (this.QuantityShipped != null)
                    hashCode = hashCode * 59 + this.QuantityShipped.GetHashCode();
                if (this.FulfillmentNetwork != null)
                    hashCode = hashCode * 59 + this.FulfillmentNetwork.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
