/* 
 * The Selling Partner API for Finances
 *
 * The Selling Partner API for Finances helps you obtain financial information relevant to a seller's business. You can obtain financial events for a given order or date range without having to wait until a statement period closes.
 *
 * OpenAPI spec version: 2024-06-19
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using Newtonsoft.Json;
using System;
using System.Collections.Generic;
using System.ComponentModel.DataAnnotations;
using System.Runtime.Serialization;
using System.Text;

namespace FikaAmazonAPI.AmazonSpApiSDK.Models.Finances.Model
{
    /// <summary>
    /// Additional information about the items in Transaction.
    /// </summary>
    [DataContract]
    public partial class Item :  IEquatable<Item>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="Item" /> class.
        /// </summary>
        /// <param name="description">Description of items in the transaction.</param>
        /// <param name="relatedIdentifiers">Related business identifiers of the item..</param>
        /// <param name="totalAmount">The total amount of the item..</param>
        /// <param name="breakdowns">List of breakdowns which will provide the details on how the total amount is calculated for the financial transaction..</param>
        /// <param name="contexts">Additional Information about the item..</param>
        public Item(string description = default(string), ItemRelatedIdentifiers relatedIdentifiers = default(ItemRelatedIdentifiers), Currency totalAmount = default(Currency), Breakdowns breakdowns = default(Breakdowns), Contexts contexts = default(Contexts))
        {
            this.Description = description;
            this.RelatedIdentifiers = relatedIdentifiers;
            this.TotalAmount = totalAmount;
            this.Breakdowns = breakdowns;
            this.Contexts = contexts;
        }
        
        /// <summary>
        /// Description of items in the transaction
        /// </summary>
        /// <value>Description of items in the transaction</value>
        [DataMember(Name="description", EmitDefaultValue=false)]
        public string Description { get; set; }

        /// <summary>
        /// Related business identifiers of the item.
        /// </summary>
        /// <value>Related business identifiers of the item.</value>
        [DataMember(Name="relatedIdentifiers", EmitDefaultValue=false)]
        public ItemRelatedIdentifiers RelatedIdentifiers { get; set; }

        /// <summary>
        /// The total amount of the item.
        /// </summary>
        /// <value>The total amount of the item.</value>
        [DataMember(Name="totalAmount", EmitDefaultValue=false)]
        public Currency TotalAmount { get; set; }

        /// <summary>
        /// List of breakdowns which will provide the details on how the total amount is calculated for the financial transaction.
        /// </summary>
        /// <value>List of breakdowns which will provide the details on how the total amount is calculated for the financial transaction.</value>
        [DataMember(Name="breakdowns", EmitDefaultValue=false)]
        public Breakdowns Breakdowns { get; set; }

        /// <summary>
        /// Additional Information about the item.
        /// </summary>
        /// <value>Additional Information about the item.</value>
        [DataMember(Name="contexts", EmitDefaultValue=false)]
        public Contexts Contexts { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class Item {\n");
            sb.Append("  Description: ").Append(Description).Append("\n");
            sb.Append("  RelatedIdentifiers: ").Append(RelatedIdentifiers).Append("\n");
            sb.Append("  TotalAmount: ").Append(TotalAmount).Append("\n");
            sb.Append("  Breakdowns: ").Append(Breakdowns).Append("\n");
            sb.Append("  Contexts: ").Append(Contexts).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as Item);
        }

        /// <summary>
        /// Returns true if Item instances are equal
        /// </summary>
        /// <param name="input">Instance of Item to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(Item input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.Description == input.Description ||
                    (this.Description != null &&
                    this.Description.Equals(input.Description))
                ) && 
                (
                    this.RelatedIdentifiers == input.RelatedIdentifiers ||
                    (this.RelatedIdentifiers != null &&
                    this.RelatedIdentifiers.Equals(input.RelatedIdentifiers))
                ) && 
                (
                    this.TotalAmount == input.TotalAmount ||
                    (this.TotalAmount != null &&
                    this.TotalAmount.Equals(input.TotalAmount))
                ) && 
                (
                    this.Breakdowns == input.Breakdowns ||
                    (this.Breakdowns != null &&
                    this.Breakdowns.Equals(input.Breakdowns))
                ) && 
                (
                    this.Contexts == input.Contexts ||
                    (this.Contexts != null &&
                    this.Contexts.Equals(input.Contexts))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.Description != null)
                    hashCode = hashCode * 59 + this.Description.GetHashCode();
                if (this.RelatedIdentifiers != null)
                    hashCode = hashCode * 59 + this.RelatedIdentifiers.GetHashCode();
                if (this.TotalAmount != null)
                    hashCode = hashCode * 59 + this.TotalAmount.GetHashCode();
                if (this.Breakdowns != null)
                    hashCode = hashCode * 59 + this.Breakdowns.GetHashCode();
                if (this.Contexts != null)
                    hashCode = hashCode * 59 + this.Contexts.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
