/* 
 * The Selling Partner API for Finances
 *
 * The Selling Partner API for Finances helps you obtain financial information relevant to a seller's business. You can obtain financial events for a given order or date range without having to wait until a statement period closes.
 *
 * OpenAPI spec version: 2024-06-19
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using Newtonsoft.Json;
using System;
using System.Collections.Generic;
using System.ComponentModel.DataAnnotations;
using System.Runtime.Serialization;
using System.Text;

namespace FikaAmazonAPI.AmazonSpApiSDK.Models.Finances.Model
{
    /// <summary>
    /// Additional Information about the item.
    /// </summary>
    [DataContract]
    public partial class Context :  IEquatable<Context>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="Context" /> class.
        /// </summary>
        /// <param name="storeName">Store name related to transaction..</param>
        /// <param name="orderType">Order type of the transaction..</param>
        /// <param name="channel">Channel details of related transaction..</param>
        /// <param name="asin">Amazon Standard Identification Number (ASIN) of the item..</param>
        /// <param name="sku">Stock keeping unit (SKU) of the item..</param>
        /// <param name="quantityShipped">Quantity of the item shipped..</param>
        /// <param name="fulfillmentNetwork">Fulfillment network of the item..</param>
        /// <param name="paymentType">Type of payment made..</param>
        /// <param name="paymentMethod">Method of payment made..</param>
        /// <param name="paymentReference">Reference number of payment made..</param>
        /// <param name="paymentDate">Date of payment made..</param>
        /// <param name="deferralReason">The deferral policy applied to the transaction.  **Examples:** &#x60;B2B&#x60; (invoiced orders), &#x60;DD7&#x60; (delivery date policy).</param>
        /// <param name="maturityDate">The release date of the transaction..</param>
        /// <param name="startTime">Start time of the transaction..</param>
        /// <param name="endTime">End time of the transaction..</param>
        public Context(string storeName = default(string), string orderType = default(string), string channel = default(string), string asin = default(string), string sku = default(string), int? quantityShipped = default(int?), string fulfillmentNetwork = default(string), string paymentType = default(string), string paymentMethod = default(string), string paymentReference = default(string), DateTime? paymentDate = default(DateTime?), string deferralReason = default(string), DateTime? maturityDate = default(DateTime?), DateTime? startTime = default(DateTime?), DateTime? endTime = default(DateTime?))
        {
            this.StoreName = storeName;
            this.OrderType = orderType;
            this.Channel = channel;
            this.Asin = asin;
            this.Sku = sku;
            this.QuantityShipped = quantityShipped;
            this.FulfillmentNetwork = fulfillmentNetwork;
            this.PaymentType = paymentType;
            this.PaymentMethod = paymentMethod;
            this.PaymentReference = paymentReference;
            this.PaymentDate = paymentDate;
            this.DeferralReason = deferralReason;
            this.MaturityDate = maturityDate;
            this.StartTime = startTime;
            this.EndTime = endTime;
        }
        
        /// <summary>
        /// Store name related to transaction.
        /// </summary>
        /// <value>Store name related to transaction.</value>
        [DataMember(Name="storeName", EmitDefaultValue=false)]
        public string StoreName { get; set; }

        /// <summary>
        /// Order type of the transaction.
        /// </summary>
        /// <value>Order type of the transaction.</value>
        [DataMember(Name="orderType", EmitDefaultValue=false)]
        public string OrderType { get; set; }

        /// <summary>
        /// Channel details of related transaction.
        /// </summary>
        /// <value>Channel details of related transaction.</value>
        [DataMember(Name="channel", EmitDefaultValue=false)]
        public string Channel { get; set; }

        /// <summary>
        /// Amazon Standard Identification Number (ASIN) of the item.
        /// </summary>
        /// <value>Amazon Standard Identification Number (ASIN) of the item.</value>
        [DataMember(Name="asin", EmitDefaultValue=false)]
        public string Asin { get; set; }

        /// <summary>
        /// Stock keeping unit (SKU) of the item.
        /// </summary>
        /// <value>Stock keeping unit (SKU) of the item.</value>
        [DataMember(Name="sku", EmitDefaultValue=false)]
        public string Sku { get; set; }

        /// <summary>
        /// Quantity of the item shipped.
        /// </summary>
        /// <value>Quantity of the item shipped.</value>
        [DataMember(Name="quantityShipped", EmitDefaultValue=false)]
        public int? QuantityShipped { get; set; }

        /// <summary>
        /// Fulfillment network of the item.
        /// </summary>
        /// <value>Fulfillment network of the item.</value>
        [DataMember(Name="fulfillmentNetwork", EmitDefaultValue=false)]
        public string FulfillmentNetwork { get; set; }

        /// <summary>
        /// Type of payment made.
        /// </summary>
        /// <value>Type of payment made.</value>
        [DataMember(Name="paymentType", EmitDefaultValue=false)]
        public string PaymentType { get; set; }

        /// <summary>
        /// Method of payment made.
        /// </summary>
        /// <value>Method of payment made.</value>
        [DataMember(Name="paymentMethod", EmitDefaultValue=false)]
        public string PaymentMethod { get; set; }

        /// <summary>
        /// Reference number of payment made.
        /// </summary>
        /// <value>Reference number of payment made.</value>
        [DataMember(Name="paymentReference", EmitDefaultValue=false)]
        public string PaymentReference { get; set; }

        /// <summary>
        /// Date of payment made.
        /// </summary>
        /// <value>Date of payment made.</value>
        [DataMember(Name="paymentDate", EmitDefaultValue=false)]
        public DateTime? PaymentDate { get; set; }

        /// <summary>
        /// The deferral policy applied to the transaction.  **Examples:** &#x60;B2B&#x60; (invoiced orders), &#x60;DD7&#x60; (delivery date policy)
        /// </summary>
        /// <value>The deferral policy applied to the transaction.  **Examples:** &#x60;B2B&#x60; (invoiced orders), &#x60;DD7&#x60; (delivery date policy)</value>
        [DataMember(Name="deferralReason", EmitDefaultValue=false)]
        public string DeferralReason { get; set; }

        /// <summary>
        /// The release date of the transaction.
        /// </summary>
        /// <value>The release date of the transaction.</value>
        [DataMember(Name="maturityDate", EmitDefaultValue=false)]
        public DateTime? MaturityDate { get; set; }

        /// <summary>
        /// Start time of the transaction.
        /// </summary>
        /// <value>Start time of the transaction.</value>
        [DataMember(Name="startTime", EmitDefaultValue=false)]
        public DateTime? StartTime { get; set; }

        /// <summary>
        /// End time of the transaction.
        /// </summary>
        /// <value>End time of the transaction.</value>
        [DataMember(Name="endTime", EmitDefaultValue=false)]
        public DateTime? EndTime { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class Context {\n");
            sb.Append("  StoreName: ").Append(StoreName).Append("\n");
            sb.Append("  OrderType: ").Append(OrderType).Append("\n");
            sb.Append("  Channel: ").Append(Channel).Append("\n");
            sb.Append("  Asin: ").Append(Asin).Append("\n");
            sb.Append("  Sku: ").Append(Sku).Append("\n");
            sb.Append("  QuantityShipped: ").Append(QuantityShipped).Append("\n");
            sb.Append("  FulfillmentNetwork: ").Append(FulfillmentNetwork).Append("\n");
            sb.Append("  PaymentType: ").Append(PaymentType).Append("\n");
            sb.Append("  PaymentMethod: ").Append(PaymentMethod).Append("\n");
            sb.Append("  PaymentReference: ").Append(PaymentReference).Append("\n");
            sb.Append("  PaymentDate: ").Append(PaymentDate).Append("\n");
            sb.Append("  DeferralReason: ").Append(DeferralReason).Append("\n");
            sb.Append("  MaturityDate: ").Append(MaturityDate).Append("\n");
            sb.Append("  StartTime: ").Append(StartTime).Append("\n");
            sb.Append("  EndTime: ").Append(EndTime).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as Context);
        }

        /// <summary>
        /// Returns true if Context instances are equal
        /// </summary>
        /// <param name="input">Instance of Context to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(Context input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.StoreName == input.StoreName ||
                    (this.StoreName != null &&
                    this.StoreName.Equals(input.StoreName))
                ) && 
                (
                    this.OrderType == input.OrderType ||
                    (this.OrderType != null &&
                    this.OrderType.Equals(input.OrderType))
                ) && 
                (
                    this.Channel == input.Channel ||
                    (this.Channel != null &&
                    this.Channel.Equals(input.Channel))
                ) && 
                (
                    this.Asin == input.Asin ||
                    (this.Asin != null &&
                    this.Asin.Equals(input.Asin))
                ) && 
                (
                    this.Sku == input.Sku ||
                    (this.Sku != null &&
                    this.Sku.Equals(input.Sku))
                ) && 
                (
                    this.QuantityShipped == input.QuantityShipped ||
                    (this.QuantityShipped != null &&
                    this.QuantityShipped.Equals(input.QuantityShipped))
                ) && 
                (
                    this.FulfillmentNetwork == input.FulfillmentNetwork ||
                    (this.FulfillmentNetwork != null &&
                    this.FulfillmentNetwork.Equals(input.FulfillmentNetwork))
                ) && 
                (
                    this.PaymentType == input.PaymentType ||
                    (this.PaymentType != null &&
                    this.PaymentType.Equals(input.PaymentType))
                ) && 
                (
                    this.PaymentMethod == input.PaymentMethod ||
                    (this.PaymentMethod != null &&
                    this.PaymentMethod.Equals(input.PaymentMethod))
                ) && 
                (
                    this.PaymentReference == input.PaymentReference ||
                    (this.PaymentReference != null &&
                    this.PaymentReference.Equals(input.PaymentReference))
                ) && 
                (
                    this.PaymentDate == input.PaymentDate ||
                    (this.PaymentDate != null &&
                    this.PaymentDate.Equals(input.PaymentDate))
                ) && 
                (
                    this.DeferralReason == input.DeferralReason ||
                    (this.DeferralReason != null &&
                    this.DeferralReason.Equals(input.DeferralReason))
                ) && 
                (
                    this.MaturityDate == input.MaturityDate ||
                    (this.MaturityDate != null &&
                    this.MaturityDate.Equals(input.MaturityDate))
                ) && 
                (
                    this.StartTime == input.StartTime ||
                    (this.StartTime != null &&
                    this.StartTime.Equals(input.StartTime))
                ) && 
                (
                    this.EndTime == input.EndTime ||
                    (this.EndTime != null &&
                    this.EndTime.Equals(input.EndTime))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.StoreName != null)
                    hashCode = hashCode * 59 + this.StoreName.GetHashCode();
                if (this.OrderType != null)
                    hashCode = hashCode * 59 + this.OrderType.GetHashCode();
                if (this.Channel != null)
                    hashCode = hashCode * 59 + this.Channel.GetHashCode();
                if (this.Asin != null)
                    hashCode = hashCode * 59 + this.Asin.GetHashCode();
                if (this.Sku != null)
                    hashCode = hashCode * 59 + this.Sku.GetHashCode();
                if (this.QuantityShipped != null)
                    hashCode = hashCode * 59 + this.QuantityShipped.GetHashCode();
                if (this.FulfillmentNetwork != null)
                    hashCode = hashCode * 59 + this.FulfillmentNetwork.GetHashCode();
                if (this.PaymentType != null)
                    hashCode = hashCode * 59 + this.PaymentType.GetHashCode();
                if (this.PaymentMethod != null)
                    hashCode = hashCode * 59 + this.PaymentMethod.GetHashCode();
                if (this.PaymentReference != null)
                    hashCode = hashCode * 59 + this.PaymentReference.GetHashCode();
                if (this.PaymentDate != null)
                    hashCode = hashCode * 59 + this.PaymentDate.GetHashCode();
                if (this.DeferralReason != null)
                    hashCode = hashCode * 59 + this.DeferralReason.GetHashCode();
                if (this.MaturityDate != null)
                    hashCode = hashCode * 59 + this.MaturityDate.GetHashCode();
                if (this.StartTime != null)
                    hashCode = hashCode * 59 + this.StartTime.GetHashCode();
                if (this.EndTime != null)
                    hashCode = hashCode * 59 + this.EndTime.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
