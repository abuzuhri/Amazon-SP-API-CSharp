/* 
 * The Selling Partner API for Finances
 *
 * The Selling Partner API for Finances helps you obtain financial information relevant to a seller's business. You can obtain financial events for a given order or date range without having to wait until a statement period closes.
 *
 * OpenAPI spec version: 2024-06-19
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using Newtonsoft.Json;
using System;
using System.Collections.Generic;
using System.ComponentModel.DataAnnotations;
using System.Runtime.Serialization;
using System.Text;

namespace FikaAmazonAPI.AmazonSpApiSDK.Models.Finances.Model
{
    /// <summary>
    /// Information about the marketplace where the transaction occurred.
    /// </summary>
    [DataContract]
    public partial class MarketplaceDetails :  IEquatable<MarketplaceDetails>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="MarketplaceDetails" /> class.
        /// </summary>
        /// <param name="marketplaceId">The identifier of the marketplace where the transaction was made..</param>
        /// <param name="marketplaceName">The name of the marketplace where the transaction occurred.   Example: &#39;Amazon.com&#39;,&#39;Amazon.in&#39;.</param>
        public MarketplaceDetails(string marketplaceId = default(string), string marketplaceName = default(string))
        {
            this.MarketplaceId = marketplaceId;
            this.MarketplaceName = marketplaceName;
        }
        
        /// <summary>
        /// The identifier of the marketplace where the transaction was made.
        /// </summary>
        /// <value>The identifier of the marketplace where the transaction was made.</value>
        [DataMember(Name="marketplaceId", EmitDefaultValue=false)]
        public string MarketplaceId { get; set; }

        /// <summary>
        /// The name of the marketplace where the transaction occurred.   Example: &#39;Amazon.com&#39;,&#39;Amazon.in&#39;
        /// </summary>
        /// <value>The name of the marketplace where the transaction occurred.   Example: &#39;Amazon.com&#39;,&#39;Amazon.in&#39;</value>
        [DataMember(Name="marketplaceName", EmitDefaultValue=false)]
        public string MarketplaceName { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class MarketplaceDetails {\n");
            sb.Append("  MarketplaceId: ").Append(MarketplaceId).Append("\n");
            sb.Append("  MarketplaceName: ").Append(MarketplaceName).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as MarketplaceDetails);
        }

        /// <summary>
        /// Returns true if MarketplaceDetails instances are equal
        /// </summary>
        /// <param name="input">Instance of MarketplaceDetails to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(MarketplaceDetails input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.MarketplaceId == input.MarketplaceId ||
                    (this.MarketplaceId != null &&
                    this.MarketplaceId.Equals(input.MarketplaceId))
                ) && 
                (
                    this.MarketplaceName == input.MarketplaceName ||
                    (this.MarketplaceName != null &&
                    this.MarketplaceName.Equals(input.MarketplaceName))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.MarketplaceId != null)
                    hashCode = hashCode * 59 + this.MarketplaceId.GetHashCode();
                if (this.MarketplaceName != null)
                    hashCode = hashCode * 59 + this.MarketplaceName.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
