/* 
 * The Selling Partner API for Finances
 *
 * The Selling Partner API for Finances helps you obtain financial information relevant to a seller's business. You can obtain financial events for a given order or date range without having to wait until a statement period closes.
 *
 * OpenAPI spec version: 2024-06-19
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using Newtonsoft.Json;
using System;
using System.Collections.Generic;
using System.ComponentModel.DataAnnotations;
using System.Runtime.Serialization;
using System.Text;

namespace FikaAmazonAPI.AmazonSpApiSDK.Models.Finances.Model
{
    /// <summary>
    /// Contains all information related to the transaction.
    /// </summary>
    [DataContract]
    public partial class Transaction :  IEquatable<Transaction>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="Transaction" /> class.
        /// </summary>
        /// <param name="sellingPartnerMetadata">Metadata describing the seller..</param>
        /// <param name="relatedIdentifiers">Related business identifiers of the transaction..</param>
        /// <param name="transactionType">The type of transaction.  Possible values:  * Shipment.</param>
        /// <param name="transactionId">The unique identifier for the transaction..</param>
        /// <param name="transactionStatus">The status of the transaction.  **Possible values:**  * &#x60;DEFERRED&#x60;: the transaction is currently deferred. * &#x60;RELEASED&#x60;: the transaction is currently released. * &#x60;DEFERRED_RELEASED&#x60;: the transaction was deferred in the past, but is now released. Deferred transactions will have their status updated to &#x60;DEFERRED_RELEASED&#x60; when released..</param>
        /// <param name="description">Describes the reasons for the transaction.  Example: &#39;Order Payment&#39;,&#39;Refund Order&#39;.</param>
        /// <param name="postedDate">The date and time when the transaction was posted..</param>
        /// <param name="totalAmount">Total amount of transaction..</param>
        /// <param name="marketplaceDetails">Information about the marketplace where the transaction occurred..</param>
        /// <param name="items">Additional information about the items in Transaction..</param>
        /// <param name="contexts">Additional Information about the transaction..</param>
        /// <param name="breakdowns">List of breakdowns which will provide the details on how the total amount is calculated for the financial transaction..</param>
        public Transaction(SellingPartnerMetadata sellingPartnerMetadata = default(SellingPartnerMetadata), RelatedIdentifiers relatedIdentifiers = default(RelatedIdentifiers), string transactionType = default(string), string transactionId = default(string), string transactionStatus = default(string), string description = default(string), DateTime? postedDate = default(DateTime?), Currency totalAmount = default(Currency), MarketplaceDetails marketplaceDetails = default(MarketplaceDetails), Items items = default(Items), Contexts contexts = default(Contexts), Breakdowns breakdowns = default(Breakdowns))
        {
            this.SellingPartnerMetadata = sellingPartnerMetadata;
            this.RelatedIdentifiers = relatedIdentifiers;
            this.TransactionType = transactionType;
            this.TransactionId = transactionId;
            this.TransactionStatus = transactionStatus;
            this.Description = description;
            this.PostedDate = postedDate;
            this.TotalAmount = totalAmount;
            this.MarketplaceDetails = marketplaceDetails;
            this.Items = items;
            this.Contexts = contexts;
            this.Breakdowns = breakdowns;
        }
        
        /// <summary>
        /// Metadata describing the seller.
        /// </summary>
        /// <value>Metadata describing the seller.</value>
        [DataMember(Name="sellingPartnerMetadata", EmitDefaultValue=false)]
        public SellingPartnerMetadata SellingPartnerMetadata { get; set; }

        /// <summary>
        /// Related business identifiers of the transaction.
        /// </summary>
        /// <value>Related business identifiers of the transaction.</value>
        [DataMember(Name="relatedIdentifiers", EmitDefaultValue=false)]
        public RelatedIdentifiers RelatedIdentifiers { get; set; }

        /// <summary>
        /// The type of transaction.  Possible values:  * Shipment
        /// </summary>
        /// <value>The type of transaction.  Possible values:  * Shipment</value>
        [DataMember(Name="transactionType", EmitDefaultValue=false)]
        public string TransactionType { get; set; }

        /// <summary>
        /// The unique identifier for the transaction.
        /// </summary>
        /// <value>The unique identifier for the transaction.</value>
        [DataMember(Name="transactionId", EmitDefaultValue=false)]
        public string TransactionId { get; set; }

        /// <summary>
        /// The status of the transaction.  **Possible values:**  * &#x60;DEFERRED&#x60;: the transaction is currently deferred. * &#x60;RELEASED&#x60;: the transaction is currently released. * &#x60;DEFERRED_RELEASED&#x60;: the transaction was deferred in the past, but is now released. Deferred transactions will have their status updated to &#x60;DEFERRED_RELEASED&#x60; when released.
        /// </summary>
        /// <value>The status of the transaction.  **Possible values:**  * &#x60;DEFERRED&#x60;: the transaction is currently deferred. * &#x60;RELEASED&#x60;: the transaction is currently released. * &#x60;DEFERRED_RELEASED&#x60;: the transaction was deferred in the past, but is now released. Deferred transactions will have their status updated to &#x60;DEFERRED_RELEASED&#x60; when released.</value>
        [DataMember(Name="transactionStatus", EmitDefaultValue=false)]
        public string TransactionStatus { get; set; }

        /// <summary>
        /// Describes the reasons for the transaction.  Example: &#39;Order Payment&#39;,&#39;Refund Order&#39;
        /// </summary>
        /// <value>Describes the reasons for the transaction.  Example: &#39;Order Payment&#39;,&#39;Refund Order&#39;</value>
        [DataMember(Name="description", EmitDefaultValue=false)]
        public string Description { get; set; }

        /// <summary>
        /// The date and time when the transaction was posted.
        /// </summary>
        /// <value>The date and time when the transaction was posted.</value>
        [DataMember(Name="postedDate", EmitDefaultValue=false)]
        public DateTime? PostedDate { get; set; }

        /// <summary>
        /// Total amount of transaction.
        /// </summary>
        /// <value>Total amount of transaction.</value>
        [DataMember(Name="totalAmount", EmitDefaultValue=false)]
        public Currency TotalAmount { get; set; }

        /// <summary>
        /// Information about the marketplace where the transaction occurred.
        /// </summary>
        /// <value>Information about the marketplace where the transaction occurred.</value>
        [DataMember(Name="marketplaceDetails", EmitDefaultValue=false)]
        public MarketplaceDetails MarketplaceDetails { get; set; }

        /// <summary>
        /// Additional information about the items in Transaction.
        /// </summary>
        /// <value>Additional information about the items in Transaction.</value>
        [DataMember(Name="items", EmitDefaultValue=false)]
        public Items Items { get; set; }

        /// <summary>
        /// Additional Information about the transaction.
        /// </summary>
        /// <value>Additional Information about the transaction.</value>
        [DataMember(Name="contexts", EmitDefaultValue=false)]
        public Contexts Contexts { get; set; }

        /// <summary>
        /// List of breakdowns which will provide the details on how the total amount is calculated for the financial transaction.
        /// </summary>
        /// <value>List of breakdowns which will provide the details on how the total amount is calculated for the financial transaction.</value>
        [DataMember(Name="breakdowns", EmitDefaultValue=false)]
        public Breakdowns Breakdowns { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class Transaction {\n");
            sb.Append("  SellingPartnerMetadata: ").Append(SellingPartnerMetadata).Append("\n");
            sb.Append("  RelatedIdentifiers: ").Append(RelatedIdentifiers).Append("\n");
            sb.Append("  TransactionType: ").Append(TransactionType).Append("\n");
            sb.Append("  TransactionId: ").Append(TransactionId).Append("\n");
            sb.Append("  TransactionStatus: ").Append(TransactionStatus).Append("\n");
            sb.Append("  Description: ").Append(Description).Append("\n");
            sb.Append("  PostedDate: ").Append(PostedDate).Append("\n");
            sb.Append("  TotalAmount: ").Append(TotalAmount).Append("\n");
            sb.Append("  MarketplaceDetails: ").Append(MarketplaceDetails).Append("\n");
            sb.Append("  Items: ").Append(Items).Append("\n");
            sb.Append("  Contexts: ").Append(Contexts).Append("\n");
            sb.Append("  Breakdowns: ").Append(Breakdowns).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as Transaction);
        }

        /// <summary>
        /// Returns true if Transaction instances are equal
        /// </summary>
        /// <param name="input">Instance of Transaction to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(Transaction input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.SellingPartnerMetadata == input.SellingPartnerMetadata ||
                    (this.SellingPartnerMetadata != null &&
                    this.SellingPartnerMetadata.Equals(input.SellingPartnerMetadata))
                ) && 
                (
                    this.RelatedIdentifiers == input.RelatedIdentifiers ||
                    (this.RelatedIdentifiers != null &&
                    this.RelatedIdentifiers.Equals(input.RelatedIdentifiers))
                ) && 
                (
                    this.TransactionType == input.TransactionType ||
                    (this.TransactionType != null &&
                    this.TransactionType.Equals(input.TransactionType))
                ) && 
                (
                    this.TransactionId == input.TransactionId ||
                    (this.TransactionId != null &&
                    this.TransactionId.Equals(input.TransactionId))
                ) && 
                (
                    this.TransactionStatus == input.TransactionStatus ||
                    (this.TransactionStatus != null &&
                    this.TransactionStatus.Equals(input.TransactionStatus))
                ) && 
                (
                    this.Description == input.Description ||
                    (this.Description != null &&
                    this.Description.Equals(input.Description))
                ) && 
                (
                    this.PostedDate == input.PostedDate ||
                    (this.PostedDate != null &&
                    this.PostedDate.Equals(input.PostedDate))
                ) && 
                (
                    this.TotalAmount == input.TotalAmount ||
                    (this.TotalAmount != null &&
                    this.TotalAmount.Equals(input.TotalAmount))
                ) && 
                (
                    this.MarketplaceDetails == input.MarketplaceDetails ||
                    (this.MarketplaceDetails != null &&
                    this.MarketplaceDetails.Equals(input.MarketplaceDetails))
                ) && 
                (
                    this.Items == input.Items ||
                    (this.Items != null &&
                    this.Items.Equals(input.Items))
                ) && 
                (
                    this.Contexts == input.Contexts ||
                    (this.Contexts != null &&
                    this.Contexts.Equals(input.Contexts))
                ) && 
                (
                    this.Breakdowns == input.Breakdowns ||
                    (this.Breakdowns != null &&
                    this.Breakdowns.Equals(input.Breakdowns))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.SellingPartnerMetadata != null)
                    hashCode = hashCode * 59 + this.SellingPartnerMetadata.GetHashCode();
                if (this.RelatedIdentifiers != null)
                    hashCode = hashCode * 59 + this.RelatedIdentifiers.GetHashCode();
                if (this.TransactionType != null)
                    hashCode = hashCode * 59 + this.TransactionType.GetHashCode();
                if (this.TransactionId != null)
                    hashCode = hashCode * 59 + this.TransactionId.GetHashCode();
                if (this.TransactionStatus != null)
                    hashCode = hashCode * 59 + this.TransactionStatus.GetHashCode();
                if (this.Description != null)
                    hashCode = hashCode * 59 + this.Description.GetHashCode();
                if (this.PostedDate != null)
                    hashCode = hashCode * 59 + this.PostedDate.GetHashCode();
                if (this.TotalAmount != null)
                    hashCode = hashCode * 59 + this.TotalAmount.GetHashCode();
                if (this.MarketplaceDetails != null)
                    hashCode = hashCode * 59 + this.MarketplaceDetails.GetHashCode();
                if (this.Items != null)
                    hashCode = hashCode * 59 + this.Items.GetHashCode();
                if (this.Contexts != null)
                    hashCode = hashCode * 59 + this.Contexts.GetHashCode();
                if (this.Breakdowns != null)
                    hashCode = hashCode * 59 + this.Breakdowns.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
