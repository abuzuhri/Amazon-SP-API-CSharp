/* 
 * The Selling Partner API for Finances
 *
 * The Selling Partner API for Finances helps you obtain financial information relevant to a seller's business. You can obtain financial events for a given order or date range without having to wait until a statement period closes.
 *
 * OpenAPI spec version: 2024-06-19
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using Newtonsoft.Json;
using System;
using System.Collections.Generic;
using System.ComponentModel.DataAnnotations;
using System.Runtime.Serialization;
using System.Text;

namespace FikaAmazonAPI.AmazonSpApiSDK.Models.Finances.Model
{
    /// <summary>
    /// Additional information related to Payments related transactions.
    /// </summary>
    [DataContract]
    public partial class PaymentsContext :  IEquatable<PaymentsContext>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="PaymentsContext" /> class.
        /// </summary>
        /// <param name="paymentType">Type of payment made..</param>
        /// <param name="paymentMethod">Method of payment made..</param>
        /// <param name="paymentReference">Reference number of payment made..</param>
        /// <param name="paymentDate">Date of payment made..</param>
        public PaymentsContext(string paymentType = default(string), string paymentMethod = default(string), string paymentReference = default(string), DateTime? paymentDate = default(DateTime?))
        {
            this.PaymentType = paymentType;
            this.PaymentMethod = paymentMethod;
            this.PaymentReference = paymentReference;
            this.PaymentDate = paymentDate;
        }
        
        /// <summary>
        /// Type of payment made.
        /// </summary>
        /// <value>Type of payment made.</value>
        [DataMember(Name="paymentType", EmitDefaultValue=false)]
        public string PaymentType { get; set; }

        /// <summary>
        /// Method of payment made.
        /// </summary>
        /// <value>Method of payment made.</value>
        [DataMember(Name="paymentMethod", EmitDefaultValue=false)]
        public string PaymentMethod { get; set; }

        /// <summary>
        /// Reference number of payment made.
        /// </summary>
        /// <value>Reference number of payment made.</value>
        [DataMember(Name="paymentReference", EmitDefaultValue=false)]
        public string PaymentReference { get; set; }

        /// <summary>
        /// Date of payment made.
        /// </summary>
        /// <value>Date of payment made.</value>
        [DataMember(Name="paymentDate", EmitDefaultValue=false)]
        public DateTime? PaymentDate { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class PaymentsContext {\n");
            sb.Append("  PaymentType: ").Append(PaymentType).Append("\n");
            sb.Append("  PaymentMethod: ").Append(PaymentMethod).Append("\n");
            sb.Append("  PaymentReference: ").Append(PaymentReference).Append("\n");
            sb.Append("  PaymentDate: ").Append(PaymentDate).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as PaymentsContext);
        }

        /// <summary>
        /// Returns true if PaymentsContext instances are equal
        /// </summary>
        /// <param name="input">Instance of PaymentsContext to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(PaymentsContext input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.PaymentType == input.PaymentType ||
                    (this.PaymentType != null &&
                    this.PaymentType.Equals(input.PaymentType))
                ) && 
                (
                    this.PaymentMethod == input.PaymentMethod ||
                    (this.PaymentMethod != null &&
                    this.PaymentMethod.Equals(input.PaymentMethod))
                ) && 
                (
                    this.PaymentReference == input.PaymentReference ||
                    (this.PaymentReference != null &&
                    this.PaymentReference.Equals(input.PaymentReference))
                ) && 
                (
                    this.PaymentDate == input.PaymentDate ||
                    (this.PaymentDate != null &&
                    this.PaymentDate.Equals(input.PaymentDate))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.PaymentType != null)
                    hashCode = hashCode * 59 + this.PaymentType.GetHashCode();
                if (this.PaymentMethod != null)
                    hashCode = hashCode * 59 + this.PaymentMethod.GetHashCode();
                if (this.PaymentReference != null)
                    hashCode = hashCode * 59 + this.PaymentReference.GetHashCode();
                if (this.PaymentDate != null)
                    hashCode = hashCode * 59 + this.PaymentDate.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
